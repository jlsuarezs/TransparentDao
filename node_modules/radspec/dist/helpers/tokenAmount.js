"use strict";const BN=require("bn.js"),_require=require("./lib/token"),ERC20_SYMBOL_DECIMALS_ABI=_require.ERC20_SYMBOL_DECIMALS_ABI,ETH=_require.ETH,_require2=require("./lib/formatBN"),formatBN=_require2.formatBN,tenPow=_require2.tenPow;module.exports=eth=>/**
   * Format token amounts taking decimals into account
   *
   * @param {string} tokenAddress The address of the token
   * @param {*} amount The absolute amount for the token quantity (wei)
   * @param {bool} showSymbol Whether the token symbol will be printed after the amount
   * @param {*} [precision=2] The number of decimal places to format to
   * @return {Promise<radspec/evaluator/TypedValue>}
   */async(tokenAddress,amount,showSymbol=!0,precision=2)=>{const amountBn=new BN(amount);let decimals,symbol;if(tokenAddress===ETH)decimals=new BN(18),showSymbol&&(symbol="ETH");else{const token=new eth.Contract(ERC20_SYMBOL_DECIMALS_ABI,tokenAddress);decimals=new BN((await token.methods.decimals().call())),showSymbol&&(symbol=await token.methods.symbol().call())}const formattedAmount=formatBN(amountBn,tenPow(decimals),+precision);return{type:"string",value:showSymbol?`${formattedAmount} ${symbol}`:formattedAmount}};
//# sourceMappingURL=tokenAmount.js.map