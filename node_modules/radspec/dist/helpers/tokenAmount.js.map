{"version":3,"sources":["../../src/helpers/tokenAmount.js"],"names":["BN","require","ERC20_SYMBOL_DECIMALS_ABI","ETH","formatBN","tenPow","module","exports","eth","tokenAddress","amount","showSymbol","precision","amountBn","decimals","symbol","token","Contract","methods","call","formattedAmount","type","value"],"mappings":"kBAAMA,CAAAA,EAAE,CAAGC,OAAO,CAAC,OAAD,C,UACyBA,OAAO,CAAC,aAAD,C,CAA1CC,yB,UAAAA,yB,CAA2BC,G,UAAAA,G,WACNF,OAAO,CAAC,gBAAD,C,CAA5BG,Q,WAAAA,Q,CAAUC,M,WAAAA,M,CAElBC,MAAM,CAACC,OAAP,CAAkBC,GAAD,EACf;;;;;;;;KASA,MAAOC,YAAP,CAAqBC,MAArB,CAA6BC,UAAU,GAAvC,CAAgDC,SAAS,CAAG,CAA5D,GAAkE,CAChE,KAAMC,CAAAA,QAAQ,CAAG,GAAIb,CAAAA,EAAJ,CAAOU,MAAP,CAAjB,CADgE,GAG5DI,CAAAA,QAH4D,CAI5DC,MAJ4D,CAMhE,GAAIN,YAAY,GAAKN,GAArB,CACEW,QAAQ,CAAG,GAAId,CAAAA,EAAJ,CAAO,EAAP,CADb,CAEMW,UAFN,GAGII,MAAM,CAAG,KAHb,MAKO,CACL,KAAMC,CAAAA,KAAK,CAAG,GAAIR,CAAAA,GAAG,CAACS,QAAR,CAAiBf,yBAAjB,CAA4CO,YAA5C,CAAd,CAEAK,QAAQ,CAAG,GAAId,CAAAA,EAAJ,EAAO,KAAMgB,CAAAA,KAAK,CAACE,OAAN,CAAcJ,QAAd,GAAyBK,IAAzB,EAAb,EAHN,CAIDR,UAJC,GAKHI,MAAM,CAAG,KAAMC,CAAAA,KAAK,CAACE,OAAN,CAAcH,MAAd,GAAuBI,IAAvB,EALZ,CAON,CAED,KAAMC,CAAAA,eAAe,CAAGhB,QAAQ,CAACS,QAAD,CAAWR,MAAM,CAACS,QAAD,CAAjB,EAAoCF,SAApC,CAAhC,CAEA,MAAO,CACLS,IAAI,CAAE,QADD,CAELC,KAAK,CAAEX,UAAU,CAAI,GAAES,eAAgB,IAAGL,MAAO,EAAhC,CAAoCK,eAFhD,CAIR,C","sourcesContent":["const BN = require('bn.js')\nconst { ERC20_SYMBOL_DECIMALS_ABI, ETH } = require('./lib/token')\nconst { formatBN, tenPow } = require('./lib/formatBN')\n\nmodule.exports = (eth) =>\n  /**\n   * Format token amounts taking decimals into account\n   *\n   * @param {string} tokenAddress The address of the token\n   * @param {*} amount The absolute amount for the token quantity (wei)\n   * @param {bool} showSymbol Whether the token symbol will be printed after the amount\n   * @param {*} [precision=2] The number of decimal places to format to\n   * @return {Promise<radspec/evaluator/TypedValue>}\n   */\n  async (tokenAddress, amount, showSymbol = true, precision = 2) => {\n    const amountBn = new BN(amount)\n\n    let decimals\n    let symbol\n\n    if (tokenAddress === ETH) {\n      decimals = new BN(18)\n      if (showSymbol) {\n        symbol = 'ETH'\n      }\n    } else {\n      const token = new eth.Contract(ERC20_SYMBOL_DECIMALS_ABI, tokenAddress)\n\n      decimals = new BN(await token.methods.decimals().call())\n      if (showSymbol) {\n        symbol = await token.methods.symbol().call()\n      }\n    }\n\n    const formattedAmount = formatBN(amountBn, tenPow(decimals), Number(precision))\n\n    return {\n      type: 'string',\n      value: showSymbol ? `${formattedAmount} ${symbol}` : formattedAmount\n    }\n  }\n"],"file":"tokenAmount.js"}