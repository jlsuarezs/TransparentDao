{"version":3,"sources":["../../src/helpers/index.js"],"names":["formatDate","require","echo","tokenAmount","transformTime","formatPct","defaultHelpers","Helpers","constructor","eth","userHelpers","availableHelpers","exists","helper","execute","inputs","map","input","value","module","exports"],"mappings":"2LAAMA,CAAAA,UAAU,CAAGC,OAAO,CAAC,cAAD,C,CACpBC,IAAI,CAAGD,OAAO,CAAC,QAAD,C,CACdE,WAAW,CAAGF,OAAO,CAAC,eAAD,C,CACrBG,aAAa,CAAGH,OAAO,CAAC,iBAAD,C,CACvBI,SAAS,CAAGJ,OAAO,CAAC,aAAD,C,CAEnBK,cAAc,CAAG,CACrBN,UADqB,CAErBI,aAFqB,CAGrBD,WAHqB,CAIrBE,SAJqB,CAKrBH,IAGF;;;;;;GARuB,C,CAevB,KAAMK,CAAAA,OAAQ,CACZC,WAAW,CAAEC,GAAF,CAAOC,WAAW,CAAG,EAArB,CAAyB,CAClC,KAAKD,GAAL,CAAWA,GADuB,CAElC,KAAKE,gBAAL,+BAA6BL,cAA7B,CAAgDI,WAAhD,CACD,CAED;;;;;KAMAE,MAAM,CAAEC,MAAF,CAAU,CACd,MAAO,CAAC,CAAC,KAAKF,gBAAL,CAAsBE,MAAtB,CACV,CAED;;;;;;KAOAC,OAAO,CAAED,MAAF,CAAUE,MAAV,CAAkB,CACmB;AAC1C,MADAA,CAAAA,MAAM,CAAGA,MAAM,CAACC,GAAP,CAAWC,KAAK,EAAIA,KAAK,CAACC,KAA1B,CACT,CAAO,KAAKP,gBAAL,CAAsBE,MAAtB,EAA8B,KAAKJ,GAAnC,EAAwC,GAAGM,MAA3C,CACR,CA1BW,CA6BdI,MAAM,CAACC,OAAP,6BACEb,OADF,EAGKD,cAHL,C","sourcesContent":["const formatDate = require('./formatDate')\nconst echo = require('./echo')\nconst tokenAmount = require('./tokenAmount')\nconst transformTime = require('./transformTime')\nconst formatPct = require('./formatPct')\n\nconst defaultHelpers = {\n  formatDate,\n  transformTime,\n  tokenAmount,\n  formatPct,\n  echo\n}\n\n/**\n * Class for managing the execution of helper functions\n *\n * @class Helpers\n * @param {web3/eth} eth web3.eth instance\n * @param {Object.<string,helpers/Helper>} userHelpers User defined helpers\n */\nclass Helpers {\n  constructor (eth, userHelpers = {}) {\n    this.eth = eth\n    this.availableHelpers = { ...defaultHelpers, ...userHelpers }\n  }\n\n  /**\n   * Does a helper exist\n   *\n   * @param  {string} helper Helper name\n   * @return {bool}\n   */\n  exists (helper) {\n    return !!this.availableHelpers[helper]\n  }\n\n  /**\n   * Execute a helper with some inputs\n   *\n   * @param  {string} helper Helper name\n   * @param  {Array<radspec/evaluator/TypedValue>} inputs\n   * @return {Promise<radspec/evaluator/TypedValue>}\n   */\n  execute (helper, inputs) {\n    inputs = inputs.map(input => input.value) // pass values directly\n    return this.availableHelpers[helper](this.eth)(...inputs)\n  }\n}\n\nmodule.exports = {\n  Helpers,\n\n  ...defaultHelpers\n}\n"],"file":"index.js"}