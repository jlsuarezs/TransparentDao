{"version":3,"sources":["../node_modules/@babel/runtime/helpers/interopRequireWildcard.js","../node_modules/@babel/runtime/helpers/interopRequireDefault.js","../node_modules/uuid/lib/rng-browser.js","../node_modules/uuid/lib/bytesToUuid.js","../node_modules/uuid/v4.js","../node_modules/@aragon/messenger/dist/jsonrpc.js","../node_modules/@aragon/messenger/dist/providers/Provider.js","../../src/util/root.ts","../../src/util/isFunction.ts","../../src/util/isArray.ts","../../src/util/isObject.ts","../../src/util/errorObject.ts","../../src/util/tryCatch.ts","../../src/util/UnsubscriptionError.ts","../src/Subscription.ts","../src/Observer.ts","../../src/symbol/rxSubscriber.ts","../src/Subscriber.ts","../../src/util/toSubscriber.ts","../../src/symbol/observable.ts","../../src/util/noop.ts","../../src/util/pipe.ts","../src/Observable.ts","../../src/util/ObjectUnsubscribedError.ts","../src/SubjectSubscription.ts","../src/Subject.ts","../src/AsyncSubject.ts","../../src/observable/BoundCallbackObservable.ts","../../src/observable/bindCallback.ts","../../../src/add/observable/bindCallback.ts","../../src/observable/BoundNodeCallbackObservable.ts","../../src/observable/bindNodeCallback.ts","../../../src/add/observable/bindNodeCallback.ts","../../src/util/isScheduler.ts","../../src/observable/ScalarObservable.ts","../../src/observable/EmptyObservable.ts","../../src/observable/ArrayObservable.ts","../src/OuterSubscriber.ts","../../src/util/isArrayLike.ts","../../src/util/isPromise.ts","../../src/symbol/iterator.ts","../src/InnerSubscriber.ts","../../src/util/subscribeToResult.ts","../../src/operators/combineLatest.ts","../../src/observable/combineLatest.ts","../../../src/add/observable/combineLatest.ts","../../src/observable/of.ts","../../src/observable/PromiseObservable.ts","../../src/observable/IteratorObservable.ts","../../src/observable/ArrayLikeObservable.ts","../src/Notification.ts","../../src/operators/observeOn.ts","../../src/observable/FromObservable.ts","../../src/observable/from.ts","../../src/operators/mergeMap.ts","../../src/util/identity.ts","../../src/operators/mergeAll.ts","../../src/operators/concatAll.ts","../../src/observable/concat.ts","../../../src/add/observable/concat.ts","../../src/observable/DeferObservable.ts","../../src/observable/defer.ts","../../../src/add/observable/defer.ts","../../src/observable/empty.ts","../../../src/add/observable/empty.ts","../../src/observable/ForkJoinObservable.ts","../../src/observable/forkJoin.ts","../../../src/add/observable/forkJoin.ts","../../../src/add/observable/from.ts","../../src/observable/FromEventObservable.ts","../../src/observable/fromEvent.ts","../../../src/add/observable/fromEvent.ts","../../src/observable/FromEventPatternObservable.ts","../../src/observable/fromEventPattern.ts","../../../src/add/observable/fromEventPattern.ts","../../src/observable/fromPromise.ts","../../../src/add/observable/fromPromise.ts","../../src/observable/GenerateObservable.ts","../../src/observable/generate.ts","../../../src/add/observable/generate.ts","../../src/observable/IfObservable.ts","../../src/observable/if.ts","../../../src/add/observable/if.ts","../../src/util/isNumeric.ts","../../src/scheduler/Action.ts","../../src/scheduler/AsyncAction.ts","../src/Scheduler.ts","../../src/scheduler/AsyncScheduler.ts","../../src/scheduler/async.ts","../../src/observable/IntervalObservable.ts","../../src/observable/interval.ts","../../../src/add/observable/interval.ts","../../src/observable/merge.ts","../../../src/add/observable/merge.ts","../../src/observable/race.ts","../../../src/add/observable/race.ts","../../src/observable/NeverObservable.ts","../../src/observable/never.ts","../../../src/add/observable/never.ts","../../../src/add/observable/of.ts","../../src/operators/onErrorResumeNext.ts","../../src/observable/onErrorResumeNext.ts","../../../src/add/observable/onErrorResumeNext.ts","../../src/observable/PairsObservable.ts","../../src/observable/pairs.ts","../../../src/add/observable/pairs.ts","../../src/observable/RangeObservable.ts","../../src/observable/range.ts","../../../src/add/observable/range.ts","../../src/observable/UsingObservable.ts","../../src/observable/using.ts","../../../src/add/observable/using.ts","../../src/observable/ErrorObservable.ts","../../src/observable/throw.ts","../../../src/add/observable/throw.ts","../../src/util/isDate.ts","../../src/observable/TimerObservable.ts","../../src/observable/timer.ts","../../../src/add/observable/timer.ts","../../src/operators/zip.ts","../../src/observable/zip.ts","../../../src/add/observable/zip.ts","../../src/operators/map.ts","../../../src/observable/dom/AjaxObservable.ts","../../../src/observable/dom/ajax.ts","../../../../src/add/observable/dom/ajax.ts","../../src/scheduler/QueueAction.ts","../../src/scheduler/QueueScheduler.ts","../../src/scheduler/queue.ts","../src/ReplaySubject.ts","../../src/util/assign.ts","../../../src/observable/dom/WebSocketSubject.ts","../../../src/observable/dom/webSocket.ts","../../../../src/add/observable/dom/webSocket.ts","../../src/operators/buffer.ts","../../src/operator/buffer.ts","../../../src/add/operator/buffer.ts","../../src/operators/bufferCount.ts","../../src/operator/bufferCount.ts","../../../src/add/operator/bufferCount.ts","../../src/operators/bufferTime.ts","../../src/operator/bufferTime.ts","../../../src/add/operator/bufferTime.ts","../../src/operators/bufferToggle.ts","../../src/operator/bufferToggle.ts","../../../src/add/operator/bufferToggle.ts","../../src/operators/bufferWhen.ts","../../src/operator/bufferWhen.ts","../../../src/add/operator/bufferWhen.ts","../../src/operators/catchError.ts","../../src/operator/catch.ts","../../../src/add/operator/catch.ts","../../src/operators/combineAll.ts","../../src/operator/combineAll.ts","../../../src/add/operator/combineAll.ts","../../src/operator/combineLatest.ts","../../../src/add/operator/combineLatest.ts","../../src/operators/concat.ts","../../src/operator/concat.ts","../../../src/add/operator/concat.ts","../../src/operator/concatAll.ts","../../../src/add/operator/concatAll.ts","../../src/operators/concatMap.ts","../../src/operator/concatMap.ts","../../../src/add/operator/concatMap.ts","../../src/operators/concatMapTo.ts","../../src/operator/concatMapTo.ts","../../../src/add/operator/concatMapTo.ts","../../src/operators/count.ts","../../src/operator/count.ts","../../../src/add/operator/count.ts","../../src/operators/dematerialize.ts","../../src/operator/dematerialize.ts","../../../src/add/operator/dematerialize.ts","../../src/operators/debounce.ts","../../src/operator/debounce.ts","../../../src/add/operator/debounce.ts","../../src/operators/debounceTime.ts","../../src/operator/debounceTime.ts","../../../src/add/operator/debounceTime.ts","../../src/operators/defaultIfEmpty.ts","../../src/operator/defaultIfEmpty.ts","../../../src/add/operator/defaultIfEmpty.ts","../../src/operators/delay.ts","../../src/operator/delay.ts","../../../src/add/operator/delay.ts","../../src/operators/delayWhen.ts","../../src/operator/delayWhen.ts","../../../src/add/operator/delayWhen.ts","../../src/util/Set.ts","../../src/operators/distinct.ts","../../src/operator/distinct.ts","../../../src/add/operator/distinct.ts","../../src/operators/distinctUntilChanged.ts","../../src/operator/distinctUntilChanged.ts","../../../src/add/operator/distinctUntilChanged.ts","../../src/operators/distinctUntilKeyChanged.ts","../../src/operator/distinctUntilKeyChanged.ts","../../../src/add/operator/distinctUntilKeyChanged.ts","../../src/operators/tap.ts","../../src/operator/do.ts","../../../src/add/operator/do.ts","../../src/operators/exhaust.ts","../../src/operator/exhaust.ts","../../../src/add/operator/exhaust.ts","../../src/operators/exhaustMap.ts","../../src/operator/exhaustMap.ts","../../../src/add/operator/exhaustMap.ts","../../src/operators/expand.ts","../../src/operator/expand.ts","../../../src/add/operator/expand.ts","../../src/util/ArgumentOutOfRangeError.ts","../../src/operators/elementAt.ts","../../src/operator/elementAt.ts","../../../src/add/operator/elementAt.ts","../../src/operators/filter.ts","../../src/operator/filter.ts","../../../src/add/operator/filter.ts","../../src/operators/finalize.ts","../../src/operator/finally.ts","../../../src/add/operator/finally.ts","../../src/operators/find.ts","../../src/operator/find.ts","../../../src/add/operator/find.ts","../../src/operators/findIndex.ts","../../src/operator/findIndex.ts","../../../src/add/operator/findIndex.ts","../../src/util/EmptyError.ts","../../src/operators/first.ts","../../src/operator/first.ts","../../../src/add/operator/first.ts","../../src/util/MapPolyfill.ts","../../src/util/Map.ts","../../src/util/FastMap.ts","../../src/operators/groupBy.ts","../../src/operator/groupBy.ts","../../../src/add/operator/groupBy.ts","../../src/operators/ignoreElements.ts","../../src/operator/ignoreElements.ts","../../../src/add/operator/ignoreElements.ts","../../src/operators/isEmpty.ts","../../src/operator/isEmpty.ts","../../../src/add/operator/isEmpty.ts","../../src/operators/audit.ts","../../src/operator/audit.ts","../../../src/add/operator/audit.ts","../../src/operators/auditTime.ts","../../src/operator/auditTime.ts","../../../src/add/operator/auditTime.ts","../../src/operators/last.ts","../../src/operator/last.ts","../../../src/add/operator/last.ts","../../src/operator/let.ts","../../../src/add/operator/let.ts","../../src/operators/every.ts","../../src/operator/every.ts","../../../src/add/operator/every.ts","../../src/operator/map.ts","../../../src/add/operator/map.ts","../../src/operators/mapTo.ts","../../src/operator/mapTo.ts","../../../src/add/operator/mapTo.ts","../../src/operators/materialize.ts","../../src/operator/materialize.ts","../../../src/add/operator/materialize.ts","../../src/operators/scan.ts","../../src/operators/takeLast.ts","../../src/operators/reduce.ts","../../src/operators/max.ts","../../src/operator/max.ts","../../../src/add/operator/max.ts","../../src/operators/merge.ts","../../src/operator/merge.ts","../../../src/add/operator/merge.ts","../../src/operator/mergeAll.ts","../../../src/add/operator/mergeAll.ts","../../src/operator/mergeMap.ts","../../../src/add/operator/mergeMap.ts","../../src/operators/mergeMapTo.ts","../../src/operator/mergeMapTo.ts","../../../src/add/operator/mergeMapTo.ts","../../src/operators/mergeScan.ts","../../src/operator/mergeScan.ts","../../../src/add/operator/mergeScan.ts","../../src/operators/min.ts","../../src/operator/min.ts","../../../src/add/operator/min.ts","../../src/operators/refCount.ts","../../src/observable/ConnectableObservable.ts","../../src/operators/multicast.ts","../../src/operator/multicast.ts","../../../src/add/operator/multicast.ts","../../src/operator/observeOn.ts","../../../src/add/operator/observeOn.ts","../../src/operator/onErrorResumeNext.ts","../../../src/add/operator/onErrorResumeNext.ts","../../src/operators/pairwise.ts","../../src/operator/pairwise.ts","../../../src/add/operator/pairwise.ts","../../src/util/not.ts","../../src/operators/partition.ts","../../src/operator/partition.ts","../../../src/add/operator/partition.ts","../../src/operators/pluck.ts","../../src/operator/pluck.ts","../../../src/add/operator/pluck.ts","../../src/operators/publish.ts","../../src/operator/publish.ts","../../../src/add/operator/publish.ts","../src/BehaviorSubject.ts","../../src/operators/publishBehavior.ts","../../src/operator/publishBehavior.ts","../../../src/add/operator/publishBehavior.ts","../../src/operators/publishReplay.ts","../../src/operator/publishReplay.ts","../../../src/add/operator/publishReplay.ts","../../src/operators/publishLast.ts","../../src/operator/publishLast.ts","../../../src/add/operator/publishLast.ts","../../src/operators/race.ts","../../src/operator/race.ts","../../../src/add/operator/race.ts","../../src/operator/reduce.ts","../../../src/add/operator/reduce.ts","../../src/operators/repeat.ts","../../src/operator/repeat.ts","../../../src/add/operator/repeat.ts","../../src/operators/repeatWhen.ts","../../src/operator/repeatWhen.ts","../../../src/add/operator/repeatWhen.ts","../../src/operators/retry.ts","../../src/operator/retry.ts","../../../src/add/operator/retry.ts","../../src/operators/retryWhen.ts","../../src/operator/retryWhen.ts","../../../src/add/operator/retryWhen.ts","../../src/operators/sample.ts","../../src/operator/sample.ts","../../../src/add/operator/sample.ts","../../src/operators/sampleTime.ts","../../src/operator/sampleTime.ts","../../../src/add/operator/sampleTime.ts","../../src/operator/scan.ts","../../../src/add/operator/scan.ts","../../src/operators/sequenceEqual.ts","../../src/operator/sequenceEqual.ts","../../../src/add/operator/sequenceEqual.ts","../../src/operators/share.ts","../../src/operator/share.ts","../../../src/add/operator/share.ts","../../src/operators/shareReplay.ts","../../src/operator/shareReplay.ts","../../../src/add/operator/shareReplay.ts","../../src/operators/single.ts","../../src/operator/single.ts","../../../src/add/operator/single.ts","../../src/operators/skip.ts","../../src/operator/skip.ts","../../../src/add/operator/skip.ts","../../src/operators/skipLast.ts","../../src/operator/skipLast.ts","../../../src/add/operator/skipLast.ts","../../src/operators/skipUntil.ts","../../src/operator/skipUntil.ts","../../../src/add/operator/skipUntil.ts","../../src/operators/skipWhile.ts","../../src/operator/skipWhile.ts","../../../src/add/operator/skipWhile.ts","../../src/operators/startWith.ts","../../src/operator/startWith.ts","../../../src/add/operator/startWith.ts","../../src/util/Immediate.ts","../../src/scheduler/AsapAction.ts","../../src/scheduler/AsapScheduler.ts","../../src/scheduler/asap.ts","../../src/observable/SubscribeOnObservable.ts","../../src/operators/subscribeOn.ts","../../src/operator/subscribeOn.ts","../../../src/add/operator/subscribeOn.ts","../../src/operators/switchMap.ts","../../src/operators/switchAll.ts","../../src/operator/switch.ts","../../../src/add/operator/switch.ts","../../src/operator/switchMap.ts","../../../src/add/operator/switchMap.ts","../../src/operators/switchMapTo.ts","../../src/operator/switchMapTo.ts","../../../src/add/operator/switchMapTo.ts","../../src/operators/take.ts","../../src/operator/take.ts","../../../src/add/operator/take.ts","../../src/operator/takeLast.ts","../../../src/add/operator/takeLast.ts","../../src/operators/takeUntil.ts","../../src/operator/takeUntil.ts","../../../src/add/operator/takeUntil.ts","../../src/operators/takeWhile.ts","../../src/operator/takeWhile.ts","../../../src/add/operator/takeWhile.ts","../../src/operators/throttle.ts","../../src/operator/throttle.ts","../../../src/add/operator/throttle.ts","../../src/operators/throttleTime.ts","../../src/operator/throttleTime.ts","../../../src/add/operator/throttleTime.ts","../../src/operators/timeInterval.ts","../../src/operator/timeInterval.ts","../../../src/add/operator/timeInterval.ts","../../src/util/TimeoutError.ts","../../src/operators/timeout.ts","../../src/operator/timeout.ts","../../../src/add/operator/timeout.ts","../../src/operators/timeoutWith.ts","../../src/operator/timeoutWith.ts","../../../src/add/operator/timeoutWith.ts","../../src/operators/timestamp.ts","../../src/operator/timestamp.ts","../../../src/add/operator/timestamp.ts","../../src/operators/toArray.ts","../../src/operator/toArray.ts","../../../src/add/operator/toArray.ts","../../src/operators/window.ts","../../src/operator/window.ts","../../../src/add/operator/window.ts","../../src/operators/windowCount.ts","../../src/operator/windowCount.ts","../../../src/add/operator/windowCount.ts","../../src/operators/windowTime.ts","../../src/operator/windowTime.ts","../../../src/add/operator/windowTime.ts","../../src/operators/windowToggle.ts","../../src/operator/windowToggle.ts","../../../src/add/operator/windowToggle.ts","../../src/operators/windowWhen.ts","../../src/operator/windowWhen.ts","../../../src/add/operator/windowWhen.ts","../../src/operators/withLatestFrom.ts","../../src/operator/withLatestFrom.ts","../../../src/add/operator/withLatestFrom.ts","../../src/operator/zip.ts","../../../src/add/operator/zip.ts","../../src/operators/zipAll.ts","../../src/operator/zipAll.ts","../../../src/add/operator/zipAll.ts","../../src/testing/SubscriptionLog.ts","../../src/testing/SubscriptionLoggable.ts","../../src/util/applyMixins.ts","../../src/testing/ColdObservable.ts","../../src/testing/HotObservable.ts","../../src/scheduler/VirtualTimeScheduler.ts","../../src/testing/TestScheduler.ts","../../src/util/AnimationFrame.ts","../../src/scheduler/AnimationFrameAction.ts","../../src/scheduler/AnimationFrameScheduler.ts","../../src/scheduler/animationFrame.ts","../src/operators.ts","../src/Rx.ts","../node_modules/@aragon/messenger/dist/providers/MessagePortMessage.js","../node_modules/@aragon/messenger/dist/providers/WindowMessage.js","../node_modules/@aragon/messenger/dist/providers/DevMessage.js","../node_modules/@aragon/messenger/dist/index.js","../src/index.js","rxjs.js","../node_modules/@aragon/templates-tokens/index.js","testnet.js","lib/verified-tokens.js","lib/token-utils.js","../node_modules/underscore/underscore.js","../node_modules/base64-js/index.js","../node_modules/ieee754/index.js","../node_modules/node-libs-browser/node_modules/isarray/index.js","../node_modules/node-libs-browser/node_modules/buffer/index.js","../node_modules/ethjs-unit/node_modules/bn.js/lib/bn.js","../node_modules/number-to-bn/node_modules/bn.js/lib/bn.js","../node_modules/is-hex-prefixed/src/index.js","../node_modules/strip-hex-prefix/src/index.js","../node_modules/number-to-bn/src/index.js","../node_modules/ethjs-unit/lib/index.js","../node_modules/web3-utils/node_modules/bn.js/lib/bn.js","../node_modules/web3-utils/node_modules/utf8/utf8.js","../node_modules/eth-lib/lib/hash.js","../node_modules/web3-utils/src/utils.js","../node_modules/web3-utils/src/soliditySha3.js","../node_modules/randomhex/src/browser.js","../node_modules/randomhex/src/crypto.js","../node_modules/randomhex/src/index.js","../node_modules/web3-utils/src/index.js","lib/web3-utils.js","0","script.js"],"names":["AppProxyHandler","get","target","name","params","rpc","sendAndObserveResponse","pluck","AppProxy","constructor","provider","Messenger","accounts","sendAndObserveResponses","network","identify","identifier","send","events","external","address","jsonInterface","contract","fromBlock","filter","item","type","constant","forEach","methodJsonInterface","cache","key","value","state","store","reducer","initialState","first","wrappedReducer","event","Promise","resolve","store$","switchMap","mergeScan","map","publishReplay","connect","call","method","notify","title","body","context","date","Date","requests","request","describeScript","script","web3Eth","AragonApp","providers","MessagePortMessage","Proxy","getTestTokenAddresses","testTokens","tokens","VERIFIED_TOKENS","ETHER_TOKEN_VERIFIED_BY_SYMBOL","Map","ETHER_TOKEN_VERIFIED_ADDRESSES","Set","values","ETHER_TOKEN_FAKE_ADDRESS","isTokenVerified","tokenAddress","networkType","has","toLowerCase","module","exports","str","Error","slice","isHexPrefixed","require","BN","stripHexPrefix","arg","multiplier","formattedString","String","trim","substr","stringArg","match","mul","toString","pop","push","dividedToIntegerBy","JSON","stringify","numberToBN","zero","negative1","unitMap","getValueOfUnit","unitInput","unit","unitValue","numberToString","toTwos","toPrecision","fromWei","weiInput","optionsInput","wei","negative","lt","base","baseLength","length","options","fraction","mod","pad","whole","div","commify","replace","toWei","etherInput","ether","substring","comps","split","add","addressesEqual","second","addressPattern","shortenAddress","charsLength","inputs","outputs","payable","stateMutability","anonymous","indexed","tokenAbi","concat","tokenDecimalsAbi","tokenNameAbi","tokenSymbolAbi","vaultAbi","vaultBalanceAbi","vaultEventAbi","INITIALIZATION_TRIGGER","Symbol","TEST_TOKEN_ADDRESSES","tokenContracts","tokenDecimals","tokenName","tokenSymbols","ETH_CONTRACT","app","Aragon","retryEvery","callback","initialRetryTimer","increaseFactor","attempt","retryTimer","console","error","setTimeout","initialize","vaultAddress","ethAddress","vaultContract","take","toPromise","createStore","set","ethToken","vault","settings","eventAddress","eventName","nextState","initializeState","vaultLoadBalance","proxyAddress","newTransaction","withTestnetState","loadTestnetState","withEthBalance","loadEthBalance","token","returnValues","balances","updateBalances","transactionHash","reference","transactionId","transactionDetails","loadTransactionDetails","id","transactions","updateTransactions","tokenContract","balancesIndex","findIndex","newBalanceEntry","newBalances","Array","from","amount","loadTokenBalance","transactionsIndex","newTransactions","all","loadTokenDecimals","loadTokenName","loadTokenSymbol","balance","decimals","symbol","verified","reject","subscribe","transaction","marshallTransactionDetails","entity","isIncoming","paymentId","periodId","marshallDate","parseInt","loadTestnetTokenBalances","reducedState","retry","err"],"mappings":";AAAA,Aydm2GA,AKAA,ILAA,AKAA,ELAA,AKAA,G9dn2GA,EAAA,GACA,Aydk2GA,AKAA,G9dl2GA,GAAA,EAAA,Eydk2GA,AKAA,QLn2GA,AKAA,C9dEA,OAAA,CydFA,AKAA,C9dIA,CydJA,AKAA,G9dIA,AydHA,AKAA,E9dGA,GAEA,GAAA,KydFA,AKAA,C9dEA,EACA,IAAA,EydHA,AKAA,E9dGA,AydHA,AKAA,ELAA,AKAA,G9dGA,AydFA,AKAA,E9dGA,EydHA,AKAA,C9dGA,CydHA,AKAA,M9dGA,AydHA,AKAA,ILAA,AKAA,M9dGA,AydHA,AKAA,GLAA,AKAA,Y9dGA,KAAA,EAAA,CydEA,AKAA,E9dFA,CACA,IAAA,EAAA,AydCA,AKAA,ELAA,AKAA,ELAA,AKAA,G9dDA,AydEA,AKAA,ELAA,AKAA,OLAA,AKAA,ELCA,AKAA,ILAA,AKAA,C9dHA,CydGA,AKAA,M9dHA,OydIA,AKAA,ELAA,AKAA,ULAA,AKAA,ELAA,AKAA,I9dJA,MydKA,AKAA,C9dLA,CydKA,AKAA,ULAA,AKAA,ILAA,AKAA,ELCA,AKAA,ELAA,AKAA,M9dNA,EAAA,EydMA,AKAA,C9dNA,GAEA,EAAA,KAAA,CydIA,AKAA,C9dJA,CydSA,AKAA,G9dRA,MydQA,AKAA,C9dRA,CydQA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,GLAA,AKAA,ELAA,AKAA,E9dTA,EAAA,CydSA,AKAA,C9dTA,EydUA,AKAA,C9dRA,EAAA,GAAA,CydQA,AKAA,C9dRA,CydWA,AKAA,E9dJA,GydIA,AKAA,I9dLA,EAAA,GydKA,AKAA,ELCA,AKAA,G9dNA,EACA,AydKA,AKAA,E9dDA,IydCA,AKAA,G9dDA,EydEA,AKAA,KLAA,AKAA,C9dFA,MydEA,AKAA,ELGA,AKAA,KLAA,AKAA,ILAA,AKAA,KLEA,AKAA,OLAA,AKAA,ILCA,AKAA,OLAA,AKAA,GLAA,AKAA,OLAA,AKAA,ILCA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ILGA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELAA,AKAA,GLAA,AKAA,GLAA,AKAA,GLAA,AKAA,OLYA,AKAA,ILAA,AKAA,ELTA,AKAA,iBLAA,AKAA,ELCA,AKAA,ELAA,AKAA,QLAA,AKAA,ELEA,AKAA,ELAA,AKAA,GLAA,AKAA,ELGA,AKAA,ELAA,AKAA,GLAA,AKAA,ELCA,AKAA,ELAA,AKAA,SLAA,AKAA,GLGA,AKAA,ILCA,AKAA,ELAA,AKAA,QLAA,AKAA,ULAA,AKAA,OLCA,AKAA,MLAA,AKAA,ILoIA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLGA,AKAA,ILFA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,WLAA,AKAA,GLAA,AKAA,GLEA,AKAA,ILAA,AKAA,ELIA,AKAA,GLDA,AKAA,GLAA,AKAA,ILAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLAA,AKAA,GLGA,AKAA,GLAA,AKAA,ILAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLAA,AKAA,GLIA,AKAA,GLAA,AKAA,ELGA,AKAA,OLAA,AKAA,ELiCA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLGA,AKAA,ILFA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,WLAA,AKAA,GLAA,AKAA,GLEA,AKAA,GLAA,AKAA,ELIA,AKAA,GLDA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLAA,AKAA,GLGA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLAA,AKAA,GLIA,AKAA,ELGA,AKAA,OLAA,AKAA,EL5MA,AKAA,ELAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,aLAA,AKAA,GLIA,AKAA,OLAA,AKAA,GLAA,AKAA,iBLAA,AKAA,GLCA,AKAA,ELAA,AKAA,YLAA,AKAA,WLAA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,QLAA,AKAA,ELAA,AKAA,QLGA,AKAA,ELAA,AKAA,ILAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLCA,AKAA,OLAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELCA,AKAA,GLGA,AKAA,ELAA,AKAA,ILAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLCA,AKAA,OLAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELCA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,GLAA,AKAA,iBLAA,AKAA,ELCA,AKAA,OLAA,AKAA,KLAA,AKAA,YLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLGA,AKAA,GLAA,AKAA,iBLAA,AKAA,ELCA,AKAA,OLAA,AKAA,KLAA,AKAA,WLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLGA,AKAA,QLAA,AKAA,ILCA,AKAA,ELAA,AKAA,ILEA,AKAA,ELAA,AKAA,KLAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLAA,AKAA,GLAA,AKAA,GLAA,AKAA,ILGA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,OLFA,AKAA,ELAA,AKAA,ELAA,AKAA,WLAA,AKAA,QLAA,AKAA,OLAA,AKAA,KLEA,AKAA,ILCA,AKAA,ILGA,AKAA,KLAA,AKAA,ELCA,AKAA,KLAA,AKAA,ULAA,AKAA,ELAA,AKAA,GLEA,AKAA,KLAA,AKAA,WLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLGA,AKAA,MLAA,AKAA,ELAA,AKAA,KLCA,AKAA,KLAA,AKAA,SLAA,AKAA,GLGA,AKAA,KLAA,AKAA,QLEA,AKAA,OLAA,AKAA,GLEA,AKAA,KLAA,AKAA,WLAA,AKAA,KLAA,AKAA,ULAA,AKAA,ELAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,YLAA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILCA,AKAA,KLAA,AKAA,SLAA,AKAA,ELCA,AKAA,GLAA,AKAA,GLEA,AKAA,ELAA,AKAA,ULCA,AKAA,KLAA,AKAA,MLAA,AKAA,CLAA,AKAA,SLAA,AKAA,GLCA,AKAA,KLAA,AKAA,OLAA,AKAA,GLCA,AKAA,ELAA,AKAA,kBLCA,AKAA,KLAA,AKAA,MLAA,AKAA,CLCA,AKAA,SLAA,AKAA,ELCA,AKAA,ELAA,AKAA,SLAA,AKAA,ULEA,AKAA,KLAA,AKAA,OLAA,AKAA,ILEA,AKAA,ELAA,AKAA,ELAA,AKAA,kBLCA,AKAA,KLAA,AKAA,MLAA,AKAA,CLCA,AKAA,SLAA,AKAA,ELCA,AKAA,ELAA,AKAA,SLAA,AKAA,SLCA,AKAA,GLEA,AKAA,KLAA,AKAA,OLAA,AKAA,GLGA,AKAA,OLAA,AKAA,GLGA,AKAA,KLAA,AKAA,WLAA,AKAA,KLAA,AKAA,ULAA,AKAA,ELAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,WLAA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLGA,AKAA,GLDA,AKAA,ELAA,AKAA,iBLAA,AKAA,ELAA,AKAA,QLCA,AKAA,ELAA,AKAA,QLAA,AKAA,ELGA,AKAA,OLFA,AKAA,KLAA,AKAA,MLAA,AKAA,CLAA,AKAA,GLCA,AKAA,KLAA,AKAA,OLAA,AKAA,ELCA,AKAA,KLGA,AKAA,KLAA,AKAA,OLAA,AKAA,KLAA,AKAA,KLAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,MLAA,AKAA,KLAA,AKAA,QLCA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,OLAA,AKAA,ILCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELGA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELCA,AKAA,GLAA,AKAA,OLAA,AKAA,ELCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,GLAA,AKAA,ELAA,AKAA,SLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ELAA,AKAA,GLAA,AKAA,ILAA,AKAA,GLAA,AKAA,ELAA,AKAA,ULCA,AKAA,GLAA,AKAA,KLCA,AKAA,KLCA,AKAA,GLAA,AKAA,GLCA,AKAA,ULGA,AKAA,GLAA,AKAA,OLAA,AKAA,ELCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,GLAA,AKAA,ELAA,AKAA,SLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ELAA,AKAA,GLAA,AKAA,ILAA,AKAA,GLAA,AKAA,ELAA,AKAA,ULCA,AKAA,GLAA,AKAA,KLCA,AKAA,KLCA,AKAA,GLAA,AKAA,GLCA,AKAA,KLIA,AKAA,OLAA,AKAA,KLAA,AKAA,SL2BA,AKAA,ELAA,AKAA,ULAA,AKAA,ULAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLEA,AKAA,KLAA,AKAA,OLAA,AKAA,KLAA,AKAA,MLAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLAA,AKAA,GLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,MLAA,AKAA,KLAA,AKAA,QLCA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,OLAA,AKAA,ILCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELGA,AKAA,ILAA,AKAA,ELAA,AKAA,ELEA,AKAA,ELAA,AKAA,ELCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,GLAA,AKAA,ELAA,AKAA,SLEA,AKAA,KLAA,AKAA,MLAA,AKAA,ELAA,AKAA,ILAA,AKAA,ILAA,AKAA,GLAA,AKAA,ELAA,AKAA,SLCA,AKAA,GLAA,AKAA,KLCA,AKAA,KLCA,AKAA,GLAA,AKAA,GLCA,AKAA,KLGA,AKAA,ELAA,AKAA,ILAA,AKAA,ILCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,GLAA,AKAA,ELAA,AKAA,SLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ELAA,AKAA,ILAA,AKAA,ILAA,AKAA,GLAA,AKAA,ELAA,AKAA,SLEA,AKAA,KLAA,AKAA,SL2BA,AKAA,ELAA,AKAA,ULAA,AKAA,WLAA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLEA,AKAA,KLAA,AKAA,MLAA,AKAA,CLAA,AKAA,GLCA,AKAA,KLAA,AKAA,OLAA,AKAA,ELGA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,SLAA,AKAA,GLAA,AKAA,ELCA,AKAA,ILEA,AKAA,ILCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELOA,AKAA,ILLA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELEA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLEA,AKAA,KLAA,AKAA,MLAA,AKAA,GLCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELAA,AKAA,SLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,ELEA,AKAA,KLAA,AKAA,OLAA,AKAA,GLIA,AKAA,GLAA,AKAA,ILAA,AKAA,ELAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELGA,AKAA,ILFA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLEA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILCA,AKAA,GLAA,AKAA,ELGA,AKAA,KLAA,AKAA,MLAA,AKAA,GLCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELAA,AKAA,SLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,ELEA,AKAA,KLAA,AKAA,OLAA,AKAA,KLKA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,ELAA,AKAA,MLAA,AKAA,ILAA,AKAA,MLAA,AKAA,KLAA,AKAA,QLCA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,OLAA,AKAA,ILCA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLEA,AKAA,ELAA,AKAA,OLAA,AKAA,KLAA,AKAA,OLCA,AKAA,ELAA,AKAA,SLAA,AKAA,KLAA,AKAA,SLCA,AKAA,ELAA,AKAA,ILAA,AKAA,KLAA,AKAA,KLGA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,WLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,MLEA,AKAA,OLDA,AKAA,KLAA,AKAA,KLAA,AKAA,GLCA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,QLAA,AKAA,SLAA,AKAA,GLCA,AKAA,KLAA,AKAA,KLAA,AKAA,OLAA,AKAA,GLCA,AKAA,KLAA,AKAA,MLAA,AKAA,KLAA,AKAA,ULAA,AKAA,ELEA,AKAA,OLAA,AKAA,MLIA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,WLCA,AKAA,KLAA,AKAA,KLAA,AKAA,OLAA,AKAA,GLAA,AKAA,ILAA,AKAA,KLAA,AKAA,MLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ILCA,AKAA,KLAA,AKAA,SLEA,AKAA,OLAA,AKAA,KLAA,AKAA,aLGA,AKAA,ELAA,AKAA,ULAA,AKAA,ULAA,AKAA,WLKA,AKAA,OLHA,AKAA,ILAA,AKAA,KLAA,AKAA,QLAA,AKAA,ILAA,AKAA,KLAA,AKAA,MLAA,AKAA,KLCA,AKAA,KLAA,AKAA,SLAA,AKAA,GLEA,AKAA,MLGA,AKAA,ELAA,AKAA,ULAA,AKAA,QLAA,AKAA,WLCA,AKAA,OLAA,AKAA,KLAA,AKAA,ILAA,AKAA,ULAA,AKAA,SLAA,AKAA,KLAA,AKAA,SLAA,AKAA,ILAA,AKAA,KLiCA,AKAA,ILAA,AKAA,ELAA,AKAA,CLCA,AKAA,GLCA,AKAA,ILCA,AKAA,KLCA,AKAA,MLCA,AKAA,OLCA,AKAA,QLCA,AKAA,SLCA,AKAA,ULCA,AKAA,WLCA,AKAA,YLCA,AKAA,aLCA,AKAA,cLCA,AKAA,eLCA,AKAA,gBLCA,AKAA,iBLCA,AKAA,kBLCA,AKAA,mBLCA,AKAA,oBLCA,AKAA,qBLCA,AKAA,sBLCA,AKAA,uBLCA,AKAA,wBLCA,AKAA,yBLCA,AKAA,0BLCA,AKAA,2BLCA,AKAA,6BLGA,AKAA,ELAA,AKAA,CLCA,AKAA,ELAA,AKAA,ELCA,AKAA,GLAA,AKAA,GLAA,AKAA,GLAA,AKAA,GLAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLGA,AKAA,ELAA,AKAA,CLCA,AKAA,ELAA,AKAA,ELCA,AKAA,SLAA,AKAA,SLAA,AKAA,SLAA,AKAA,SLAA,AKAA,SLAA,AKAA,SLAA,AKAA,SLCA,AKAA,SLAA,AKAA,ILAA,AKAA,SLAA,AKAA,SLAA,AKAA,SLAA,AKAA,QLAA,AKAA,SLCA,AKAA,SLAA,AKAA,SLAA,AKAA,SLAA,AKAA,SLAA,AKAA,KLAA,AKAA,QLAA,AKAA,QLCA,AKAA,QLAA,AKAA,QLAA,AKAA,QLAA,AKAA,SLAA,AKAA,SLAA,AKAA,SLAA,AKAA,SLCA,AKAA,MLAA,AKAA,SLAA,AKAA,SLAA,AKAA,SLAA,AKAA,SLAA,AKAA,SLAA,AKAA,ULsjBA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,SLAA,AKAA,ELAA,AKAA,SLAA,AKAA,ELAA,AKAA,SLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLAA,AKAA,ELCA,AKAA,ELAA,AKAA,OLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELGA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELEA,AKAA,ELAA,AKAA,SLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,SLAA,AKAA,ELCA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELEA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,CLMA,AKAA,ILHA,AKAA,ILAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLCA,AKAA,ELAA,AKAA,SLAA,AKAA,ELCA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLAA,AKAA,GLAA,AKAA,ELAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELIA,AKAA,ILDA,AKAA,GLFA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,KLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,ILCA,AKAA,GLCA,AKAA,SLAA,AKAA,ELCA,AKAA,ELAA,AKAA,SLAA,AKAA,ELEA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELQA,AKAA,OLNA,AKAA,ILAA,AKAA,ELCA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELEA,AKAA,ELAA,AKAA,SLGA,AKAA,ELAA,AKAA,QLzlBA,AKAA,ELAA,AKAA,ULAA,AKAA,SLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLIA,AKAA,ILAA,AKAA,ELCA,AKAA,GLHA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELGA,AKAA,MLJA,AKAA,ELAA,AKAA,GLAA,AKAA,KLIA,AKAA,QLAA,AKAA,ELAA,AKAA,CLCA,AKAA,ELAA,AKAA,GLGA,AKAA,ILFA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,OLAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLCA,AKAA,GLAA,AKAA,ULAA,AKAA,GLAA,AKAA,ELAA,AKAA,ILAA,AKAA,SLAA,AKAA,ILGA,AKAA,ELDA,AKAA,KLDA,AKAA,ELAA,AKAA,ILAA,AKAA,GLAA,AKAA,ELAA,AKAA,WLCA,AKAA,ILAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,QLAA,AKAA,ELAA,AKAA,ELEA,AKAA,ELAA,AKAA,GLEA,AKAA,GLAA,AKAA,ILCA,AKAA,KLCA,AKAA,GLAA,AKAA,GLCA,AKAA,KLMA,AKAA,ILHA,AKAA,ILAA,AKAA,ILCA,AKAA,ELAA,AKAA,ELAA,AKAA,SLAA,AKAA,ILAA,AKAA,GLEA,AKAA,ELAA,AKAA,OLAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,ELKA,AKAA,OLHA,AKAA,ILAA,AKAA,KLAA,AKAA,WLCA,AKAA,ELAA,AKAA,ILAA,AKAA,GLEA,AKAA,ELGA,AKAA,GLAA,AKAA,KLAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLAA,AKAA,GLAA,AKAA,GLAA,AKAA,GLAA,AKAA,CLEA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLEA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLCA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,QLEA,AKAA,ILDA,AKAA,ELAA,AKAA,SLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ULAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,GLAA,AKAA,SLAA,AKAA,GLMA,AKAA,GLLA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,ILEA,AKAA,SLGA,AKAA,ELAA,AKAA,ELFA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,QLAA,AKAA,ELAA,AKAA,ELQA,AKAA,ILHA,AKAA,KLAA,AKAA,WLCA,AKAA,ELAA,AKAA,ILAA,AKAA,GLEA,AKAA,ELAA,AKAA,OLAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,ELKA,AKAA,OLHA,AKAA,ILAA,AKAA,KLAA,AKAA,WLCA,AKAA,ELAA,AKAA,ILAA,AKAA,GLEA,AKAA,ELGA,AKAA,GLAA,AKAA,ELAA,AKAA,oCLGA,AKAA,ELAA,AKAA,ULAA,AKAA,SLAA,AKAA,WLCA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLSA,AKAA,OLRA,AKAA,ILAA,AKAA,KLAA,AKAA,OLCA,AKAA,GLAA,AKAA,SLAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLCA,AKAA,ILAA,AKAA,KLAA,AKAA,QLAA,AKAA,ILAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLEA,AKAA,GLAA,AKAA,iBLAA,AKAA,SLAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLCA,AKAA,KLAA,AKAA,OLAA,AKAA,GLCA,AKAA,GLAA,AKAA,ELAA,AKAA,8CLEA,AKAA,ILAA,AKAA,KLAA,AKAA,ULAA,AKAA,ELAA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,OLAA,AKAA,WLCA,AKAA,OLAA,AKAA,KLAA,AKAA,SLAA,AKAA,KLGA,AKAA,ELAA,AKAA,ULAA,AKAA,SLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLEA,AKAA,OLDA,AKAA,OLAA,AKAA,ILAA,AKAA,GLCA,AKAA,KLAA,AKAA,YLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,QLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,YLAA,AKAA,MLAA,AKAA,ELAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,YLAA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,aLCA,AKAA,ELAA,AKAA,GLAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,yCLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,+BLEA,AKAA,KLAA,AKAA,QLCA,AKAA,ILGA,AKAA,ELAA,AKAA,ELHA,AKAA,ELAA,AKAA,OLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLGA,AKAA,ELAA,AKAA,KLAA,AKAA,QLCA,AKAA,GLAA,AKAA,ELYA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,SLAA,AKAA,ILCA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,KLCA,AKAA,ELAA,AKAA,OLAA,AKAA,GLEA,AKAA,ELAA,AKAA,GLAA,AKAA,ELGA,AKAA,KLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILCA,AKAA,ELAA,AKAA,GLAA,AKAA,MLrBA,AKAA,CLEA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILCA,AKAA,ELAA,AKAA,GLAA,AKAA,ELGA,AKAA,ILAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,SLAA,AKAA,ILCA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,KLCA,AKAA,ELAA,AKAA,OLAA,AKAA,GLEA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELeA,AKAA,OLAA,AKAA,GLGA,AKAA,KLAA,AKAA,MLCA,AKAA,ELAA,AKAA,ULAA,AKAA,WLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,GLAA,AKAA,KLAA,AKAA,MLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,WLAA,AKAA,SLAA,AKAA,GLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELiBA,AKAA,OLhBA,AKAA,GLAA,AKAA,OLCA,AKAA,GLAA,AKAA,GLCA,AKAA,KLAA,AKAA,ILEA,AKAA,GLAA,AKAA,KLCA,AKAA,GLAA,AKAA,ELCA,AKAA,KLAA,AKAA,GLEA,AKAA,GLAA,AKAA,ILCA,AKAA,GLAA,AKAA,ELCA,AKAA,KLAA,AKAA,GLEA,AKAA,GLAA,AKAA,ILCA,AKAA,GLAA,AKAA,ELCA,AKAA,KLAA,AKAA,GLEA,AKAA,ELAA,AKAA,GLIA,AKAA,ELAA,AKAA,ULAA,AKAA,ULAA,AKAA,SLAA,AKAA,GLEA,AKAA,GLAA,AKAA,ILAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLEA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELoBA,AKAA,OLnBA,AKAA,ILAA,AKAA,KLAA,AKAA,KLCA,AKAA,GLAA,AKAA,GLCA,AKAA,KLAA,AKAA,ILEA,AKAA,ILAA,AKAA,ILAA,AKAA,KLCA,AKAA,GLAA,AKAA,ELCA,AKAA,KLAA,AKAA,GLEA,AKAA,ILAA,AKAA,GLAA,AKAA,KLCA,AKAA,GLAA,AKAA,ELCA,AKAA,KLAA,AKAA,GLEA,AKAA,ILAA,AKAA,ELAA,AKAA,KLCA,AKAA,GLAA,AKAA,ELCA,AKAA,KLAA,AKAA,GLEA,AKAA,ILAA,AKAA,ELAA,AKAA,ILCA,AKAA,ILEA,AKAA,GLIA,AKAA,ELAA,AKAA,ULAA,AKAA,ULAA,AKAA,WLCA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,KLAA,AKAA,OLAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,WLAA,AKAA,GLCA,AKAA,OLAA,AKAA,ILAA,AKAA,KLAA,AKAA,OLAA,AKAA,GLAA,AKAA,GLiBA,AKAA,ELAA,AKAA,ULAA,AKAA,SLAA,AKAA,WLCA,AKAA,GLAA,AKAA,KLAA,AKAA,SLAA,AKAA,OLAA,AKAA,ELGA,AKAA,ILDA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,OLAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,ULAA,AKAA,KLAA,AKAA,MLAA,AKAA,ILEA,AKAA,GLDA,AKAA,GLAA,AKAA,ELCA,AKAA,KLAA,AKAA,ELAA,AKAA,MLEA,AKAA,OLAA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,WLAA,AKAA,WLCA,AKAA,OLAA,AKAA,KLAA,AKAA,KLAA,AKAA,KLAA,AKAA,YLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,OLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,ILAA,AKAA,KLAA,AKAA,SLCA,AKAA,KLAA,AKAA,MLAA,AKAA,MLAA,AKAA,GLAA,AKAA,MLAA,AKAA,GLEA,AKAA,KLAA,AKAA,SLGA,AKAA,ELAA,AKAA,ULAA,AKAA,SLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,MLAA,AKAA,ELAA,AKAA,GLCA,AKAA,KLAA,AKAA,KLAA,AKAA,GLAA,AKAA,MLAA,AKAA,GLAA,AKAA,OLEA,AKAA,KLAA,AKAA,SLGA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,WLCA,AKAA,OLAA,AKAA,ILAA,AKAA,KLAA,AKAA,ULIA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,WLCA,AKAA,OLAA,AKAA,KLAA,AKAA,QLAA,AKAA,QLGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,WLKA,AKAA,OLJA,AKAA,KLAA,AKAA,WLCA,AKAA,KLAA,AKAA,ULAA,AKAA,GLGA,AKAA,MLIA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,KLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,QLCA,AKAA,KLAA,AKAA,MLAA,AKAA,KLAA,AKAA,ULAA,AKAA,ELGA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ILCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLGA,AKAA,OLAA,AKAA,KLAA,AKAA,SLGA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,GLEA,AKAA,OLDA,AKAA,ELAA,AKAA,ILAA,AKAA,KLAA,AKAA,SLAA,AKAA,ELAA,AKAA,WLCA,AKAA,KLAA,AKAA,KLAA,AKAA,ILIA,AKAA,ELAA,AKAA,ULAA,AKAA,GLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLAA,AKAA,KLAA,AKAA,QLAA,AKAA,ILAA,AKAA,GLCA,AKAA,ELAA,AKAA,QLAA,AKAA,ILAA,AKAA,OLGA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLAA,AKAA,KLAA,AKAA,QLAA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,QLAA,AKAA,KLAA,AKAA,OLIA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,GLEA,AKAA,ILAA,AKAA,ELEA,AKAA,ELDA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLCA,AKAA,ELEA,AKAA,KLGA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ILCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLKA,AKAA,OLFA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLEA,AKAA,KLAA,AKAA,SLGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLEA,AKAA,OLDA,AKAA,ELAA,AKAA,ILAA,AKAA,KLAA,AKAA,SLAA,AKAA,ELAA,AKAA,WLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ILIA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLAA,AKAA,KLAA,AKAA,QLAA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,QLAA,AKAA,KLAA,AKAA,OLGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLAA,AKAA,KLAA,AKAA,QLAA,AKAA,MLAA,AKAA,GLCA,AKAA,ELAA,AKAA,QLAA,AKAA,MLAA,AKAA,OLIA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,GLEA,AKAA,ILAA,AKAA,ELCA,AKAA,ELCA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,QLCA,AKAA,ELAA,AKAA,KLCA,AKAA,ELAA,AKAA,ILEA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,MLGA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ILCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLGA,AKAA,GLAA,AKAA,OLAA,AKAA,ELCA,AKAA,KLAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ILCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLMA,AKAA,OLFA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLEA,AKAA,KLAA,AKAA,SLGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLEA,AKAA,OLDA,AKAA,ELAA,AKAA,ILAA,AKAA,KLAA,AKAA,SLAA,AKAA,ELAA,AKAA,WLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ILIA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLAA,AKAA,KLAA,AKAA,QLAA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,QLAA,AKAA,KLAA,AKAA,OLGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLAA,AKAA,KLAA,AKAA,QLAA,AKAA,MLAA,AKAA,GLCA,AKAA,ELAA,AKAA,QLAA,AKAA,MLAA,AKAA,OLIA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,GLCA,AKAA,ELAA,AKAA,iBLAA,AKAA,GLAA,AKAA,GLAA,AKAA,GLEA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,ELAA,AKAA,ILCA,AKAA,ELAA,AKAA,ELAA,AKAA,GLGA,AKAA,KLAA,AKAA,QLAA,AKAA,GLEA,AKAA,ELAA,AKAA,GLCA,AKAA,ILIA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ULAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLSA,AKAA,OLLA,AKAA,ELAA,AKAA,ILCA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ULAA,AKAA,GLAA,AKAA,GLIA,AKAA,KLAA,AKAA,SLGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,QLAA,AKAA,MLAA,AKAA,ILIA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,iBLAA,AKAA,GLAA,AKAA,GLAA,AKAA,GLEA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,GLUA,AKAA,OLRA,AKAA,KLAA,AKAA,QLAA,AKAA,ELAA,AKAA,GLGA,AKAA,KLAA,AKAA,MLAA,AKAA,GLDA,AKAA,ELCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,GLAA,AKAA,ELEA,AKAA,KLAA,AKAA,MLAA,AKAA,KLAA,AKAA,GLAA,AKAA,GLGA,AKAA,KLAA,AKAA,SLIA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,ILAA,AKAA,ELkBA,AKAA,ELAA,AKAA,ELfA,AKAA,GLAA,AKAA,ILAA,AKAA,KLAA,AKAA,ULAA,AKAA,ILAA,AKAA,ELAA,AKAA,SLIA,AKAA,OLHA,AKAA,KLAA,AKAA,SLAA,AKAA,ELCA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,GLCA,AKAA,KLAA,AKAA,ULAA,AKAA,ELCA,AKAA,KLAA,AKAA,YLGA,AKAA,GLAA,AKAA,ILAA,AKAA,KLAA,AKAA,ULAA,AKAA,ILAA,AKAA,ELAA,AKAA,SLIA,AKAA,OLHA,AKAA,ELAA,AKAA,SLAA,AKAA,ELCA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,SLAA,AKAA,ELCA,AKAA,ELAA,AKAA,YLKA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,QLCA,AKAA,ELAA,AKAA,KLCA,AKAA,ELAA,AKAA,ILEA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,MLIA,AKAA,ILDA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ILCA,AKAA,GLAA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,KLAA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,ILAA,AKAA,ELCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,SLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ILAA,AKAA,GLEA,AKAA,KLAA,AKAA,ILAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ILCA,AKAA,GLAA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,ILAA,AKAA,ELCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,SLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ILAA,AKAA,GLIA,AKAA,GLDA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLCA,AKAA,ILAA,AKAA,ELCA,AKAA,KLAA,AKAA,MLAA,AKAA,KLAA,AKAA,QLAA,AKAA,ELCA,AKAA,KLAA,AKAA,czBA,AKAA,ILFA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,ELAA,AKAA,MLEA,AKAA,ILAA,AKAA,ILAA,AKAA,ILAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELCA,AKAA,ILAA,AKAA,SLCA,AKAA,ELAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,GLCA,AKAA,ILAA,AKAA,ILCA,AKAA,ELAA,AKAA,ILAA,AKAA,ELCA,AKAA,ELAA,AKAA,ULEA,AKAA,GLiDA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLEA,AKAA,OLDA,AKAA,ILAA,AKAA,GLCA,AKAA,KLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLsBA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,KLAA,AKAA,ELAA,AKAA,ELCA,AKAA,KLAA,AKAA,ELAA,AKAA,ELvEA,AKAA,KLAA,AKAA,OLCA,AKAA,ELAA,AKAA,GLiDA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLCA,AKAA,ILCA,AKAA,ELAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLWA,AKAA,OLVA,AKAA,KLAA,AKAA,KLAA,AKAA,QLAA,AKAA,KLAA,AKAA,ELAA,AKAA,OLCA,AKAA,ELAA,AKAA,KLAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLrDA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,SLAA,AKAA,ELAA,AKAA,SLAA,AKAA,ELAA,AKAA,SLCA,AKAA,ELAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLIA,AKAA,ILFA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ELAA,AKAA,ILAA,AKAA,CLGA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELGA,AKAA,ILFA,AKAA,ILAA,AKAA,ELAA,AKAA,SLAA,AKAA,ELCA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLAA,AKAA,GLAA,AKAA,ELAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELGA,AKAA,GLFA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,KLCA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,ILGA,AKAA,ELAA,AKAA,SLAA,AKAA,ELGA,AKAA,ELAA,AKAA,ULDA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLIA,AKAA,ILFA,AKAA,GLHA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,SLAA,AKAA,GLAA,AKAA,ILGA,AKAA,ILAA,AKAA,ILAA,AKAA,KLEA,AKAA,GLCA,AKAA,GLAA,AKAA,SLEA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELQA,AKAA,OLNA,AKAA,ILAA,AKAA,ELCA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELEA,AKAA,ELAA,AKAA,SLGA,AKAA,ELAA,AKAA,QLgBA,AKAA,CLAA,AKAA,KLAA,AKAA,ELAA,AKAA,GLEA,AKAA,ELAA,AKAA,KLAA,AKAA,ELAA,AKAA,ILcA,AKAA,ELAA,AKAA,ULAA,AKAA,QLAA,AKAA,SLAA,AKAA,GLGA,AKAA,ILFA,AKAA,ILAA,AKAA,ELAA,AKAA,ILAA,AKAA,MLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ULAA,AKAA,WLAA,AKAA,GLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILCA,AKAA,ELAA,AKAA,GLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLGA,AKAA,OLAA,AKAA,GLIA,AKAA,ELAA,AKAA,ULAA,AKAA,OLAA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,GLAA,AKAA,ILAA,AKAA,GLAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ELGA,AKAA,ILDA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILCA,AKAA,ILAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELCA,AKAA,ILAA,AKAA,ELGA,AKAA,OLAA,AKAA,GLKA,AKAA,ELAA,AKAA,ULAA,AKAA,QLAA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILCA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILCA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLIA,AKAA,ELAA,AKAA,ULAA,AKAA,ULAA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,KLAA,AKAA,QLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLEA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELMA,AKAA,ILLA,AKAA,ILAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELEA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,GLAA,AKAA,GLEA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELIA,AKAA,ILHA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELEA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLEA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLEA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELEA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELEA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELEA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELGA,AKAA,ILAA,AKAA,ILCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELEA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,KLOA,AKAA,ELAA,AKAA,ULAA,AKAA,YLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,ELCA,AKAA,ILGA,AKAA,OLAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,ULAA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,KLAA,AKAA,GLAA,AKAA,GLEA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLEA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELEA,AKAA,ELAA,AKAA,ELAA,AKAA,GLEA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,ILIA,AKAA,ELAA,AKAA,ULAA,AKAA,aLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLEA,AKAA,ILDA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,MLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,GLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELEA,AKAA,ELAA,AKAA,GLAA,AKAA,SLAA,AKAA,ELGA,AKAA,ELDA,AKAA,ELAA,AKAA,SLCA,AKAA,ELEA,AKAA,ELAA,AKAA,SLAA,AKAA,ELIA,AKAA,OLAA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,WLAA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLEA,AKAA,ILDA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILCA,AKAA,GLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLEA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,KLAA,AKAA,ELAA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,KLAA,AKAA,ELAA,AKAA,KLAA,AKAA,GLIA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELCA,AKAA,ELAA,AKAA,GLAA,AKAA,ELGA,AKAA,ELAA,AKAA,ILAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,KLGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLEA,AKAA,ILDA,AKAA,ILAA,AKAA,ELAA,AKAA,ILAA,AKAA,MLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILCA,AKAA,ELAA,AKAA,GLAA,AKAA,ELGA,AKAA,OLAA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,YLAA,AKAA,ELAA,AKAA,OLAA,AKAA,ELAA,AKAA,QLEA,AKAA,ELAA,AKAA,KLAA,AKAA,QLAA,AKAA,GLEA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,GLEA,AKAA,ELAA,AKAA,ILAA,AKAA,MLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,MLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,MLAA,AKAA,GLEA,AKAA,ELAA,AKAA,ILAA,AKAA,MLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,MLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,MLAA,AKAA,GLEA,AKAA,ELAA,AKAA,ELAA,AKAA,MLCA,AKAA,ELAA,AKAA,OLAA,AKAA,ELEA,AKAA,KLAA,AKAA,WLAA,AKAA,ELAA,AKAA,MLAA,AKAA,ELAA,AKAA,OLAA,AKAA,ELAA,AKAA,GLCA,AKAA,KLAA,AKAA,WLAA,AKAA,ELAA,AKAA,MLAA,AKAA,ELAA,AKAA,OLAA,AKAA,ELAA,AKAA,GLEA,AKAA,KLAA,AKAA,ULAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,KLAA,AKAA,ULAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLEA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLAA,AKAA,ELUA,AKAA,OLPA,AKAA,KLAA,AKAA,ULAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,KLAA,AKAA,ULAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,KLAA,AKAA,ULAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,KLAA,AKAA,aLAA,AKAA,ELAA,AKAA,GLEA,AKAA,ELAA,AKAA,SLAA,AKAA,ELAA,AKAA,SLAA,AKAA,ELAA,AKAA,SLCA,AKAA,ELAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLCA,AKAA,ELAA,AKAA,SLIA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,GLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,MLEA,AKAA,OLDA,AKAA,ELAA,AKAA,MLAA,AKAA,ILAA,AKAA,MLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,QLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ELAA,AKAA,ILIA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,MLEA,AKAA,OLDA,AKAA,ELAA,AKAA,MLAA,AKAA,ILAA,AKAA,MLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,QLCA,AKAA,ELAA,AKAA,KLAA,AKAA,ELAA,AKAA,ILIA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,QLAA,AKAA,MLAA,AKAA,ELAA,AKAA,OLGA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,GLCA,AKAA,ELAA,AKAA,iBLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ULIA,AKAA,ILDA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,OLAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,GLAA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,ELCA,AKAA,GLAA,AKAA,SLAA,AKAA,ILAA,AKAA,SLAA,AKAA,GLCA,AKAA,ILAA,AKAA,GLCA,AKAA,GLAA,AKAA,ELAA,AKAA,SLAA,AKAA,ELEA,AKAA,GLAA,AKAA,ILAA,AKAA,GLCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,SLAA,AKAA,ELQA,AKAA,OLLA,AKAA,ILAA,AKAA,ILCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELCA,AKAA,KLAA,AKAA,ULGA,AKAA,MLGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,QLAA,AKAA,MLAA,AKAA,ILIA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,WLCA,AKAA,OLAA,AKAA,KLAA,AKAA,ILAA,AKAA,OLIA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,WLCA,AKAA,OLAA,AKAA,KLAA,AKAA,KLAA,AKAA,KLAA,AKAA,ULIA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,GLCA,AKAA,ILAA,AKAA,ELxxCA,AKAA,SLAA,AKAA,GLGA,AKAA,ILFA,AKAA,ILAA,AKAA,ELAA,AKAA,ILAA,AKAA,MLAA,AKAA,ELAA,AKAA,aLEA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,GLEA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,GLAA,AKAA,KLAA,AKAA,ELGA,AKAA,OLAA,AKAA,EL8wCA,AKAA,CLAA,AKAA,GLCA,AKAA,GLAA,AKAA,ILAA,AKAA,ELAA,AKAA,OLAA,AKAA,OLAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLIA,AKAA,ILDA,AKAA,ILAA,AKAA,ELAA,AKAA,KLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,QLCA,AKAA,ILAA,AKAA,ELAA,AKAA,GLDA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLIA,AKAA,KLAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLCA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,MLCA,AKAA,ILAA,AKAA,ELAA,AKAA,KLEA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,ILIA,AKAA,OLAA,AKAA,GLIA,AKAA,ELAA,AKAA,ULAA,AKAA,OLAA,AKAA,SLAA,AKAA,GLCA,AKAA,ELAA,AKAA,iBLAA,AKAA,GLAA,AKAA,GLAA,AKAA,GLCA,AKAA,ILGA,AKAA,ELHA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,GLAA,AKAA,ELAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,WLAA,AKAA,GLAA,AKAA,GLAA,AKAA,GLAA,AKAA,ELGA,AKAA,GLAA,AKAA,ILAA,AKAA,ELAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELEA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,OLAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELCA,AKAA,GLAA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,GLAA,AKAA,ELCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ILAA,AKAA,GLAA,AKAA,ELGA,AKAA,ILCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELCA,AKAA,KLAA,AKAA,ULIA,AKAA,GLAA,AKAA,ILAA,AKAA,ELAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,ILCA,AKAA,KLAA,AKAA,MLAA,AKAA,ELAA,AKAA,GLAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLGA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELGA,AKAA,KLAA,AKAA,QLAA,AKAA,ELGA,AKAA,OLAA,AKAA,KLAA,AKAA,SLGA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,GLGA,AKAA,OLDA,AKAA,ELAA,AKAA,ILAA,AKAA,KLAA,AKAA,ULCA,AKAA,KLAA,AKAA,OLAA,AKAA,ILMA,AKAA,ELAA,AKAA,ULAA,AKAA,OLAA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLEA,AKAA,ILAA,AKAA,ELDA,AKAA,ELAA,AKAA,iBLAA,AKAA,GLAA,AKAA,GLAA,AKAA,GLGA,AKAA,ELDA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLEA,AKAA,ELGA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,ELAA,AKAA,GLAA,AKAA,GLAA,AKAA,KLAA,AKAA,QLCA,AKAA,ELAA,AKAA,SLAA,AKAA,WLAA,AKAA,GLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELMA,AKAA,GLJA,AKAA,GLAA,AKAA,ELCA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLGA,AKAA,ELAA,AKAA,CLCA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILCA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLEA,AKAA,ELAA,AKAA,OLAA,AKAA,ELGA,AKAA,GLAA,AKAA,ILAA,AKAA,QLEA,AKAA,GLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELEA,AKAA,ILDA,AKAA,KLAA,AKAA,QLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,OLAA,AKAA,ILCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,KLAA,AKAA,MLAA,AKAA,ELAA,AKAA,QLGA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELCA,AKAA,KLAA,AKAA,OLAA,AKAA,ELGA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,GLAA,AKAA,ILAA,AKAA,ILAA,AKAA,GLAA,AKAA,GLAA,AKAA,GLAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,GLAA,AKAA,GLAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELaA,AKAA,OLTA,AKAA,GLAA,AKAA,ILAA,AKAA,ILCA,AKAA,ELAA,AKAA,MLAA,AKAA,ELAA,AKAA,ULAA,AKAA,GLGA,AKAA,ILAA,AKAA,KLAA,AKAA,SLCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELCA,AKAA,KLAA,AKAA,OLAA,AKAA,GLGA,AKAA,KLAA,AKAA,SLGA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLGA,AKAA,OLDA,AKAA,ELAA,AKAA,ILAA,AKAA,KLAA,AKAA,ULCA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILIA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,QLAA,AKAA,MLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,QLAA,AKAA,OLAA,AKAA,ILIA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,QLAA,AKAA,MLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,QLAA,AKAA,OLAA,AKAA,ILIA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,GLCA,AKAA,ELAA,AKAA,iBLAA,AKAA,GLAA,AKAA,GLAA,AKAA,GLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,GLAA,AKAA,ELAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLAA,AKAA,ELGA,AKAA,QLAA,AKAA,KLAA,AKAA,QLAA,AKAA,OLGA,AKAA,KLAA,AKAA,MLAA,AKAA,GLEA,AKAA,ILIA,AKAA,ELAA,AKAA,ULAA,AKAA,OLAA,AKAA,SLAA,AKAA,GLCA,AKAA,ELAA,AKAA,iBLAA,AKAA,GLAA,AKAA,GLAA,AKAA,GLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,GLAA,AKAA,ELAA,AKAA,GLAA,AKAA,GLIA,AKAA,GLFA,AKAA,ELAA,AKAA,ILAA,AKAA,KLAA,AKAA,SLAA,AKAA,2CLEA,AKAA,KLAA,AKAA,QLAA,AKAA,ELCA,AKAA,OLAA,AKAA,KLQA,AKAA,GLLA,AKAA,ILAA,AKAA,GLCA,AKAA,ILEA,AKAA,KLAA,AKAA,OLAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,QLEA,AKAA,ILAA,AKAA,ELAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,SLAA,AKAA,WLAA,AKAA,GLAA,AKAA,ELCA,AKAA,KLAA,AKAA,MLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ILAA,AKAA,ELGA,AKAA,OLAA,AKAA,KLAA,AKAA,SLIA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,QLAA,AKAA,OLAA,AKAA,ILIA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,GLGA,AKAA,OLFA,AKAA,ELAA,AKAA,iBLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ULCA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,OLAA,AKAA,GLGA,AKAA,ILAA,AKAA,KLAA,AKAA,SLCA,AKAA,ILAA,AKAA,KLAA,AKAA,SLAA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,GLCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,GLAA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,ILCA,AKAA,KLAA,AKAA,SLAA,AKAA,ELCA,AKAA,OLGA,AKAA,KLAA,AKAA,SLAA,AKAA,ELCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLCA,AKAA,KLAA,AKAA,SLAA,AKAA,ELCA,AKAA,MLIA,AKAA,KLAA,AKAA,OLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,OLAA,AKAA,SLAA,AKAA,GLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,ELGA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,QLAA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,SLAA,AKAA,ILCA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,SLCA,AKAA,ILAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELCA,AKAA,KLAA,AKAA,MLAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELEA,AKAA,KLAA,AKAA,MLAA,AKAA,ELAA,AKAA,KLKA,AKAA,OLFA,AKAA,KLAA,AKAA,OLAA,AKAA,KLAA,AKAA,ILAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,GLEA,AKAA,MLIA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,GLGA,AKAA,GLFA,AKAA,ELAA,AKAA,iBLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ULCA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,KLAA,AKAA,OLAA,AKAA,GLEA,AKAA,GLAA,AKAA,ILAA,AKAA,KLAA,AKAA,SLIA,AKAA,OLHA,AKAA,KLAA,AKAA,SLAA,AKAA,ELCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLCA,AKAA,KLAA,AKAA,SLAA,AKAA,ELCA,AKAA,KLKA,AKAA,GLFA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,ELEA,AKAA,ILAA,AKAA,KLAA,AKAA,QLAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELCA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLCA,AKAA,KLAA,AKAA,SLAA,AKAA,OLGA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,QLAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELAA,AKAA,ILCA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,SLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELIA,AKAA,OLAA,AKAA,KLAA,AKAA,SLGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,QLAA,AKAA,MLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,QLAA,AKAA,MLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,WLGA,AKAA,OLFA,AKAA,KLAA,AKAA,SLAA,AKAA,ELEA,AKAA,MLGA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,WLCA,AKAA,OLAA,AKAA,KLAA,AKAA,QLAA,AKAA,QLGA,AKAA,ELAA,AKAA,ULAA,AKAA,aLAA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,ILCA,AKAA,ELIA,AKAA,ELLA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ELGA,AKAA,KLAA,AKAA,QLAA,AKAA,GLGA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ILAA,AKAA,CLCA,AKAA,GLAA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELCA,AKAA,ILAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,ILAA,AKAA,ELEA,AKAA,ILDA,AKAA,GLAA,AKAA,SLAA,AKAA,ILCA,AKAA,KLAA,AKAA,ELAA,AKAA,SLAA,AKAA,GLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ELAA,AKAA,GLAA,AKAA,SLAA,AKAA,ELEA,AKAA,KLAA,AKAA,ELAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,ILEA,AKAA,GLDA,AKAA,GLAA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,ELAA,AKAA,ILAA,AKAA,ILCA,AKAA,GLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ELAA,AKAA,GLAA,AKAA,SLAA,AKAA,ELGA,AKAA,GLAA,AKAA,ILAA,AKAA,ELAA,AKAA,OLAA,AKAA,KLAA,AKAA,QLKA,AKAA,ILFA,AKAA,GLAA,AKAA,ILAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,OLAA,AKAA,ILEA,AKAA,GLDA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,ILCA,AKAA,GLCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,SLAA,AKAA,ELIA,AKAA,OLFA,AKAA,KLAA,AKAA,SLAA,AKAA,ELEA,AKAA,KLAA,AKAA,SLGA,AKAA,ELAA,AKAA,ULAA,AKAA,SLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLCA,AKAA,ILAA,AKAA,GLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,QLEA,AKAA,ELAA,AKAA,KLAA,AKAA,QLCA,AKAA,ELAA,AKAA,ELGA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLGA,AKAA,KLDA,AKAA,ELAA,AKAA,GLDA,AKAA,KLAA,AKAA,WLAA,AKAA,MLGA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLCA,AKAA,ELAA,AKAA,OLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,ELAA,AKAA,OLAA,AKAA,ILIA,AKAA,ILCA,AKAA,ELDA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLGA,AKAA,GLAA,AKAA,QLAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,OLCA,AKAA,OLAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,MLAA,AKAA,ILAA,AKAA,MLAA,AKAA,ELAA,AKAA,QLCA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ILCA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELIA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,QLAA,AKAA,aLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,ILAA,AKAA,ELAA,AKAA,WLCA,AKAA,ELAA,AKAA,ELCA,AKAA,ILCA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,ILIA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ULAA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,ELAA,AKAA,OLAA,AKAA,KLCA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,ELAA,AKAA,OLAA,AKAA,ELAA,AKAA,ILOA,AKAA,ILHA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ULEA,AKAA,ELAA,AKAA,aLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ULCA,AKAA,ILCA,AKAA,ELAA,AKAA,SLAA,AKAA,ELCA,AKAA,ELAA,AKAA,aLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,WLCA,AKAA,ELAA,AKAA,ULAA,AKAA,GLGA,AKAA,ILCA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,GLaA,AKAA,OLVA,AKAA,GLCA,AKAA,ELAA,AKAA,QLEA,AKAA,ELAA,AKAA,QLGA,AKAA,QLAA,AKAA,GLAA,AKAA,ILAA,AKAA,GLCA,AKAA,ELAA,AKAA,OLAA,AKAA,GLGA,AKAA,CLCA,AKAA,ILAA,AKAA,GLAA,AKAA,KLCA,AKAA,ILAA,AKAA,ILQA,AKAA,ELAA,AKAA,ULAA,AKAA,OLAA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLGA,AKAA,OLFA,AKAA,GLAA,AKAA,ELAA,AKAA,ULEA,AKAA,KLAA,AKAA,SLCA,AKAA,CLCA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLCA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ILKA,AKAA,ILAA,AKAA,KLAA,AKAA,ULAA,AKAA,ILAA,AKAA,ELAA,AKAA,ULCA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,OLAA,AKAA,ELAA,AKAA,GLEA,AKAA,QLAA,AKAA,ILCA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,OLGA,AKAA,QLAA,AKAA,ILCA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,MLCA,AKAA,GLAA,AKAA,ILAA,AKAA,ELAA,AKAA,ULCA,AKAA,ELAA,AKAA,KLAA,AKAA,ILIA,AKAA,CLCA,AKAA,ILAA,AKAA,ELCA,AKAA,ILAA,AKAA,ILIA,AKAA,ILAA,AKAA,KLAA,AKAA,ULAA,AKAA,ILAA,AKAA,ELAA,AKAA,ULCA,AKAA,ELAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLEA,AKAA,QLAA,AKAA,ILCA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,OLGA,AKAA,CLCA,AKAA,ILAA,AKAA,ELCA,AKAA,ILAA,AKAA,ELAA,AKAA,MLIA,AKAA,ILAA,AKAA,KLAA,AKAA,SLAA,AKAA,ELAA,AKAA,WLCA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,OLAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLEA,AKAA,QLAA,AKAA,ILCA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,MLCA,AKAA,GLAA,AKAA,ILAA,AKAA,ELAA,AKAA,ULCA,AKAA,ELAA,AKAA,KLAA,AKAA,ILIA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ILCA,AKAA,ILAA,AKAA,ILOA,AKAA,ELAA,AKAA,OLAA,AKAA,KLAA,AKAA,QLAA,AKAA,KLAA,AKAA,ILAA,AKAA,GLAA,AKAA,ELCA,AKAA,CLCA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLCA,AKAA,ILAA,AKAA,MLKA,AKAA,ILAA,AKAA,ELAA,AKAA,OLCA,AKAA,QLAA,AKAA,ELCA,AKAA,CLCA,AKAA,ILAA,AKAA,KLAA,AKAA,KLAA,AKAA,ELAA,AKAA,MLAA,AKAA,ILCA,AKAA,ILAA,AKAA,MLIA,AKAA,QLAA,AKAA,ELCA,AKAA,CLCA,AKAA,ILAA,AKAA,KLCA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,ELAA,AKAA,MLAA,AKAA,MLIA,AKAA,CLCA,AKAA,ILAA,AKAA,KLAA,AKAA,KLAA,AKAA,ELAA,AKAA,MLAA,AKAA,ILCA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,ELAA,AKAA,MLAA,AKAA,MLIA,AKAA,KLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLlFA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLsFA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLAA,AKAA,KLIA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLAA,AKAA,KLGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLAA,AKAA,KLIA,AKAA,ELAA,AKAA,ULAA,AKAA,SLAA,AKAA,SLAA,AKAA,GLCA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,OLAA,AKAA,GLGA,AKAA,GLAA,AKAA,ELAA,AKAA,ILAA,AKAA,SLAA,AKAA,OLAA,AKAA,ELAA,AKAA,ILEA,AKAA,ILAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,ILAA,AKAA,SLAA,AKAA,ELAA,AKAA,ILAA,AKAA,KLAA,AKAA,GLAA,AKAA,ELAA,AKAA,ILEA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLGA,AKAA,OLAA,AKAA,ELAA,AKAA,GLAA,AKAA,ILAA,AKAA,GLAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILGA,AKAA,ILAA,AKAA,ELAA,AKAA,ILAA,AKAA,SLAA,AKAA,ELAA,AKAA,ILAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELAA,AKAA,ILAA,AKAA,MLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLAA,AKAA,ULIA,AKAA,ILHA,AKAA,ILAA,AKAA,GLAA,AKAA,GLAA,AKAA,ILAA,AKAA,ELEA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,ILCA,AKAA,GLAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,KLAA,AKAA,ELGA,AKAA,OLAA,AKAA,GLIA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLAA,AKAA,ULGA,AKAA,ILDA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,GLAA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,SLAA,AKAA,ELCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELGA,AKAA,OLAA,AKAA,KLAA,AKAA,SLGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,QLAA,AKAA,MLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,ULCA,AKAA,GLAA,AKAA,ELAA,AKAA,ULEA,AKAA,ILAA,AKAA,ELAA,AKAA,KLCA,AKAA,ELAA,AKAA,ELAA,AKAA,QLGA,AKAA,ELDA,AKAA,ILAA,AKAA,ELAA,AKAA,SLCA,AKAA,ELAA,AKAA,KLAA,AKAA,GLEA,AKAA,ELAA,AKAA,QLaA,AKAA,ILTA,AKAA,ILAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLGA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLEA,AKAA,ELAA,AKAA,ELEA,AKAA,ELAA,AKAA,ULAA,AKAA,ELAA,AKAA,ULCA,AKAA,ELAA,AKAA,OLAA,AKAA,GLCA,AKAA,ELAA,AKAA,OLAA,AKAA,KLCA,AKAA,ELMA,AKAA,ILHA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,QLCA,AKAA,ELAA,AKAA,ELAA,AKAA,SLEA,AKAA,ELAA,AKAA,ULAA,AKAA,CLCA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLCA,AKAA,GLAA,AKAA,ELAA,AKAA,ELEA,AKAA,ILDA,AKAA,ELAA,AKAA,OLAA,AKAA,GLCA,AKAA,KLAA,AKAA,ILCA,AKAA,ELAA,AKAA,SLAA,AKAA,ELAA,AKAA,WLCA,AKAA,ELAA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,ILGA,AKAA,ELAA,AKAA,OLAA,AKAA,GLCA,AKAA,ELAA,AKAA,OLAA,AKAA,GLIA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLCA,AKAA,GLAA,AKAA,ELAA,AKAA,ELEA,AKAA,ILDA,AKAA,ELAA,AKAA,OLAA,AKAA,GLCA,AKAA,KLAA,AKAA,ILCA,AKAA,ELAA,AKAA,SLAA,AKAA,ELAA,AKAA,WLCA,AKAA,ELAA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,ILGA,AKAA,ELAA,AKAA,OLAA,AKAA,GLCA,AKAA,ELAA,AKAA,OLAA,AKAA,GLIA,AKAA,ELAA,AKAA,ILAA,AKAA,ILAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,KLEA,AKAA,ELAA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,ILIA,AKAA,MLAA,AKAA,CLCA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELCA,AKAA,ILAA,AKAA,ELAA,AKAA,OLAA,AKAA,KLOA,AKAA,ELAA,AKAA,ULAA,AKAA,OLAA,AKAA,SLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,ULCA,AKAA,GLAA,AKAA,ELAA,AKAA,ULEA,AKAA,ILAA,AKAA,ELAA,AKAA,KLCA,AKAA,ELAA,AKAA,ELAA,AKAA,QLGA,AKAA,ELDA,AKAA,ILAA,AKAA,ELAA,AKAA,SLCA,AKAA,ELAA,AKAA,KLAA,AKAA,GLEA,AKAA,ELAA,AKAA,QLQA,AKAA,ILLA,AKAA,ILuCA,AKAA,ELvCA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLEA,AKAA,ELAA,AKAA,ELAA,AKAA,QLEA,AKAA,ELAA,AKAA,KLAA,AKAA,GLAA,AKAA,GLAA,AKAA,ELAA,AKAA,KLAA,AKAA,GLAA,AKAA,GLAA,AKAA,CLCA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLCA,AKAA,GLAA,AKAA,ELAA,AKAA,ELEA,AKAA,ILDA,AKAA,ELAA,AKAA,OLAA,AKAA,GLCA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,SLCA,AKAA,ELAA,AKAA,KLAA,AKAA,GLGA,AKAA,ELAA,AKAA,OLAA,AKAA,GLIA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLCA,AKAA,GLAA,AKAA,ELAA,AKAA,ELEA,AKAA,ILDA,AKAA,ELAA,AKAA,OLAA,AKAA,GLCA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,SLCA,AKAA,ELAA,AKAA,KLAA,AKAA,GLGA,AKAA,ELAA,AKAA,OLAA,AKAA,GLIA,AKAA,ELAA,AKAA,ILAA,AKAA,ILAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,KLEA,AKAA,ELAA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,ILeA,AKAA,OLTA,AKAA,ELDA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,GLCA,AKAA,ELEA,AKAA,GLGA,AKAA,KLAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,GLGA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,GLCA,AKAA,GLAA,AKAA,KLAA,AKAA,SLAA,AKAA,OLAA,AKAA,ELAA,AKAA,MLCA,AKAA,GLAA,AKAA,ELAA,AKAA,SLAA,AKAA,OLAA,AKAA,KLAA,AKAA,MLEA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,QLCA,AKAA,ELAA,AKAA,ELAA,AKAA,QLCA,AKAA,ELAA,AKAA,SLAA,AKAA,ELCA,AKAA,ELAA,AKAA,SLAA,AKAA,ELGA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ULAA,AKAA,ELAA,AKAA,SLAA,AKAA,ILCA,AKAA,ELAA,AKAA,OLAA,AKAA,GLCA,AKAA,ELAA,AKAA,OLAA,AKAA,GLGA,AKAA,OLAA,AKAA,CLCA,AKAA,KLAA,AKAA,ELAA,AKAA,ULCA,AKAA,ELAA,AKAA,OLAA,AKAA,GLEA,AKAA,KLAA,AKAA,ELAA,AKAA,ULCA,AKAA,ELAA,AKAA,OLAA,AKAA,GLGA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLCA,AKAA,GLAA,AKAA,ELAA,AKAA,ELAA,AKAA,CLEA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,OLCA,AKAA,GLAA,AKAA,ILAA,AKAA,GLAA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,GLCA,AKAA,MLGA,AKAA,ELAA,AKAA,KLAA,AKAA,GLGA,AKAA,OLAA,AKAA,ELAA,AKAA,OLAA,AKAA,ILIA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,KLAA,AKAA,GLAA,AKAA,ELAA,AKAA,KLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,OLAA,AKAA,WLCA,AKAA,OLAA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,KLGA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,WLCA,AKAA,OLAA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,KLIA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,GLIA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,GLCA,AKAA,ELAA,AKAA,iBLAA,AKAA,GLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,GLAA,AKAA,ELAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLAA,AKAA,ELGA,AKAA,GLAA,AKAA,KLAA,AKAA,QLAA,AKAA,ELGA,AKAA,OLFA,AKAA,KLAA,AKAA,QLAA,AKAA,ELAA,AKAA,GLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,ELCA,AKAA,KLKA,AKAA,ILDA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLAA,AKAA,ELAA,AKAA,KLAA,AKAA,OLAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLEA,AKAA,GLDA,AKAA,GLAA,AKAA,KLCA,AKAA,GLCA,AKAA,GLAA,AKAA,SLCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELMA,AKAA,OLJA,AKAA,ILAA,AKAA,ILCA,AKAA,KLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELCA,AKAA,KLAA,AKAA,ULEA,AKAA,MLGA,AKAA,ELAA,AKAA,ULAA,AKAA,OLAA,AKAA,WLCA,AKAA,OLAA,AKAA,ILAA,AKAA,KLAA,AKAA,QLAA,AKAA,ILAA,AKAA,KLAA,AKAA,MLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,ILOA,AKAA,ELPA,AKAA,ELAA,AKAA,ELAA,AKAA,ELEA,AKAA,GLAA,AKAA,ILAA,AKAA,KLAA,AKAA,WLAA,AKAA,ELAA,AKAA,OLAA,AKAA,ELCA,AKAA,GLAA,AKAA,ILAA,AKAA,KLAA,AKAA,ULAA,AKAA,ELAA,AKAA,OLAA,AKAA,ELKA,AKAA,GLHA,AKAA,KLAA,AKAA,QLGA,AKAA,KLAA,AKAA,OLAA,AKAA,ELCA,AKAA,ELAA,AKAA,MLCA,AKAA,CLCA,AKAA,ILCA,AKAA,GLAA,AKAA,GLGA,AKAA,ELAA,AKAA,GLAA,AKAA,SLAA,AKAA,qBLEA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELEA,AKAA,OLAA,AKAA,ILAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLAA,AKAA,ELCA,AKAA,GLOA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,GLCA,AKAA,GLAA,AKAA,ILAA,AKAA,KLAA,AKAA,ULAA,AKAA,ILAA,AKAA,ELAA,AKAA,SLAA,AKAA,OLAA,AKAA,ELCA,AKAA,GLAA,AKAA,ILAA,AKAA,KLAA,AKAA,ULAA,AKAA,ILAA,AKAA,ELAA,AKAA,SLAA,AKAA,OLAA,AKAA,ELEA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,GLCA,AKAA,OLAA,AKAA,ILAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLAA,AKAA,ELCA,AKAA,GLIA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLEA,AKAA,GLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLAA,AKAA,OLAA,AKAA,ELCA,AKAA,GLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,OLAA,AKAA,OLAA,AKAA,ELGA,AKAA,ILDA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,KLAA,AKAA,OLAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLEA,AKAA,GLAA,AKAA,ILAA,AKAA,ELAA,AKAA,CLCA,AKAA,ELAA,AKAA,ELCA,AKAA,GLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ILCA,AKAA,ELAA,AKAA,GLEA,AKAA,OLEA,AKAA,OLAA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,ILAA,AKAA,KLAA,AKAA,KLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,GLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,ILAA,AKAA,KLAA,AKAA,ILAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,KLAA,AKAA,ILAA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,ILAA,AKAA,ILAA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,ILAA,AKAA,KLAA,AKAA,KLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,GLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,ILAA,AKAA,KLAA,AKAA,ILAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,KLAA,AKAA,ILAA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,ILAA,AKAA,ILAA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,ILAA,AKAA,KLAA,AKAA,KLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,GLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,ILAA,AKAA,KLAA,AKAA,ILAA,AKAA,ILOA,AKAA,ELAA,AKAA,ILAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,ILAA,AKAA,ELAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,GLGA,AKAA,OLFA,AKAA,GLAA,AKAA,KLAA,AKAA,ILAA,AKAA,yCLCA,AKAA,ELAA,AKAA,ILAA,AKAA,KLAA,AKAA,SLAA,AKAA,iCLCA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,ULAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,QLAA,AKAA,WLEA,AKAA,OLDA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,wDLCA,AKAA,KLAA,AKAA,ILAA,AKAA,YLAA,AKAA,OLGA,AKAA,ELAA,AKAA,ULAA,AKAA,ULAA,AKAA,SLAA,AKAA,GLEA,AKAA,OLDA,AKAA,KLAA,AKAA,ILAA,AKAA,ELCA,AKAA,MLGA,AKAA,ELAA,AKAA,ULAA,AKAA,SLAA,AKAA,SLAA,AKAA,GLEA,AKAA,OLDA,AKAA,GLAA,AKAA,KLAA,AKAA,ILAA,AKAA,yCLCA,AKAA,KLAA,AKAA,ULAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,OLAA,AKAA,SLAA,AKAA,GLEA,AKAA,OLDA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,sCLCA,AKAA,KLAA,AKAA,ILAA,AKAA,ILAA,AKAA,KLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,QLAA,AKAA,SLAA,AKAA,GLEA,AKAA,OLDA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,uCLCA,AKAA,KLAA,AKAA,ILAA,AKAA,KLAA,AKAA,KLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,OLAA,AKAA,SLAA,AKAA,GLEA,AKAA,OLDA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,sCLCA,AKAA,KLAA,AKAA,ILAA,AKAA,ILAA,AKAA,KLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,QLAA,AKAA,SLAA,AKAA,GLEA,AKAA,OLDA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,uCLCA,AKAA,KLAA,AKAA,ILAA,AKAA,KLAA,AKAA,KLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,OLAA,AKAA,SLAA,AKAA,GLEA,AKAA,OLDA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,sCLCA,AKAA,KLAA,AKAA,ILAA,AKAA,ILAA,AKAA,KLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,OLAA,AKAA,SLAA,AKAA,GLGA,AKAA,OLFA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,sCLCA,AKAA,KLAA,AKAA,ILAA,AKAA,SLAA,AKAA,KLAA,AKAA,GLCA,AKAA,KLAA,AKAA,ILAA,AKAA,ILAA,AKAA,KLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,QLAA,AKAA,SLAA,AKAA,GLGA,AKAA,OLFA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,sCLCA,AKAA,KLAA,AKAA,ILAA,AKAA,SLAA,AKAA,KLAA,AKAA,GLCA,AKAA,KLAA,AKAA,ILAA,AKAA,KLAA,AKAA,KLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,OLAA,AKAA,WLGA,AKAA,OLFA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,sCLCA,AKAA,KLAA,AKAA,ILAA,AKAA,SLAA,AKAA,MLCA,AKAA,KLAA,AKAA,ILAA,AKAA,ILAA,AKAA,OLGA,AKAA,ELAA,AKAA,ULAA,AKAA,QLAA,AKAA,WLGA,AKAA,OLFA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,uCLCA,AKAA,KLAA,AKAA,ILAA,AKAA,SLAA,AKAA,MLCA,AKAA,KLAA,AKAA,ILAA,AKAA,KLAA,AKAA,OLIA,AKAA,ELAA,AKAA,ULAA,AKAA,QLAA,AKAA,WLGA,AKAA,OLFA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,uCLCA,AKAA,KLAA,AKAA,ILAA,AKAA,SLAA,AKAA,MLCA,AKAA,KLAA,AKAA,ILAA,AKAA,KLAA,AKAA,OLGA,AKAA,ELAA,AKAA,ULAA,AKAA,QLAA,AKAA,WLGA,AKAA,OLFA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,uCLCA,AKAA,KLAA,AKAA,ILAA,AKAA,SLAA,AKAA,MLCA,AKAA,KLAA,AKAA,ILAA,AKAA,KLAA,AKAA,OLIA,AKAA,ELAA,AKAA,ULAA,AKAA,OLAA,AKAA,WLGA,AKAA,OLFA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,sCLCA,AKAA,KLAA,AKAA,ILAA,AKAA,SLAA,AKAA,MLCA,AKAA,KLAA,AKAA,ILAA,AKAA,ILAA,AKAA,OLGA,AKAA,ELAA,AKAA,ULAA,AKAA,OLAA,AKAA,SLAA,AKAA,GLGA,AKAA,OLFA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,ELAA,AKAA,ILAA,AKAA,qBLCA,AKAA,KLAA,AKAA,ILAA,AKAA,SLAA,AKAA,MLCA,AKAA,KLAA,AKAA,ILAA,AKAA,ILAA,AKAA,KLAA,AKAA,ILIA,AKAA,ILAA,AKAA,ELAA,AKAA,CLCA,AKAA,KLAA,AKAA,KLCA,AKAA,KLAA,AKAA,KLCA,AKAA,KLAA,AKAA,KLCA,AKAA,OLAA,AKAA,MLIA,AKAA,SLAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLEA,AKAA,KLAA,AKAA,KLAA,AKAA,ELCA,AKAA,KLAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILCA,AKAA,KLAA,AKAA,ELAA,AKAA,KLAA,AKAA,ELAA,AKAA,YLCA,AKAA,KLAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLAA,AKAA,OLAA,AKAA,KLAA,AKAA,GLAA,AKAA,KLAA,AKAA,KLAA,AKAA,GLEA,AKAA,KLAA,AKAA,ILAA,AKAA,KLAA,AKAA,OL2CA,AKAA,SLAA,AKAA,ILCA,AKAA,ELAA,AKAA,KLCA,AKAA,KLCA,AKAA,OLCA,AKAA,2EL+DA,AKAA,SLAA,AKAA,ILCA,AKAA,ELAA,AKAA,KLCA,AKAA,KLCA,AKAA,OLCA,AKAA,kELIA,AKAA,SLAA,AKAA,ILCA,AKAA,ELAA,AKAA,KLCA,AKAA,KLCA,AKAA,OLCA,AKAA,yDLIA,AKAA,SLAA,AKAA,ILEA,AKAA,ELAA,AKAA,KLCA,AKAA,KLCA,AKAA,QLCA,AKAA,uEL8CA,AKAA,SLAA,AKAA,ELAA,AKAA,GLCA,AKAA,GLAA,AKAA,iBLAA,AKAA,ELAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLCA,AKAA,KLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELCA,AKAA,KLAA,AKAA,MLAA,AKAA,OLEA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLAA,AKAA,kCLCA,AKAA,KLAA,AKAA,ELAA,AKAA,ELCA,AKAA,KLAA,AKAA,MLAA,AKAA,KLkOA,AKAA,SLAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,GLEA,AKAA,KLAA,AKAA,MLAA,AKAA,KLAA,AKAA,ELAA,AKAA,YLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ILAA,AKAA,ILCA,AKAA,KLAA,AKAA,OLAA,AKAA,GLAA,AKAA,KLAA,AKAA,MLAA,AKAA,ILGA,AKAA,KLAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLAA,AKAA,OLAA,AKAA,KLAA,AKAA,OLCA,AKAA,KLAA,AKAA,GLAA,AKAA,KLAA,AKAA,KLAA,AKAA,KLAA,AKAA,ELAA,AKAA,OLCA,AKAA,KLAA,AKAA,KLAA,AKAA,KLAA,AKAA,ELAA,AKAA,OLAA,AKAA,KLAA,AKAA,GLEA,AKAA,KLAA,AKAA,KLAA,AKAA,KLAA,AKAA,KLAA,AKAA,ILAA,AKAA,KLAA,AKAA,GLAA,AKAA,MLAA,AKAA,GLAA,AKAA,ILAA,AKAA,KLAA,AKAA,GLCA,AKAA,KLAA,AKAA,KLAA,AKAA,KLAA,AKAA,KLAA,AKAA,KLAA,AKAA,KLAA,AKAA,GLCA,AKAA,KLAA,AKAA,KLAA,AKAA,KLAA,AKAA,ELAA,AKAA,ILAA,AKAA,KLAA,AKAA,MLtaA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,WLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,MLEA,AKAA,OLDA,AKAA,ELAA,AKAA,MLAA,AKAA,ILAA,AKAA,MLAA,AKAA,KLAA,AKAA,KLAA,AKAA,KLAA,AKAA,ELAA,AKAA,KLCA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,QLAA,AKAA,SLAA,AKAA,GLGA,AKAA,ILCA,AKAA,ELDA,AKAA,ELAA,AKAA,ELGA,AKAA,GLCA,AKAA,KLAA,AKAA,MLAA,AKAA,ELAA,AKAA,KLAA,AKAA,KLGA,AKAA,GLDA,AKAA,GLDA,AKAA,ELAA,AKAA,KLAA,AKAA,MLAA,AKAA,ILCA,AKAA,KLAA,AKAA,KLAA,AKAA,MLCA,AKAA,kBLCA,AKAA,ELAA,AKAA,KLAA,AKAA,GLEA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,GLUA,AKAA,OLTA,AKAA,ILAA,AKAA,GLCA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELCA,AKAA,ELAA,AKAA,OLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,GLEA,AKAA,ELAA,AKAA,QLGA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,OLAA,AKAA,KLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,ILSA,AKAA,ELAA,AKAA,ELAA,AKAA,GLEA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLKA,AKAA,ILHA,AKAA,ILEA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILCA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLIA,AKAA,GLFA,AKAA,ELAA,AKAA,OLAA,AKAA,ELEA,AKAA,ELAA,AKAA,QLAA,AKAA,ELGA,AKAA,OLFA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,OLCA,AKAA,ELAA,AKAA,OLAA,AKAA,GLKA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLGA,AKAA,ILFA,AKAA,ELAA,AKAA,MLAA,AKAA,ELAA,AKAA,ULhBA,AKAA,QLgBA,AKAA,ELEA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLCA,AKAA,ELAA,AKAA,MLAA,AKAA,ELAA,AKAA,KLpBA,AKAA,QLoBA,AKAA,ILAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELEA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,MLAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELCA,AKAA,ILAA,AKAA,GLAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLCA,AKAA,ELAA,AKAA,QLAA,AKAA,GLEA,AKAA,ELAA,AKAA,QLAA,AKAA,GLIA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,GLEA,AKAA,ELAA,AKAA,MLAA,AKAA,ELAA,AKAA,QLAA,AKAA,ELCA,AKAA,ELAA,AKAA,MLAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLAA,AKAA,ELCA,AKAA,ELAA,AKAA,QLAA,AKAA,ELIA,AKAA,ILDA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLCA,AKAA,GLAA,AKAA,ILAA,AKAA,ELCA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,SLAA,AKAA,ELCA,AKAA,ELAA,AKAA,GLAA,AKAA,GLAA,AKAA,ELAA,AKAA,SLAA,AKAA,GLUA,AKAA,OLNA,AKAA,ILAA,AKAA,ELAA,AKAA,MLAA,AKAA,ELAA,AKAA,OLAA,AKAA,KLCA,AKAA,ELAA,AKAA,SLCA,AKAA,ILAA,AKAA,ELAA,AKAA,MLAA,AKAA,ELAA,AKAA,OLAA,AKAA,ILCA,AKAA,ELAA,AKAA,ULGA,AKAA,GLSA,AKAA,ELAA,AKAA,ELAA,AKAA,GLQA,AKAA,ELAA,AKAA,ELAA,AKAA,GLSA,AKAA,ELAA,AKAA,ELAA,AKAA,GLEA,AKAA,ELAA,AKAA,ULAA,AKAA,MLAA,AKAA,SLAA,AKAA,GLGA,AKAA,ILDA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,ILAA,AKAA,ELCA,AKAA,ELAA,AKAA,SLAA,AKAA,ELCA,AKAA,KLAA,AKAA,GLEA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELKA,AKAA,OLHA,AKAA,ILAA,AKAA,ILCA,AKAA,ELAA,AKAA,MLAA,AKAA,ELAA,AKAA,ULAA,AKAA,GLEA,AKAA,GLIA,AKAA,ELAA,AKAA,OLAA,AKAA,SLAA,AKAA,GLEA,AKAA,GLAA,AKAA,ELAA,AKAA,GLAA,AKAA,OLAA,AKAA,ELAA,AKAA,GLEA,AKAA,ILAA,AKAA,ELCA,AKAA,GLAA,AKAA,SLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ILAA,AKAA,OLCA,AKAA,GLAA,AKAA,SLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ILAA,AKAA,OLCA,AKAA,GLAA,AKAA,SLAA,AKAA,ELCA,AKAA,ELAA,AKAA,ILAA,AKAA,MLCA,AKAA,CLAA,AKAA,GLAA,AKAA,WLAA,AKAA,ELGA,AKAA,MLAA,AKAA,ILAA,AKAA,MLAA,AKAA,iBLAA,AKAA,GLFA,AKAA,ELAA,AKAA,ILAA,AKAA,ELMA,AKAA,OLFA,AKAA,ELAA,AKAA,GLAA,AKAA,ELEA,AKAA,GLkBA,AKAA,ELAA,AKAA,ULAA,AKAA,SLAA,AKAA,SLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,SLAA,AKAA,iCLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,oCLGA,AKAA,ELAA,AKAA,ULAA,AKAA,SLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,SLAA,AKAA,ELAA,AKAA,ULAA,AKAA,iCLCA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,ELAA,AKAA,MLAA,AKAA,ELAA,AKAA,ILCA,AKAA,oCLGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,MLAA,AKAA,KLAA,AKAA,MLAA,AKAA,QLAA,AKAA,GLAA,AKAA,ULAA,AKAA,MLCA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,GLAA,AKAA,ULAA,AKAA,OLGA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,ELAA,AKAA,SLCA,AKAA,ELAA,AKAA,QLGA,AKAA,KLAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLAA,AKAA,ULAA,AKAA,OLGA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLCA,AKAA,KLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLEA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLIA,AKAA,OLHA,AKAA,ELAA,AKAA,ILAA,AKAA,KLAA,AKAA,ILAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,GLEA,AKAA,ELAA,AKAA,ULAA,AKAA,OLGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLCA,AKAA,KLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLEA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,GLIA,AKAA,OLHA,AKAA,ELAA,AKAA,ILAA,AKAA,KLAA,AKAA,ILAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,GLEA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLCA,AKAA,KLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLEA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLIA,AKAA,OLHA,AKAA,ELAA,AKAA,KLAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,GLEA,AKAA,ELAA,AKAA,ULAA,AKAA,OLGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLCA,AKAA,KLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLEA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,GLIA,AKAA,OLHA,AKAA,ELAA,AKAA,KLAA,AKAA,GLAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,GLEA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLEA,AKAA,OLDA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,KLAA,AKAA,KLAA,AKAA,ELAA,AKAA,MLAA,AKAA,KLGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLEA,AKAA,OLDA,AKAA,KLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLCA,AKAA,KLAA,AKAA,KLAA,AKAA,ELAA,AKAA,KLAA,AKAA,KLGA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLEA,AKAA,OLDA,AKAA,KLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLCA,AKAA,KLAA,AKAA,KLAA,AKAA,ELAA,AKAA,ILAA,AKAA,KLGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,KLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ULGA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,GLAA,AKAA,ELAA,AKAA,SLAA,AKAA,OLAA,AKAA,ELAA,AKAA,QLEA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLIA,AKAA,GLHA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,GLGA,AKAA,ILAA,AKAA,ELAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,ELAA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ILAA,AKAA,OLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLQA,AKAA,ILFA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,ELAA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,ELAA,AKAA,MLAA,AKAA,ILCA,AKAA,ILCA,AKAA,ELAA,AKAA,OLAA,AKAA,GLEA,AKAA,GLAA,AKAA,ELAA,AKAA,ULEA,AKAA,ILAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLAA,AKAA,MLAA,AKAA,MLCA,AKAA,ELAA,AKAA,ELAA,AKAA,SLIA,AKAA,ELAA,AKAA,KLAA,AKAA,ELAA,AKAA,KLAA,AKAA,GLAA,AKAA,OLAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,ELAA,AKAA,YLGA,AKAA,ILFA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,MLAA,AKAA,MLEA,AKAA,ILAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLAA,AKAA,ILAA,AKAA,ILCA,AKAA,ELAA,AKAA,QLAA,AKAA,GLOA,AKAA,ILJA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,GLAA,AKAA,OLAA,AKAA,ILCA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELCA,AKAA,ILAA,AKAA,ELAA,AKAA,ILAA,AKAA,ILAA,AKAA,CLEA,AKAA,ILDA,AKAA,ILAA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLAA,AKAA,ILCA,AKAA,ELAA,AKAA,ELAA,AKAA,SLEA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLAA,AKAA,OLAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILEA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,SLCA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELGA,AKAA,OLAA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,KLAA,AKAA,GLCA,AKAA,OLAA,AKAA,ILAA,AKAA,ELAA,AKAA,ULCA,AKAA,ELAA,AKAA,SLAA,AKAA,ELCA,AKAA,KLAA,AKAA,KLAA,AKAA,GLAA,AKAA,ULEA,AKAA,KLAA,AKAA,KLAA,AKAA,ILIA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLCA,AKAA,GLAA,AKAA,ELAA,AKAA,SLAA,AKAA,OLAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLCA,AKAA,GLAA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,GLAA,AKAA,OLAA,AKAA,ELAA,AKAA,QLEA,AKAA,ILCA,AKAA,ELAA,AKAA,ILAA,AKAA,MLAA,AKAA,ILCA,AKAA,ELAA,AKAA,GLAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLAA,AKAA,MLAA,AKAA,MLCA,AKAA,ELAA,AKAA,GLAA,AKAA,ELCA,AKAA,ILAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ILCA,AKAA,ELAA,AKAA,GLAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,GLGA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,YLAA,AKAA,GLKA,AKAA,ILJA,AKAA,ILAA,AKAA,ILCA,AKAA,ELAA,AKAA,ILGA,AKAA,ELAA,AKAA,ELAA,AKAA,OLAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,ILAA,AKAA,CLEA,AKAA,ILDA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,ILAA,AKAA,CLCA,AKAA,ILAA,AKAA,ELAA,AKAA,GLAA,AKAA,ELAA,AKAA,ELCA,AKAA,ILAA,AKAA,ELAA,AKAA,KLCA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,ILGA,AKAA,ILAA,AKAA,GLAA,AKAA,ILAA,AKAA,GLKA,AKAA,ILAA,AKAA,ELCA,AKAA,GLAA,AKAA,GL9BA,AKAA,ML+BA,AKAA,GLCA,AKAA,ILAA,AKAA,GLAA,AKAA,ILAA,AKAA,KLEA,AKAA,ELAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILCA,AKAA,ELAA,AKAA,ELCA,AKAA,ELAA,AKAA,ILXA,AKAA,ELAA,AKAA,ELaA,AKAA,ELAA,AKAA,GLGA,AKAA,OLAA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,ULAA,AKAA,SLAA,AKAA,GLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,GLEA,AKAA,OLAA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,QLAA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,YLAA,AKAA,SLAA,AKAA,GLCA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,QLEA,AKAA,OLDA,AKAA,ELAA,AKAA,ILAA,AKAA,KLCA,AKAA,GLOA,AKAA,ELAA,AKAA,KLAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,ILAA,AKAA,ELAA,AKAA,ILmBA,AKAA,ELAA,AKAA,ELAA,AKAA,GLEA,AKAA,ELAA,AKAA,ULAA,AKAA,ULAA,AKAA,SLAA,AKAA,GLCA,AKAA,OLAA,AKAA,KLAA,AKAA,KLAA,AKAA,ELAA,AKAA,MLAA,AKAA,KLAA,AKAA,SLGA,AKAA,ELAA,AKAA,ULAA,AKAA,YLAA,AKAA,SLAA,AKAA,GLCA,AKAA,ILAA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,ELAA,AKAA,ILAA,AKAA,KLAA,AKAA,OLEA,AKAA,OLDA,AKAA,ELAA,AKAA,ILAA,AKAA,KLCA,AKAA,GLGA,AKAA,ELAA,AKAA,ULAA,AKAA,KLAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLCA,AKAA,GLAA,AKAA,ELAA,AKAA,ULAA,AKAA,ELAA,AKAA,SLGA,AKAA,OLFA,AKAA,ELAA,AKAA,MLAA,AKAA,GLAA,AKAA,ELCA,AKAA,ELAA,AKAA,OLAA,AKAA,ELCA,AKAA,ELGA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ILAA,AKAA,KLAA,AKAA,MLAA,AKAA,OLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ILAA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,GLAA,AKAA,OLAA,AKAA,KLAA,AKAA,OLCA,AKAA,ELAA,AKAA,ELQA,AKAA,OLNA,AKAA,ELAA,AKAA,ILAA,AKAA,KLAA,AKAA,ILAA,AKAA,ELCA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,KLAA,AKAA,GLAA,AKAA,ILCA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,KLAA,AKAA,ILGA,AKAA,ELAA,AKAA,ULAA,AKAA,OLGA,AKAA,ELAA,AKAA,ULAA,AKAA,ILAA,AKAA,SLAA,AKAA,ELAA,AKAA,GLCA,AKAA,GLAA,AKAA,ELAA,AKAA,ULAA,AKAA,ELAA,AKAA,SLAA,AKAA,OLAA,AKAA,ILAA,AKAA,ELAA,AKAA,GLAA,AKAA,ULAA,AKAA,MLEA,AKAA,ILAA,AKAA,ELAA,AKAA,ELAA,AKAA,ILAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,MLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ILAA,AKAA,KLAA,AKAA,MLAA,AKAA,OLAA,AKAA,KLAA,AKAA,OLAA,AKAA,ILAA,AKAA,KLAA,AKAA,GLCA,AKAA,ELAA,AKAA,ELAA,AKAA,KLAA,AKAA,GLAA,AKAA,OLAA,AKAA,KLAA,AKAA,OLCA,AKAA,ELAA,AKAA,ELOA,AKAA,OLNA,AKAA,ELAA,AKAA,I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A,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IACA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IACA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IACA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAIA,GAHA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAGA,GAAA,EAAA,IAAA,IACA,GAHA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAGA,GAAA,EAAA,IAAA,IACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,GAAA,GAAA,EAAA,IAAA,IACA,EAAA,GAAA,GAAA,EAAA,IAAA,IACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,GAAA,GAAA,EAAA,IAAA,IACA,EAAA,GAAA,GAAA,EAAA,IAAA,IACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,GAAA,GAAA,EAAA,IAAA,IACA,EAAA,GAAA,GAAA,EAAA,IAAA,IACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,GAAA,GAAA,EAAA,IAAA,IACA,EAAA,GAAA,GAAA,EAAA,IAAA,IACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EAEA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,IAAA,EAAA,EAAA,KAAA,GACA,EAAA,EAAA,IAAA,EAAA,EAAA,KAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,GAAA,EAAA,IAAA,GAAA,EAAA,KAAA,EACA,GAAA,EAAA,IAAA,GAAA,EAAA,KAAA,EACA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,EACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,EACA,EAAA,EAAA,IAAA,GAAA,EAAA,KAAA,EACA,EAAA,EAAA,IAAA,GAAA,EAAA,KAAA,EACA,GAAA,EAAA,KAAA,GAAA,EAAA,MAAA,EACA,GAAA,EAAA,KAAA,GAAA,EAAA,MAAA,EACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,EACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,EACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,EACA,GAAA,EAAA,KAAA,GAAA,EAAA,MAAA,EACA,EAAA,EAAA,IAAA,GAAA,EAAA,KAAA,EACA,EAAA,EAAA,IAAA,GAAA,EAAA,KAAA,EACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GAEA,EAAA,GAAA,GAAA,EAAA,EACA,EAAA,GAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,IAAA,GAAA,GACA,EAAA,IAAA,IAAA,GAAA,GACA,EAAA,GAAA,GAAA,EAAA,EACA,EAAA,GAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,IAAA,GAAA,GACA,EAAA,IAAA,IAAA,GAAA,GACA,EAAA,GAAA,GAAA,EAAA,EACA,EAAA,GAA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","file":"script.map","sourceRoot":"../src","sourcesContent":["function _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nmodule.exports = _interopRequireWildcard;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","\"use strict\";var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _v=_interopRequireDefault(require(\"uuid/v4\"));Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=exports.isValidResponse=exports.encodeResponse=exports.encodeRequest=void 0;const encodeRequest=(method,params=[])=>({jsonrpc:\"2.0\",id:(0,_v.default)(),method,params});exports.encodeRequest=encodeRequest;const encodeResponse=(id,result=null)=>{let response={jsonrpc:\"2.0\",id};return result instanceof Error?response.error=result.message||\"An error occurred\":response.result=result,response};exports.encodeResponse=encodeResponse;const isValidResponse=response=>!!response&&\"2.0\"===response.jsonrpc&&\"string\"==typeof response.id&&(void 0!==response.result||void 0!==response.error);exports.isValidResponse=isValidResponse;var _default={encodeRequest,encodeResponse,isValidResponse};exports.default=_default;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=void 0;/**\n * A provider passes messages between different contexts.\n *\n * @class Provider\n */class Provider{/**\n   * An observable of messages being sent to this provider.\n   *\n   * @memberof Provider\n   * @instance\n   */messages(){throw new Error(\"Not implemented\")}/**\n   * Send a message to a target.\n   *\n   * @param {Object} payload The payload to send\n   * @memberof Provider\n   * @instance\n   */send(){throw new Error(\"Not implemented\")}}exports.default=Provider;","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          // HACK(benlesh): To resolve an issue where Node users may have multiple\n          // copies of rxjs in their node_modules directory.\n          if (isTrustedSubscriber(destinationOrNext)) {\n            const trustedSubscriber = destinationOrNext[rxSubscriberSymbol]() as Subscriber<any>;\n            this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n            this.destination = trustedSubscriber;\n            trustedSubscriber.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated internal use only */ _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  /** @deprecated internal use only */ _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n\nfunction isTrustedSubscriber(obj: any) {\n  return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  /** @deprecated internal use only */ public source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create(callbackFunc: (callback: () => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<void>;\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, the\n   * last parameter must be a callback function that `func` calls when it is\n   * done.\n   *\n   * The output of `bindCallback` is a function that takes the same parameters\n   * as `func`, except the last one (the callback). When the output function\n   * is called with arguments it will return an Observable. If function `func`\n   * calls its callback with one argument the Observable will emit that value.\n   * If on the other hand the callback is called with multiple values the resulting\n   * Observable will emit an array with said values as arguments.\n   *\n   * It is very important to remember that input function `func` is not called\n   * when the output function is, but rather when the Observable returned by the output\n   * function is subscribed. This means if `func` makes an AJAX request, that request\n   * will be made every time someone subscribes to the resulting Observable, but not before.\n   *\n   * Optionally, a selector function can be passed to `bindObservable`. The selector function\n   * takes the same arguments as the callback and returns the value that will be emitted by the Observable.\n   * Even though by default multiple arguments passed to callback appear in the stream as an array\n   * the selector function will be called with arguments directly, just as the callback would.\n   * This means you can imagine the default selector (when one is not provided explicitly)\n   * as a function that aggregates all its arguments into an array, or simply returns first argument\n   * if there is only one.\n   *\n   * The last optional parameter - {@link Scheduler} - can be used to control when the call\n   * to `func` happens after someone subscribes to Observable, as well as when results\n   * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n   * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n   * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n   * and call `subscribe` on the output Observable all function calls that are currently executing\n   * will end before `func` is invoked.\n   *\n   * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n   * In particular, if the callback is called synchronously the subscription of the resulting Observable\n   * will call the `next` function synchronously as well.  If you want to defer that call,\n   * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n   * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n   *\n   * Note that the Observable created by the output function will always emit a single value\n   * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n   * calls will not appear in the stream. If you need to listen for multiple calls,\n   *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n   *\n   * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n   * will be the context that the output function has at call time. In particular, if `func`\n   * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n   * it is recommended that the context of the output function is set to that object as well.\n   *\n   * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n   * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n   * provides convenient error handling and probably is a better choice.\n   * `bindCallback` will treat such functions the same as any other and error parameters\n   * (whether passed or not) will always be interpreted as regular callback argument.\n   *\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Receive an array of arguments passed to a callback</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 5\n   *   console.log(b); // 'some string'\n   *   console.log(c); // {someProperty: 'someValue'}\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n   * boundSomeFunction().subscribe(values => {\n   *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n   * });\n   *\n   *\n   * @example <caption>Use bindCallback with a selector function</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 'a'\n   *   console.log(b); // 'b'\n   *   console.log(c); // 'c'\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n   * boundSomeFunction().subscribe(value => {\n   *   console.log(value) // 'abc'\n   * });\n   *\n   *\n   * @example <caption>Compare behaviour with and without async Scheduler</caption>\n   * function iCallMyCallbackSynchronously(cb) {\n   *   cb();\n   * }\n   *\n   * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n   * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n   *\n   * boundSyncFn().subscribe(() => console.log('I was sync!'));\n   * boundAsyncFn().subscribe(() => console.log('I was async!'));\n   * console.log('This happened...');\n   *\n   * // Logs:\n   * // I was sync!\n   * // This happened...\n   * // I was async!\n   *\n   *\n   * @example <caption>Use bindCallback on an object method</caption>\n   * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n   * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n   * .subscribe(subscriber);\n   *\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func A function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps them to a value that is emitted on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              private scheduler: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T>, context: any }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error object, signaling\n   * whether call was successful. If that object is passed to callback, it means\n   * something went wrong.\n   *\n   * The output of `bindNodeCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable.\n   * If `func` calls its callback with error parameter present, Observable will\n   * error with that value as well. If error parameter is not passed, Observable will emit\n   * second parameter. If there are more parameters (third and so on),\n   * Observable will emit an array with all arguments, except first error argument.\n   *\n   * Optionally `bindNodeCallback` accepts selector function, which allows you to\n   * make resulting Observable emit value computed by selector, instead of regular\n   * callback arguments. It works similarly to {@link bindCallback} selector, but\n   * Node.js-style error argument will never be passed to that function.\n   *\n   * Note that `func` will not be called at the same time output function is,\n   * but rather whenever resulting Observable is subscribed. By default call to\n   * `func` will happen synchronously after subscription, but that can be changed\n   * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n   * can also control when values from callback will be emitted by Observable.\n   * To find out more, check out documentation for {@link bindCallback}, where\n   * Scheduler works exactly the same.\n   *\n   * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n   * of returned function, when it is called.\n   *\n   * After Observable emits value, it will complete immediately. This means\n   * even if `func` calls callback again, values from second and consecutive\n   * calls will never appear on the stream. If you need to handle functions\n   * that call callbacks multiple times, check out {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n   * \"Node.js-style\" callbacks are just a convention, so if you write for\n   * browsers or any other environment and API you use implements that callback style,\n   * `bindNodeCallback` can be safely used on that API functions as well.\n   *\n   * Remember that Error object passed to callback does not have to be an instance\n   * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n   * Error parameter of callback function is interpreted as \"present\", when value\n   * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n   * string or boolean `true`. In all of these cases resulting Observable would error\n   * with that value. This means usually regular style callbacks will fail very often when\n   * `bindNodeCallback` is used. If your Observable errors much more often then you\n   * would expect, check if callback really is called in Node.js-style and, if not,\n   * switch to {@link bindCallback} instead.\n   *\n   * Note that even if error parameter is technically present in callback, but its value\n   * is falsy, it still won't appear in array emitted by Observable or in selector function.\n   *\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Use on function calling callback with multiple arguments</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // null\n   *   console.log(a); // 5\n   *   console.log(b); // \"some string\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // [5, \"some string\"]\n   * });\n   *\n   *\n   * @example <caption>Use with selector function</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // undefined\n   *   console.log(a); // \"abc\"\n   *   console.log(b); // \"DEF\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // \"abcDEF\"\n   * });\n   *\n   *\n   * @example <caption>Use on function calling callback in regular style</caption>\n   * someFunction(a => {\n   *   console.log(a); // 5\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(\n   *   value => {}             // never gets called\n   *   err => console.log(err) // 5\n   *);\n   *\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a Node.js-style callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              public scheduler: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n}\n\ninterface DispatchState<T> {\n  source: BoundNodeCallbackObservable<T>;\n  subscriber: Subscriber<T>;\n  context: any;\n}\n\nfunction dispatch<T>(this: Action<DispatchState<T>>, state: DispatchState<T>) {\n  const self = (<Subscription> this);\n  const { source, subscriber, context } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        self.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n    if (result === errorObject) {\n      self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import {  Observable, ObservableInput  } from '../Observable';\nimport {  IScheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: IScheduler): Observable<R>;\n\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: IScheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | IScheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | IScheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    IScheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: IScheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <IScheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","\nimport { ObservableInput } from '../Observable';\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap(identity as (value: T, index: number) => ObservableInput<{}>, null, concurrent);\n}","\nimport { mergeAll } from './mergeAll';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): MonoTypeOperatorFunction<T> {\n  return mergeAll(1);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll()(of(...observables)) as Observable<R>;\n}\n","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * // Results in the following behavior:\n   * // If the result of Math.random() is greater than 0.5 it will listen\n   * // for clicks anywhere on the \"document\"; when document is clicked it\n   * // will log a MouseEvent object to the console. If the result is less\n   * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n   *\n   * @see {@link create}\n   *\n   * @param {function(): SubscribableOrPromise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, R>(v1: SubscribableOrPromise<T>, project: (v1: T) => R): Observable<R>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Joins last values emitted by passed Observables.\n   *\n   * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n   *\n   * <img src=\"./img/forkJoin.png\" width=\"100%\">\n   *\n   * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n   * or directly as arguments. If no input Observables are provided, resulting stream will complete\n   * immediately.\n   *\n   * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n   * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n   * array will have `n` values, where first value is the last thing emitted by the first Observable,\n   * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n   * not emit more than once and it will complete after that. If you need to emit combined values not only\n   * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n   * or {@link zip} instead.\n   *\n   * In order for resulting array to have the same length as the number of input Observables, whenever any of\n   * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n   * and it will not emit anything either, even if it already has some last values from other Observables.\n   * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n   * unless at any point some other Observable completes without emitting value, which brings us back to\n   * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n   * have to emit something at least once and complete.\n   *\n   * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n   * will be immediately unsubscribed.\n   *\n   * Optionally `forkJoin` accepts project function, that will be called with values which normally\n   * would land in emitted array. Whatever is returned by project function, will appear in output\n   * Observable instead. This means that default project can be thought of as a function that takes\n   * all its arguments and puts them into an array. Note that project function will be called only\n   * when output Observable is supposed to emit a result.\n   *\n   * @example <caption>Use forkJoin with operator emitting immediately</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.of(1, 2, 3, 4),\n   *   Rx.Observable.of(5, 6, 7, 8)\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [4, 8]\n   * // \"This is how it ends!\"\n   *\n   *\n   * @example <caption>Use forkJoin with operator emitting after some time</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [2, 3] after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   *\n   * @example <caption>Use forkJoin with project function</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n   *   (n, m) => n + m\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // 5 after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   * @see {@link combineLatest}\n   * @see {@link zip}\n   *\n   * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n   * passed directly to the operator.\n   * @param {function} [project] Function that takes values emitted by input Observables and returns value\n   * that will appear in resulting Observable instead of default array.\n   * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n   * or value from project function.\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}\n","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmitter = {\n  addListener: (eventName: string, handler: NodeEventHandler) => void;\n  removeListener: (eventName: string, handler: NodeEventHandler) => void;\n};\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * `fromEvent` accepts as a first argument event target, which is an object with methods\n   * for registering event handler functions. As a second argument it takes string that indicates\n   * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n   * which are described in detail below. If your event target does not match any of the ones listed,\n   * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n   * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n   * handler functions have different names, but they all accept a string describing event type\n   * and function itself, which will be called whenever said event happens.\n   *\n   * Every time resulting Observable is subscribed, event handler function will be registered\n   * to event target on given event type. When that event fires, value\n   * passed as a first argument to registered function will be emitted by output Observable.\n   * When Observable is unsubscribed, function will be unregistered from event target.\n   *\n   * Note that if event target calls registered function with more than one argument, second\n   * and following arguments will not appear in resulting stream. In order to get access to them,\n   * you can pass to `fromEvent` optional project function, which will be called with all arguments\n   * passed to event handler. Output Observable will then emit value returned by project function,\n   * instead of the usual value.\n   *\n   * Remember that event targets listed below are checked via duck typing. It means that\n   * no matter what kind of object you have and no matter what environment you work in,\n   * you can safely use `fromEvent` on that object if it exposes described methods (provided\n   * of course they behave as was described above). So for example if Node.js library exposes\n   * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n   * a good choice.\n   *\n   * If the API you use is more callback then event handler oriented (subscribed\n   * callback function fires only once and thus there is no need to manually\n   * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n   * instead.\n   *\n   * `fromEvent` supports following types of event targets:\n   *\n   * **DOM EventTarget**\n   *\n   * This is an object with `addEventListener` and `removeEventListener` methods.\n   *\n   * In the browser, `addEventListener` accepts - apart from event type string and event\n   * handler function arguments - optional third parameter, which is either an object or boolean,\n   * both used for additional configuration how and when passed function will be called. When\n   * `fromEvent` is used with event target of that type, you can provide this values\n   * as third parameter as well.\n   *\n   * **Node.js EventEmitter**\n   *\n   * An object with `addListener` and `removeListener` methods.\n   *\n   * **JQuery-style event target**\n   *\n   * An object with `on` and `off` methods\n   *\n   * **DOM NodeList**\n   *\n   * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n   *\n   * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n   * it contains and install event handler function in every of them. When returned Observable\n   * is unsubscribed, function will be removed from all Nodes.\n   *\n   * **DOM HtmlCollection**\n   *\n   * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n   * installed and removed in each of elements.\n   *\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console every time a click\n   * // occurs on the document.\n   *\n   *\n   * @example <caption>Use addEventListener with capture option</caption>\n   * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n   *                                                                          // which will be passed to addEventListener\n   * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n   *\n   * clicksInDocument.subscribe(() => console.log('document'));\n   * clicksInDiv.subscribe(() => console.log('div'));\n   *\n   * // By default events bubble UP in DOM tree, so normally\n   * // when we would click on div in document\n   * // \"div\" would be logged first and then \"document\".\n   * // Since we specified optional `capture` option, document\n   * // will catch event when it goes DOWN DOM tree, so console\n   * // will log \"document\" and then \"div\".\n   *\n   * @see {@link bindCallback}\n   * @see {@link bindNodeCallback}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOM EventTarget, Node.js\n   * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions | SelectorMethodSignature<T>,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options as EventListenerOptions | undefined);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler, <boolean>options);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler as NodeEventHandler);\n      unsubscribe = () => source.removeListener(eventName, handler as NodeEventHandler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { isFunction } from '../util/isFunction';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *\n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *\n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n   * removeHandler function will forward it.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler?: (handler: Function, signal?: any) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler?: (handler: Function, signal?: any) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    const retValue = this._callAddHandler(handler, subscriber);\n\n    if (!isFunction(removeHandler)) {\n      return;\n    }\n\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler, retValue) ;\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): any | null {\n    try {\n      return this.addHandler(handler) || null;\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}\n","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * IScheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: IScheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: IScheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: IScheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: IScheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | IScheduler,\n                      scheduler?: IScheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector as ResultFunc<S, T>,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector as ResultFunc<S, T>,\n        <IScheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <IScheduler>scheduler);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { GenerateObservable } from './GenerateObservable';\n\nexport const generate = GenerateObservable.create;\n","import { Observable } from '../../Observable';\nimport { generate as staticGenerate } from '../../observable/generate';\n\nObservable.generate = staticGenerate;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof staticGenerate;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n  protected work: (this: this, state?: T) => void;\n\n  constructor(protected scheduler: AsyncScheduler,\n              work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n    this.work = work;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from './ArrayObservable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function merge<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll(concurrent)(new ArrayObservable(<any>observables, scheduler)) as Observable<R>;\n}\n","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { race as staticRace } from '../../observable/race';\n\nObservable.race = staticRace;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof staticRace;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please note\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { onErrorResumeNextStatic } from '../operators/onErrorResumeNext';\n\nexport const onErrorResumeNext = onErrorResumeNextStatic;\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext as staticOnErrorResumeNext } from '../../observable/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = staticOnErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof staticOnErrorResumeNext;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\r\nimport { Action } from '../scheduler/Action';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(this: Action<PairsContext<T>>, state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  this.schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional IScheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional IScheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: IScheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: IScheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}\r\n","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * IScheduler and just delivers the notifications synchronously, but may use\n   * an optional IScheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: IScheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: IScheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: IScheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create(error: any, scheduler?: IScheduler): ErrorObservable {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    subscriber.syncErrorThrowable = true;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import {  zipStatic  } from '../operators/zip';\n\nexport const zip = zipStatic;\n","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { map } from '../../operators/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(this: AjaxRequest): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  patch(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T>(url: string, headers?: Object): Observable<T>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxPatch(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PATCH', url, body, headers });\n};\n\nconst mapResponse = map((x: AjaxResponse, index: number) => x.response);\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return mapResponse(\n    new AjaxObservable<AjaxResponse>({\n      method: 'GET',\n      url,\n      responseType: 'json',\n      headers\n    })\n  );\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.patch = ajaxPatch;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function(this: AjaxRequest) {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // set up the events before open XHR\n      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n      // You need to add the event listeners before calling open() on the request.\n      // Otherwise the progress events will not fire.\n      this.setupEvents(xhr, request);\n      // open XHR\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout, responseType and withCredentials can be set once the XHR is open\n      if (async) {\n        xhr.timeout = request.timeout;\n        xhr.responseType = request.responseType as any;\n      }\n\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = !!request.withCredentials;\n      }\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // finally send the request\n      result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    function xhrTimeout(this: XMLHttpRequest, e: ProgressEvent) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    xhr.ontimeout = xhrTimeout;\n    (<any>xhrTimeout).request = request;\n    (<any>xhrTimeout).subscriber = this;\n    (<any>xhrTimeout).progressSubscriber = progressSubscriber;\n    if (xhr.upload && 'withCredentials' in xhr) {\n      if (progressSubscriber) {\n        let xhrProgress: (e: ProgressEvent) => void;\n        xhrProgress = function(e: ProgressEvent) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        if (root.XDomainRequest) {\n          xhr.onprogress = xhrProgress;\n        } else {\n          xhr.upload.onprogress = xhrProgress;\n        }\n        (<any>xhrProgress).progressSubscriber = progressSubscriber;\n      }\n      let xhrError: (e: ErrorEvent) => void;\n      xhrError = function(this: XMLHttpRequest, e: ErrorEvent) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      xhr.onerror = xhrError;\n      (<any>xhrError).request = request;\n      (<any>xhrError).subscriber = this;\n      (<any>xhrError).progressSubscriber = progressSubscriber;\n    }\n\n    function xhrReadyStateChange(this: XMLHttpRequest, e: ProgressEvent) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    xhr.onreadystatechange = xhrReadyStateChange;\n    (<any>xhrReadyStateChange).subscriber = this;\n    (<any>xhrReadyStateChange).progressSubscriber = progressSubscriber;\n    (<any>xhrReadyStateChange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\nfunction parseXhrResponse(responseType: string, xhr: XMLHttpRequest) {\n  switch (responseType) {\n    case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          // HACK(benlesh): TypeScript shennanigans\n          // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n          return JSON.parse((xhr as any).responseText || 'null');\n        }\n      case 'xml':\n        return xhr.responseXML;\n      case 'text':\n      default:\n          // HACK(benlesh): TypeScript shennanigans\n          // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n          return  ('response' in xhr) ? xhr.response : (xhr as any).responseText;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { root } from './root';\n\nexport function assignImpl(target: Object, ...sources: Object[]) {\n  const len = sources.length;\n  for (let i = 0; i < len; i++) {\n    const source = sources[i];\n    for (let k in source) {\n      if (source.hasOwnProperty(k)) {\n        target[k] = source[k];\n      }\n    }\n  }\n  return target;\n};\n\nexport function getAssign(root: any) {\n  return root.Object.assign || assignImpl;\n}\n\nexport const assign = getAssign(root);","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n   *\n   * @example <caption>Wraps browser WebSocket</caption>\n   *\n   * let socket$ = Observable.webSocket('ws://localhost:8081');\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n   *\n   * import { w3cwebsocket } from 'websocket';\n   *\n   * let socket$ = Observable.webSocket({\n   *   url: 'ws://localhost:8081',\n   *   WebSocketCtor: w3cwebsocket\n   * });\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  private _resetState() {\n    this.socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n      if (this.binaryType) {\n        this.socket.binaryType = this.binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this._resetState();\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this._resetState();\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      this._resetState();\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0) {\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this._resetState();\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { buffer as higherOrder } from '../operators/buffer';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(this: Observable<T>, closingNotifier: Observable<any>): Observable<T[]> {\n  return higherOrder(closingNotifier)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: typeof buffer;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","\nimport { Observable } from '../Observable';\nimport { bufferCount as higherOrder } from '../operators/bufferCount';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(this: Observable<T>, bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return higherOrder(bufferSize, startBufferEvery)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: typeof bufferCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { bufferTime as higherOrder } from '../operators/bufferTime';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return higherOrder(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: typeof bufferTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { bufferToggle as higherOrder } from '../operators/bufferToggle';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(this: Observable<T>, openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return higherOrder(openings, closingSelector)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferToggle } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: typeof bufferToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { bufferWhen as higherOrder } from '../operators/bufferWhen';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<T[]> {\n  return higherOrder(closingSelector)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: typeof bufferWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","\nimport { Observable, ObservableInput } from '../Observable';\nimport { catchError as higherOrder } from '../operators/catchError';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nexport function _catch<T, R>(this: Observable<T>, selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<T | R> {\n  return higherOrder(selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","import { CombineLatestOperator } from '../operators/combineLatest';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function combineAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new CombineLatestOperator(project));\n}\n","\nimport { Observable } from '../Observable';\nimport { combineAll as higherOrder } from '../operators/combineAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: typeof combineAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { combineLatest as higherOrder } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function combineLatest<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function combineLatest<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function combineLatest<T, R>(this: Observable<T>, array: ObservableInput<T>[]): Observable<Array<T>>;\nexport function combineLatest<T, TOther, R>(this: Observable<T>, array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { combineLatest } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: typeof combineLatest;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { concat as concatStatic } from '../observable/concat';\n\nexport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: Array<ObservableInput<T> | IScheduler>): MonoTypeOperatorFunction<T>;\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(concatStatic<T, R>(source, ...observables));\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { concat as higherOrder } from '../operators/concat';\n\nexport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler>): Observable<T>;\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concat } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: typeof concat;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { concatAll as higherOrder } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concatAll<T>(this: Observable<T>): T;\nexport function concatAll<T, R>(this: Observable<T>): Subscribable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(this: Observable<T>): T {\n  return <any>higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: typeof concatAll;\n  }\n}","import { mergeMap } from './mergeMap';\nimport { ObservableInput } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(project: (value: T, index: number) =>  ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return mergeMap(project, resultSelector, 1);\n}\n","import { concatMap as higherOrderConcatMap } from '../operators/concatMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return higherOrderConcatMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: typeof concatMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { concatMap } from './concatMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(\n  innerObservable: Observable<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R> {\n  return concatMap(() => innerObservable, resultSelector);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { concatMapTo as higherOrder } from '../operators/concatMapTo';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function concatMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: typeof concatMapTo;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { count as higherOrder } from '../operators/count';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { count } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: typeof count;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { dematerialize as higherOrder } from '../operators/dematerialize';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(this: Observable<Notification<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: typeof dematerialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { debounce as higherOrder } from '../operators/debounce';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: typeof debounce;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { debounceTime as higherOrder } from '../operators/debounceTime';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(this: Observable<T>, dueTime: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(dueTime, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: typeof debounceTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","\nimport { Observable } from '../Observable';\nimport { defaultIfEmpty as higherOrder } from '../operators/defaultIfEmpty';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(this: Observable<T>, defaultValue?: T): Observable<T>;\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue?: R): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue: R = null): Observable<T | R> {\n  return higherOrder<T, R>(defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: typeof defaultIfEmpty;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      this.unsubscribe();\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { delay as higherOrder } from '../operators/delay';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(this: Observable<T>, delay: number|Date,\n                         scheduler: IScheduler = async): Observable<T> {\n  return higherOrder<T>(delay, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: typeof delay;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(/** @deprecated internal use only */ public source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { delayWhen as higherOrder } from '../operators/delayWhen';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(this: Observable<T>, delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  return higherOrder(delayDurationSelector, subscriptionDelay)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: typeof delayWhen;\n  }\n}","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Observable } from '../Observable';\nimport { distinct as higherOrder } from '../operators/distinct';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(this: Observable<T>,\n                               keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): Observable<T> {\n  return higherOrder(keySelector, flushes)(this);\n}\n","import { Observable } from '../../Observable';\nimport { distinct } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: typeof distinct;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { distinctUntilChanged as higherOrder } from '../operators/distinctUntilChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean): Observable<T>;\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return higherOrder(compare, keySelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: typeof distinctUntilChanged;\n  }\n}","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(key: string): MonoTypeOperatorFunction<T>;\nexport function distinctUntilKeyChanged<T, K>(key: string, compare: (x: K, y: K) => boolean): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T> {\n  return distinctUntilChanged((x: T, y: T) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n","\nimport { Observable } from '../Observable';\nimport { distinctUntilKeyChanged as higherOrder } from '../operators/distinctUntilKeyChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string): Observable<T>;\nexport function distinctUntilKeyChanged<T, K>(this: Observable<T>, key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return higherOrder<T, T>(key, compare)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: typeof distinctUntilKeyChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { tap as higherOrder } from '../operators/tap';\n\n/* tslint:disable:max-line-length */\nexport function _do<T>(this: Observable<T>, next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\nexport function _do<T>(this: Observable<T>, observer: PartialObserver<T>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(this: Observable<T>, nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return higherOrder(<any>nextOrObserver, error, complete)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: typeof _do;\n    _do: typeof _do;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { exhaust as higherOrder } from '../operators/exhaust';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: typeof exhaust;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable, ObservableInput } from '../Observable';\nimport { exhaustMap as higherOrder } from '../operators/exhaustMap';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: typeof exhaustMap;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { expand as higherOrder } from '../operators/expand';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(this: Observable<T>, project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return higherOrder(project, concurrent, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: typeof expand;\n  }\n}","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { elementAt as higherOrder } from '../operators/elementAt';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(this: Observable<T>, index: number, defaultValue?: T): Observable<T> {\n  return higherOrder(index, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: typeof elementAt;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","\nimport { Observable } from '../Observable';\nimport { filter as higherOrderFilter } from '../operators/filter';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(this: Observable<T>,\n                                       predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): Observable<S>;\nexport function filter<T>(this: Observable<T>,\n                          predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return higherOrderFilter(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { filter } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: typeof filter;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { finalize } from '../operators/finalize';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(this: Observable<T>, callback: () => void): Observable<T> {\n  return finalize(callback)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: typeof _finally;\n    _finally: typeof _finally;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { find as higherOrder } from '../operators/find';\n\n/* tslint:disable:max-line-length */\nexport function find<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): Observable<S>;\nexport function find<T>(this: Observable<T>,\n                        predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { find } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: typeof find;\n  }\n}","import { Observable } from '../Observable';\nimport { FindValueOperator } from '../operators/find';\nimport { OperatorFunction } from '../interfaces';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, true, thisArg)) as Observable<any>;\n}\n","import { Observable } from '../Observable';\nimport { findIndex as higherOrder } from '../operators/findIndex';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: typeof findIndex;\n  }\n}","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { first as higherOrder } from '../operators/first';\n\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function first<T, S extends T, R>(this: Observable<T>,\n                                         predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): Observable<S>;\nexport function first<T>(this: Observable<T>,\n                         predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function first<T, R>(this: Observable<T>,\n                            predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<R>;\nexport function first<T>(this: Observable<T>,\n                         predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): Observable<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { first } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: typeof first;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { groupBy as higherOrder, GroupedObservable } from '../operators/groupBy';\nexport { GroupedObservable };\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>> {\n  return higherOrder(keySelector, elementSelector as any, durationSelector, subjectSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: typeof groupBy;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Observable } from '../Observable';\nimport { ignoreElements as higherOrder } from '../operators/ignoreElements';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: typeof ignoreElements;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { isEmpty as higherOrder } from '../operators/isEmpty';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty<T>(this: Observable<T>): Observable<boolean> {\n  return higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: typeof isEmpty;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { audit as higherOrder } from '../operators/audit';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","import { Observable } from '../../Observable';\nimport { audit } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: typeof audit;\n  }\n}","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return audit(() => timer(duration, scheduler));\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { auditTime as higherOrder } from '../operators/auditTime';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(duration, scheduler)(this) as Observable<T>;\n}","import { Observable } from '../../Observable';\nimport { auditTime } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: typeof auditTime;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { last as higherOrder } from '../operators/last';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function last<T, S extends T, R>(this: Observable<T>,\n                                        predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): Observable<S>;\nexport function last<T>(this: Observable<T>,\n                        predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function last<T, R>(this: Observable<T>,\n                           predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): Observable<R>;\nexport function last<T>(this: Observable<T>,\n                        predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { last } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: typeof last;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(this: Observable<T>, func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: typeof letProto;\n    letBind: typeof letProto;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { every as higherOrder } from '../operators/every';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return higherOrder(predicate, thisArg)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { every } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: typeof every;\n  }\n}","import { map as higherOrderMap } from '../operators/map';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  return higherOrderMap(project, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: typeof map;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Observable } from '../Observable';\nimport { mapTo as higherOrder } from '../operators/mapTo';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(this: Observable<T>, value: R): Observable<R> {\n  return higherOrder(value)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: typeof mapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { materialize as higherOrder } from '../operators/materialize';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(this: Observable<T>): Observable<Notification<T>> {\n  return higherOrder()(this) as Observable<Notification<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: typeof materialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { pipe } from '../util/pipe';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function reduce<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): OperatorFunction<T, T[]>;\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index?: number) => R, seed?: R): OperatorFunction<T, R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source: Observable<T>): Observable<R> {\n      return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n    };\n  }\n  return function reduceOperatorFunction(source: Observable<T>): Observable<R> {\n    return pipe(scan<T, T | R>((acc, value, index) => {\n      return accumulator(<R>acc, value, index + 1);\n    }), takeLast(1))(source) as Observable<R>;\n  };\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n\n  return reduce(max);\n}\n","import { Observable } from '../Observable';\nimport { max as higherOrderMax } from '../operators/max';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMax(comparer)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { max } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: typeof max;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { merge as mergeStatic } from '../observable/merge';\n\nexport { merge as mergeStatic } from '../observable/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T>(concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: Array<ObservableInput<T> | IScheduler | number>): MonoTypeOperatorFunction<T>;\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(mergeStatic(source, ...observables));\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { merge as higherOrder } from '../operators/merge';\n\nexport { merge as mergeStatic } from '../observable/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(this: Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler | number>): Observable<T>;\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n  return higherOrder(...observables)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: typeof merge;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { mergeAll as higherOrder } from '../operators/mergeAll';\n\nexport function mergeAll<T>(this: Observable<T>, concurrent?: number): T;\nexport function mergeAll<T, R>(this: Observable<T>, concurrent?: number): Subscribable<R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(this: Observable<T>, concurrent: number = Number.POSITIVE_INFINITY): Observable<T> {\n  return higherOrder(concurrent)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: typeof mergeAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMap as higherOrderMergeMap } from '../operators/mergeMap';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<I | R> {\n  return higherOrderMergeMap(project, <any>resultSelector, concurrent)(this) as Observable<I | R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: typeof mergeMap;\n    mergeMap: typeof mergeMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMapTo as higherOrder } from '../operators/mergeMapTo';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(innerObservable, resultSelector as any, concurrent)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: typeof mergeMapTo;\n    mergeMapTo: typeof mergeMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { mergeScan as higherOrder } from '../operators/mergeScan';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(this: Observable<T>,\n                                accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(accumulator, seed, concurrent)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: typeof mergeScan;\n  }\n}","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return reduce(min);\n}\n","import { Observable } from '../Observable';\nimport { min as higherOrderMin } from '../operators/min';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMin(comparer)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { min } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: typeof min;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  /** @deprecated internal use only */ public _subject: Subject<T>;\n  /** @deprecated internal use only */ public _refCount: number = 0;\n  /** @deprecated internal use only */ public _connection: Subscription;\n  _isComplete = false;\n\n  constructor(/** @deprecated internal use only */ public source: Observable<T>,\n              /** @deprecated internal use only */ public subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  /** @deprecated internal use only */ public getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  /** @deprecated internal use only */ _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { multicast as higherOrder } from '../operators/multicast';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): ConnectableObservable<T>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): Observable<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Allows source Observable to be subscribed only once with a Subject of choice,\n * while still sharing its values between multiple subscribers.\n *\n * <span class=\"informal\">Subscribe to Observable once, but send its values to multiple subscribers.</span>\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * `multicast` is an operator that works in two modes.\n *\n * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject\n * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be\n * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that\n * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when\n * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription\n * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,\n * even though usually it would send a request per every subscriber. Since it sends a request at the moment of\n * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.\n *\n * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,\n * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source\n * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,\n * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count\n * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least\n * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a\n * ConnectableObservable, use `refCount`.\n *\n * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.\n * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable\n * as well, which should be the input stream modified by any operators you want. Note that in this\n * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If\n * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.\n * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,\n * if inside the selector function you subscribe to the input Observable multiple times, actual source stream\n * will be subscribed only once. So if you have a chain of operators that use some Observable many times,\n * but you want to subscribe to that Observable only once, this is the mode you would use.\n *\n * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the\n * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject\n * has some special properties, Observable returned by `multicast` will have them as well. If you want to use\n * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},\n * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},\n * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually\n * just wrappers around `multicast`, with a specific Subject hardcoded inside.\n *\n * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,\n * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.\n *\n * @example <caption>Use ConnectableObservable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const connectableSeconds = seconds.multicast(new Subject());\n *\n * connectableSeconds.subscribe(value => console.log('first: ' + value));\n * connectableSeconds.subscribe(value => console.log('second: ' + value));\n *\n * // At this point still nothing happens, even though we subscribed twice.\n *\n * connectableSeconds.connect();\n *\n * // From now on `seconds` are being logged to the console,\n * // twice per every second. `seconds` Observable was however only subscribed once,\n * // so under the hood Observable.interval had only one clock started.\n *\n * @example <caption>Use selector</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds\n *     .multicast(\n *         () => new Subject(),\n *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.\n *                                         // Because we are inside selector, `seconds` is subscribed once,\n *     )                                   // thus starting only one clock used internally by Observable.interval.\n *     .subscribe();\n *\n * @see {@link publish}\n * @see {@link publishLast}\n * @see {@link publishBehavior}\n * @see {@link publishReplay}\n * @see {@link share}\n * @see {@link shareReplay}\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through\n * which the source sequence's elements will be multicast to the selector function input Observable or\n * ConnectableObservable returned by the operator.\n * @param {Function} [selector] - Optional selector function that can use the input stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the input source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector\n * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.\n *\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(this: Observable<T>, subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(<any>subjectOrSubjectFactory, selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { multicast } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: typeof multicast;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { observeOn as higherOrder } from '../operators/observeOn';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { observeOn } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: typeof observeOn;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { onErrorResumeNext as higherOrder } from '../operators/onErrorResumeNext';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R> ;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...nextSources)(this);\n}\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: typeof onErrorResumeNext;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Observable } from '../Observable';\nimport { pairwise as higherOrder } from '../operators/pairwise';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(this: Observable<T>): Observable<[T, T]> {\n  return higherOrder()(this) as Observable<[T, T]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: typeof pairwise;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T, index: number) => boolean,\n                             thisArg?: any): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]> {\n  return (source: Observable<T>) => [\n    filter(predicate, thisArg)(source),\n    filter(not(predicate, thisArg) as any)(source)\n  ] as [Observable<T>, Observable<T>];\n}\n","import { Observable } from '../Observable';\nimport { partition as higherOrder } from '../operators/partition';\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: typeof partition;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(...properties: string[]): OperatorFunction<T, R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return (source: Observable<T>) => map(plucker(properties, length))(source as any);\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","import { Observable } from '../Observable';\nimport { pluck as higherOrder } from '../operators/pluck';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(this: Observable<T>, ...properties: string[]): Observable<R> {\n  return higherOrder(...properties)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: typeof pluck;\n  }\n}","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function publish<T, R>(selector: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\n  return selector ?\n    multicast(() => new Subject<T>(), selector) :\n    multicast(new Subject<T>());\n}\n","\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publish as higherOrder } from '../operators/publish';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>): ConnectableObservable<T>;\nexport function publish<T>(this: Observable<T>, selector: (source: Observable<T>) => Observable<T>): Observable<T>;\nexport function publish<T, R>(this: Observable<T>, selector: (source: Observable<T>) => Observable<R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(this: Observable<T>, selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(selector)(this);\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n","\nimport { Observable } from '../../Observable';\nimport { publish } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: typeof publish;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T):  UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new BehaviorSubject<T>(value))(source) as ConnectableObservable<T>;\n}\n","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishBehavior as higherOrder } from '../operators/publishBehavior';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(this: Observable<T>, value: T): ConnectableObservable<T> {\n  return higherOrder(value)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: typeof publishBehavior;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function publishReplay<T, R>(bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\nexport function publishReplay<T, R>(bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<R> | Observable<R>> {\n\n  if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n    scheduler = selectorOrScheduler;\n  }\n\n  const selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n  const subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n\n  return (source: Observable<T>) => multicast(() => subject, selector)(source) as Observable<R> | ConnectableObservable<R>;\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishReplay as higherOrder } from '../operators/publishReplay';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler): ConnectableObservable<T>;\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): Observable<T>;\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): Observable<R> | ConnectableObservable<R> {\n\n  return higherOrder<T, R>(bufferSize, windowTime, selectorOrScheduler as any, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: typeof publishReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\nexport function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new AsyncSubject<T>())(source);\n}\n","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishLast as higherOrder } from '../operators/publishLast';\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(this: Observable<T>): ConnectableObservable<T> {\n  //TODO(benlesh): correct type-flow through here.\n  return higherOrder()(this) as ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: typeof publishLast;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\nimport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T> {\n  return function raceOperatorFunction(source: Observable<T>) {\n    // if the only argument is an array, it was most likely called with\n    // `pair([obs1, obs2, ...])`\n    if (observables.length === 1 && isArray(observables[0])) {\n      observables = <Array<Observable<T>>>observables[0];\n    }\n\n    return source.lift.call(raceStatic<T>(source, ...observables));\n  };\n}","import { Observable } from '../Observable';\nimport { race as higherOrder } from '../operators/race';\n\n// NOTE: to support backwards compatability with 5.4.* and lower\nexport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, observables: Array<Observable<T>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, observables: Array<Observable<T>>): Observable<R>;\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { race } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: typeof race;\n  }\n}","import { Observable } from '../Observable';\nimport { reduce as higherOrderReduce } from '../operators/reduce';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): Observable<T[]>;\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index?: number) => R, seed?: R): Observable<R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return higherOrderReduce(accumulator, seed)(this);\n  }\n\n  return higherOrderReduce(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: typeof reduce;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { repeat as higherOrder } from '../operators/repeat';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: typeof repeat;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  /** @deprecated internal use only */ _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Observable } from '../Observable';\nimport { repeatWhen as higherOrder } from '../operators/repeatWhen';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(this: Observable<T>, notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: typeof repeatWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { retry as higherOrder } from '../operators/retry';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: typeof retry;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              public source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Observable } from '../Observable';\nimport { retryWhen as higherOrder } from '../operators/retryWhen';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(this: Observable<T>, notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: typeof retryWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { sample as higherOrder } from '../operators/sample';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: typeof sample;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { sampleTime as higherOrder } from '../operators/sampleTime';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(this: Observable<T>, period: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(period, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: typeof sampleTime;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { scan as higherOrderScan } from '../operators/scan';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  if (arguments.length >= 2) {\n    return higherOrderScan(accumulator, seed)(this) as Observable<R>;\n  }\n  return higherOrderScan(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\n\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: typeof scan;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { sequenceEqual as higherOrder } from '../operators/sequenceEqual';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(this: Observable<T>, compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return higherOrder(compareTo, comparor)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: typeof sequenceEqual;\n  }\n}","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n};\n","import { Observable } from '../Observable';\nimport { share as higherOrder } from '../operators/share';\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { share } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: typeof share;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler ): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n}\n\nfunction shareReplayOperator<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler) {\n  let subject: ReplaySubject<T>;\n  let refCount = 0;\n  let subscription: Subscription;\n  let hasError = false;\n  let isComplete = false;\n\n  return function shareReplayOperation(this: Subscriber<T>, source: Observable<T>) {\n    refCount++;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next(value) { subject.next(value); },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subject.complete();\n        },\n      });\n    }\n\n    const innerSub = subject.subscribe(this);\n\n    return () => {\n      refCount--;\n      innerSub.unsubscribe();\n      if (subscription && refCount === 0 && isComplete) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n};\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { shareReplay as higherOrder } from '../operators/shareReplay';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler):\n  Observable<T> {\n  return higherOrder(bufferSize, windowTime, scheduler)(this) as Observable<T>;\n};","\nimport { Observable } from '../../Observable';\nimport { shareReplay } from '../../operator/shareReplay';\n\nObservable.prototype.shareReplay = shareReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    shareReplay: typeof shareReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { single as higherOrder } from '../operators/single';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { single } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: typeof single;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skip as higherOrder } from '../operators/skip';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: typeof skip;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Observable } from '../Observable';\nimport { skipLast as higherOrder } from '../operators/skipLast';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { skipLast } from '../../operator/skipLast';\n\nObservable.prototype.skipLast = skipLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipLast: typeof skipLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skipUntil as higherOrder } from '../operators/skipUntil';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: typeof skipUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skipWhile as higherOrder } from '../operators/skipWhile';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: typeof skipWhile;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(v1: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len === 1) {\n      return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), source);\n    } else if (len > 1) {\n      return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), source);\n    } else {\n      return concatStatic(new EmptyObservable<T>(scheduler), source);\n    }\n  };\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { startWith as higherOrder } from '../operators/startWith';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(this: Observable<T>, v1: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T> {\n  return higherOrder(...array)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: typeof startWith;\n  }\n}","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: AsapAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { Action } from '../scheduler/Action';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: IScheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: IScheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function subscribeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new SubscribeOnOperator<T>(scheduler, delay));\n  };\n}\n\nclass SubscribeOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler,\n              private delay: number) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return new SubscribeOnObservable(\n      source, this.delay, this.scheduler\n    ).subscribe(subscriber);\n  }\n}\n","\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { subscribeOn as higherOrder } from '../operators/subscribeOn';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { subscribeOn } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: typeof subscribeOn;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { OperatorFunction } from '../interfaces';\nimport { Observable } from '../Observable';\nimport { switchMap } from './switchMap';\nimport { identity } from '../util/identity';\n\nexport function switchAll<T>(): OperatorFunction<Observable<T>, T> {\n  return switchMap(identity);\n}\n","import { Observable } from '../Observable';\nimport { switchAll as higherOrder } from '../operators/switchAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(this: Observable<Observable<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: typeof _switch;\n    _switch: typeof _switch;\n  }\n}","\nimport { Observable, ObservableInput } from '../Observable';\nimport { switchMap as higherOrderSwitchMap } from '../operators/switchMap';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<I | R> {\n  return higherOrderSwitchMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: typeof switchMap;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { switchMapTo as higherOrder } from '../operators/switchMapTo';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function switchMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<I | R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: typeof switchMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { take as higherOrder } from '../operators/take';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: typeof take;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { takeLast as higherOrderTakeLast } from '../operators/takeLast';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrderTakeLast(count)(this) as Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { takeLast } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: typeof takeLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Observable } from '../Observable';\nimport { takeUntil as higherOrder } from '../operators/takeUntil';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: typeof takeUntil;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { takeWhile as higherOrder } from '../operators/takeWhile';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: typeof takeWhile;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { throttle as higherOrder, ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(this: Observable<T>,\n                            durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(durationSelector, config)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: typeof throttle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\nimport { throttleTime as higherOrder } from '../operators/throttleTime';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(this: Observable<T>,\n                                duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(duration, scheduler, config)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: typeof throttleTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timeInterval as higherOrder, TimeInterval } from '../operators/timeInterval';\nexport {TimeInterval};\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<TimeInterval<T>> {\n  return higherOrder(scheduler)(this) as Observable<TimeInterval<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeInterval } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: typeof timeInterval;\n  }\n}","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { timeout as higherOrder } from '../operators/timeout';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(this: Observable<T>,\n                           due: number | Date,\n                           scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(due, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: typeof timeout;\n  }\n}","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable, ObservableInput } from '../Observable';\nimport { timeoutWith as higherOrder } from '../operators/timeoutWith';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): Observable<T | R> {\n  return higherOrder(due, withObservable, scheduler)(this as any);\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: typeof timeoutWith;\n  }\n}","\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\nimport { map } from './map';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(scheduler: IScheduler = async): OperatorFunction<T, Timestamp<T>> {\n  return map((value: T) => new Timestamp(value, scheduler.now()));\n  // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timestamp as higherOrder } from '../operators/timestamp';\nimport { Timestamp } from '../operators/timestamp';\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<Timestamp<T>> {\n  return higherOrder(scheduler)(this) as Observable<Timestamp<T>>;\n}\n","import { Observable } from '../../Observable';\r\nimport { timestamp } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: typeof timestamp;\r\n  }\r\n}","import { reduce } from './reduce';\nimport { OperatorFunction } from '../interfaces';\n\nfunction toArrayReducer<T>(arr: T[], item: T, index: number) {\n  if (index === 0) {\n    return [item];\n  }\n  arr.push(item);\n  return arr;\n}\n\nexport function toArray<T>(): OperatorFunction<T, T[]> {\n  return reduce(toArrayReducer, []) as OperatorFunction<T, T[]>;\n}\n","\nimport { Observable } from '../Observable';\nimport { toArray as higherOrder } from '../operators/toArray';\n\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * <img src=\"./img/toArray.png\" width=\"100%\">\n *\n * `toArray` will wait until the source Observable completes\n * before emitting the array containing all emissions.\n * When the source Observable errors no array will be emitted.\n *\n * @example <caption>Create array from input</caption>\n * const input = Rx.Observable.interval(100).take(4);\n *\n * input.toArray()\n *   .subscribe(arr => console.log(arr)); // [0,1,2,3]\n *\n * @see {@link buffer}\n *\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(this: Observable<T>): Observable<T[]> {\n  return higherOrder()(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: typeof toArray;\n  }\n}","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { window as higherOrder } from '../operators/window';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(this: Observable<T>, windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return higherOrder(windowBoundaries)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { window } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: typeof window;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowCount as higherOrder } from '../operators/windowCount';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(this: Observable<T>, windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return higherOrder(windowSize, startWindowEvery)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: typeof windowCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { windowTime as higherOrder } from '../operators/windowTime';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\n\nexport function windowTime<T>(this: Observable<T>,\n                              windowTimeSpan: number): Observable<Observable<T>> {\n\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return higherOrder(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: typeof windowTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowToggle as higherOrder } from '../operators/windowToggle';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(this: Observable<T>, openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(openings, closingSelector)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: typeof windowToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowWhen as higherOrder } from '../operators/windowWhen';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(closingSelector)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: typeof windowWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { withLatestFrom as higherOrder } from '../operators/withLatestFrom';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function withLatestFrom<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function withLatestFrom<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function withLatestFrom<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(this: Observable<T>, ...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...args)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: typeof withLatestFrom;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { zip as higherOrder } from '../operators/zip';\n\n/* tslint:disable:max-line-length */\nexport function zipProto<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function zipProto<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipProto<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function zipProto<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipProto<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipProto<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipProto<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipProto<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function zipProto<T>(this: Observable<T>, ...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipProto<T, R>(this: Observable<T>, array: Array<ObservableInput<T>>): Observable<R>;\nexport function zipProto<T, TOther, R>(this: Observable<T>, array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipProto } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: typeof zipProto;\n  }\n}","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new ZipOperator(project));\n}\n","import { Observable } from '../Observable';\nimport { zipAll as higherOrder } from '../operators/zipAll';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: typeof zipAll;\n  }\n}","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (this: ColdObservable<T>, subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): ColdObservable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): HotObservable<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","export { audit } from './operators/audit';\nexport { auditTime } from './operators/auditTime';\nexport { buffer } from './operators/buffer';\nexport { bufferCount } from './operators/bufferCount';\nexport { bufferTime } from './operators/bufferTime';\nexport { bufferToggle } from './operators/bufferToggle';\nexport { bufferWhen } from './operators/bufferWhen';\nexport { catchError } from './operators/catchError';\nexport { combineAll } from './operators/combineAll';\nexport { combineLatest } from './operators/combineLatest';\nexport { concat } from './operators/concat';\nexport { concatAll } from './operators/concatAll';\nexport { concatMap } from './operators/concatMap';\nexport { concatMapTo } from './operators/concatMapTo';\nexport { count } from './operators/count';\nexport { debounce } from './operators/debounce';\nexport { debounceTime } from './operators/debounceTime';\nexport { defaultIfEmpty } from './operators/defaultIfEmpty';\nexport { delay } from './operators/delay';\nexport { delayWhen } from './operators/delayWhen';\nexport { dematerialize } from './operators/dematerialize';\nexport { distinct } from './operators/distinct';\nexport { distinctUntilChanged } from './operators/distinctUntilChanged';\nexport { distinctUntilKeyChanged } from './operators/distinctUntilKeyChanged';\nexport { elementAt } from './operators/elementAt';\nexport { every } from './operators/every';\nexport { exhaust } from './operators/exhaust';\nexport { exhaustMap } from './operators/exhaustMap';\nexport { expand } from './operators/expand';\nexport { filter } from './operators/filter';\nexport { finalize } from './operators/finalize';\nexport { find } from './operators/find';\nexport { findIndex } from './operators/findIndex';\nexport { first } from './operators/first';\nexport { groupBy } from './operators/groupBy';\nexport { ignoreElements } from './operators/ignoreElements';\nexport { isEmpty } from './operators/isEmpty';\nexport { last } from './operators/last';\nexport { map } from './operators/map';\nexport { mapTo } from './operators/mapTo';\nexport { materialize } from './operators/materialize';\nexport { max } from './operators/max';\nexport { merge } from './operators/merge';\nexport { mergeAll } from './operators/mergeAll';\nexport { mergeMap } from './operators/mergeMap';\nexport { mergeMap as flatMap } from './operators/mergeMap';\nexport { mergeMapTo } from './operators/mergeMapTo';\nexport { mergeScan } from './operators/mergeScan';\nexport { min } from './operators/min';\nexport { multicast } from './operators/multicast';\nexport { observeOn } from './operators/observeOn';\nexport { onErrorResumeNext } from './operators/onErrorResumeNext';\nexport { pairwise } from './operators/pairwise';\nexport { partition } from './operators/partition';\nexport { pluck } from './operators/pluck';\nexport { publish } from './operators/publish';\nexport { publishBehavior } from './operators/publishBehavior';\nexport { publishLast } from './operators/publishLast';\nexport { publishReplay } from './operators/publishReplay';\nexport { race } from './operators/race';\nexport { reduce } from './operators/reduce';\nexport { repeat } from './operators/repeat';\nexport { repeatWhen } from './operators/repeatWhen';\nexport { retry } from './operators/retry';\nexport { retryWhen } from './operators/retryWhen';\nexport { refCount } from './operators/refCount';\nexport { sample } from './operators/sample';\nexport { sampleTime } from './operators/sampleTime';\nexport { scan } from './operators/scan';\nexport { sequenceEqual } from './operators/sequenceEqual';\nexport { share } from './operators/share';\nexport { shareReplay } from './operators/shareReplay';\nexport { single } from './operators/single';\nexport { skip } from './operators/skip';\nexport { skipLast } from './operators/skipLast';\nexport { skipUntil } from './operators/skipUntil';\nexport { skipWhile } from './operators/skipWhile';\nexport { startWith } from './operators/startWith';\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './operators/subscribeOn';\nexport { switchAll } from './operators/switchAll';\nexport { switchMap } from './operators/switchMap';\nexport { switchMapTo } from './operators/switchMapTo';\nexport { take } from './operators/take';\nexport { takeLast } from './operators/takeLast';\nexport { takeUntil } from './operators/takeUntil';\nexport { takeWhile } from './operators/takeWhile';\nexport { tap } from './operators/tap';\nexport { throttle } from './operators/throttle';\nexport { throttleTime } from './operators/throttleTime';\nexport { timeInterval } from './operators/timeInterval';\nexport { timeout } from './operators/timeout';\nexport { timeoutWith } from './operators/timeoutWith';\nexport { timestamp } from './operators/timestamp';\nexport { toArray } from './operators/toArray';\nexport { window } from './operators/window';\nexport { windowCount } from './operators/windowCount';\nexport { windowTime } from './operators/windowTime';\nexport { windowToggle } from './operators/windowToggle';\nexport { windowWhen } from './operators/windowWhen';\nexport { withLatestFrom } from './operators/withLatestFrom';\nexport { zip } from './operators/zip';\nexport { zipAll } from './operators/zipAll';\n","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject, AnonymousSubject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/shareReplay';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipLast';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {TimeoutError} from './util/TimeoutError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operators/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\nexport { pipe } from './util/pipe';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { rxSubscriber } from './symbol/rxSubscriber';\nimport { iterator } from './symbol/iterator';\nimport { observable } from './symbol/observable';\n\nimport * as _operators from './operators';\n\nexport const operators = _operators;\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n","\"use strict\";var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=void 0;var _Provider=_interopRequireDefault(require(\"./Provider\")),_Rx=require(\"rxjs/Rx\");/**\n * A provider that uses the MessagePort postMessage API to pass messages between windows.\n *\n * @param {Object} [target=self] An MessagePort (WebWorker instances are inherently MessagePorts).\n * @class MessagePortMessage\n * @extends {Provider}\n */class MessagePortMessage extends _Provider.default{// eslint-disable-next-line no-undef\nconstructor(target=self){super(),this.target=target}/**\n   * An observable of messages being sent to this provider.\n   *\n   * @memberof MessagePortMessage\n   * @instance\n   * @returns {Observable}\n   */messages(){return _Rx.Observable.fromEvent(this.target,\"message\",!1).filter(event=>// We can't use event.source in WebWorker messages as it seems to be null\n// However, the fallback to check the target should always be true\n(event.source||event.target)===this.target).pluck(\"data\")}/**\n   * Send a payload to the underlying target of this provider.\n   *\n   * @param {Object} payload\n   * @memberof MessagePortMessage\n   * @instance\n   */send(payload){this.target.postMessage(payload)}}exports.default=MessagePortMessage;","\"use strict\";var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=void 0;var _Provider=_interopRequireDefault(require(\"./Provider\")),_Rx=require(\"rxjs/Rx\");/**\n * A provider that uses the Window postMessage API to pass messages between windows.\n *\n * @param {Object} [target=window.parent] An window implementing the postMessage API.\n * @class WindowMessage\n * @extends {Provider}\n */class WindowMessage extends _Provider.default{constructor(target=window.parent){super(),this.target=target}/**\n   * An observable of messages being sent to this provider.\n   *\n   * @memberof WindowMessage\n   * @instance\n   * @returns {Observable}\n   */messages(){return _Rx.Observable.fromEvent(window,\"message\",!1).filter(event=>event.source===this.target).pluck(\"data\")}/**\n   * Send a payload to the underlying target of this provider.\n   *\n   * @param {Object} payload\n   * @memberof WindowMessage\n   * @instance\n   */send(payload){this.target.postMessage(payload,\"*\")}}exports.default=WindowMessage;","\"use strict\";var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _Provider=_interopRequireDefault(require(\"./Provider\"));Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=void 0;/**\n * A development message provider that communicates using an RxJS subject.\n *\n * Example:\n *\n * ```js\n * // Message bus used to pass messages between apps and the wrapper\n * const bus = new Subject()\n *\n * // Set up app\n * const app = new App(\n *   new Messenger(new DevMessage('app', 'wrapper', bus))\n * )\n *\n * // Run app\n * wrapper.runApp(\n *   new DevMessage('wrapper', 'app', bus),\n *   '0xbitconnect'\n * )\n * ```\n *\n * @param {string} id The ID of this specific entity (e.g. \"wrapper\")\n * @param {string} target The ID of the target entity to communicate with (e.g. \"app\")\n * @param {Subject} bus A shared RxJS subject used to communicate between different entities\n * @class DevMessage\n * @extends {Provider}\n */class DevMessage extends _Provider.default{constructor(id,target,bus){super(),this.id=id,this.target=target,this.bus=bus}messages(){return this.bus.filter(event=>event.target===this.id)}send(payload){this.bus.next(Object.assign(payload,{target:this.target}))}}exports.default=DevMessage;","\"use strict\";var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=exports.providers=void 0;var _jsonrpc=_interopRequireDefault(require(\"./jsonrpc\")),_MessagePortMessage=_interopRequireDefault(require(\"./providers/MessagePortMessage\")),_WindowMessage=_interopRequireDefault(require(\"./providers/WindowMessage\")),_DevMessage=_interopRequireDefault(require(\"./providers/DevMessage\"));const providers={MessagePortMessage:_MessagePortMessage.default,WindowMessage:_WindowMessage.default,DevMessage:_DevMessage.default/**\n * The RPC messenger used for sending requests and responses between contexts.\n *\n * @param {Provider} [provider=MessagePortMessage] The underlying provider that passes messages\n * @class Messenger\n */};exports.providers=providers;class Messenger{constructor(provider=new _MessagePortMessage.default){this.provider=provider}/**\n   * Get the message bus of incoming messages\n   *\n   * @returns {Observable}\n   * @memberof Messenger\n   * @instance\n   */bus(){return this.provider.messages()}/**\n   * Get requests from the message bus.\n   *\n   * @returns {Observable}\n   * @memberof Messenger\n   * @instance\n   */requests(){return this.bus().filter(message=>!_jsonrpc.default.isValidResponse(message))}/**\n   * Get responses from the message bus.\n   *\n   * @returns {Observable}\n   * @memberof Messenger\n   * @instance\n   */responses(){return this.bus().filter(_jsonrpc.default.isValidResponse)}/**\n   * Send a response\n   *\n   * @param {string} id The ID of the request being responded to.\n   * @param {any} result The result of the request.\n   * @returns {string}\n   * @memberof Messenger\n   * @instance\n   */sendResponse(id,result){const payload=_jsonrpc.default.encodeResponse(id,result);return this.provider.send(payload),payload.id}/**\n   * Send a request\n   *\n   * @param {string} method The method name to call\n   * @param {Array<any>} [params=[]] The parameters to send with the call\n   * @returns {string} The ID of the payload that was sent\n   * @memberof Messenger\n   * @instance\n   */send(method,params=[]){const payload=_jsonrpc.default.encodeRequest(method,params);return this.provider.send(payload),payload.id}/**\n   * Helper method to send a request and listen for responses to that request\n   *\n   * @param {string} method The method name to call\n   * @param {Array<any>} [params=[]] The parameters to send with the call\n   * @returns {Observable} An observable of responses to the sent request\n   * @memberof Messenger\n   * @instance\n   */sendAndObserveResponses(method,params=[]){const id=this.send(method,params);return this.responses().filter(message=>message.id===id)}/**\n   * Helper method to send a request and listen for a single response to that request\n   *\n   * @param {string} method The method name to call\n   * @param {Array<any>} [params] The parameters to send with the call\n   * @returns {Observable} An observable that resolves to the response\n   * @memberof Messenger\n   * @instance\n   */sendAndObserveResponse(method,params=[]){return this.sendAndObserveResponses(method,params).first()}}exports.default=Messenger;","import Messenger, { providers } from '@aragon/messenger'\nimport { defer } from 'rxjs/observable/defer'\nimport { empty } from 'rxjs/observable/empty'\nimport { fromPromise } from 'rxjs/observable/fromPromise'\nimport { merge } from 'rxjs/observable/merge'\n\nexport const AppProxyHandler = {\n  get (target, name, receiver) {\n    if (name in target) {\n      return target[name]\n    }\n\n    return function (...params) {\n      return target.rpc.sendAndObserveResponse(\n        'intent',\n        [name, ...params]\n      ).pluck('result')\n    }\n  }\n}\n\n/**\n * A JavaScript proxy that wraps RPC calls to the wrapper.\n */\nexport class AppProxy {\n  constructor (provider) {\n    this.rpc = new Messenger(provider)\n  }\n\n  /**\n   * Get an array of the accounts the user currently controls over time.\n   *\n   * @return {Observable}\n   */\n  accounts () {\n    return this.rpc.sendAndObserveResponses(\n      'accounts'\n    ).pluck('result')\n  }\n\n  /**\n   * Get the network the app is connected to over time.\n   *\n   * @return {Observable}\n   */\n  network () {\n    return this.rpc.sendAndObserveResponses(\n      'network'\n    ).pluck('result')\n  }\n\n  /**\n   * Set the app identifier.\n   *\n   * An app identifier is a way to distinguish multiple instances\n   * of the same app.\n   *\n   * Examples include: the name of a token that the app manages,\n   * the type of content that a TCR is curating, the name of a group etc.\n   *\n   * @param  {string} identifier\n   * @return {void}\n   */\n  identify (identifier) {\n    this.rpc.send(\n      'identify',\n      [identifier]\n    )\n  }\n\n  /**\n   * Get events from the application contract.\n   *\n   * @memberof AppProxy\n   * @return {Observable} An observable of contract events (as defined in Web3)\n   */\n  events () {\n    return defer(\n      () => this.rpc.sendAndObserveResponses(\n        'events'\n      ).pluck('result')\n    )\n  }\n\n  /**\n   * Create a handle to an external contract.\n   *\n   * @param  {string} address The address of the external contract\n   * @param  {Array<Object>} jsonInterface The JSON interface of the external contract\n   * @return {Object}\n   */\n  external (address, jsonInterface) {\n    const contract = {\n      events: (fromBlock = 0) => {\n        return defer(\n          () => this.rpc.sendAndObserveResponses(\n            'external_events',\n            [\n              address,\n              jsonInterface.filter(\n                (item) => item.type === 'event'\n              ),\n              fromBlock\n            ]\n          ).pluck('result')\n        )\n      }\n    }\n\n    // Bind calls\n    const callMethods = jsonInterface.filter(\n      (item) => item.type === 'function' && item.constant\n    )\n    callMethods.forEach((methodJsonInterface) => {\n      contract[methodJsonInterface.name] = (...params) => {\n        return this.rpc.sendAndObserveResponse(\n          'external_call',\n          [address, methodJsonInterface, ...params]\n        ).pluck('result')\n      }\n    })\n\n    return contract\n  }\n\n  /**\n   * Cache a value for the application.\n   *\n   * @memberof AppProxy\n   * @param  {string} key   The cache key\n   * @param  {string} value The value to cache\n   * @return {string}       Will pass through `value`\n   */\n  cache (key, value) {\n    this.rpc.send(\n      'cache',\n      ['set', key, value]\n    )\n\n    return value\n  }\n\n  /**\n   * Observe the application state.\n   *\n   * @memberof AppProxy\n   * @return {Observable} An observable of application states over time.\n   */\n  state () {\n    return this.rpc.sendAndObserveResponses(\n      'cache',\n      ['get', 'state']\n    ).pluck('result')\n  }\n\n  /**\n   * Listens for events, passes them through `reducer`, caches the resulting state\n   * and returns that state.\n   *\n   * The reducer takes the signature `(state, event)` a lá Redux.\n   *\n   * Optionally takes an array of other web3 event observables to merge with this app's events\n   *\n   * @memberof AppProxy\n   * @param  {reducer}      reducer\n   * @param  {Observable[]} [events]\n   * @return {Observable}   An observable of the resulting state from reducing events\n   */\n  store (reducer, events = [empty()]) {\n    const initialState = this.state().first()\n\n    // Wrap the reducer in another reducer that\n    // allows us to execute code asynchronously\n    // in our reducer. That's a lot of reducing.\n    //\n    // This is needed for the `mergeScan` operator.\n    // Also, this supports both sync and async code\n    // (because of the `Promise.resolve`).\n    const wrappedReducer = (state, event) =>\n      fromPromise(\n        Promise.resolve(reducer(state, event))\n      )\n\n    const store$ = initialState\n      .switchMap((initialState) =>\n        merge(\n          this.events(),\n          ...events\n        )\n          .mergeScan(wrappedReducer, initialState, 1)\n          .map((state) => this.cache('state', state))\n      )\n      .publishReplay(1)\n    store$.connect()\n\n    return store$\n  }\n\n  /**\n   * Perform a call to the application contract.\n   *\n   * @memberof AppProxy\n   * @param  {string} method The method to call\n   * @param  {...*} params Parameters for the call\n   * @return {Observable} An observable that emits the return value(s) of the call.\n   */\n  call (method, ...params) {\n    return this.rpc.sendAndObserveResponse(\n      'call',\n      [method, ...params]\n    ).pluck('result')\n  }\n\n  /**\n   * Send a notification.\n   *\n   * @memberof AppProxy\n   * @param {string} title The notification title\n   * @param {string} body The notification body\n   * @param {object} [context={}] The application context to send back if the notification is clicked\n   * @param {Date} [date=new Date()] The notification timestamp\n   * @return {void}\n   */\n  notify (title, body, context = {}, date = new Date()) {\n    return this.rpc.send(\n      'notification',\n      [title, body, context, date]\n    )\n  }\n\n  /**\n   * Listen for app contexts sent from the wrapper.\n   *\n   * An app context is sent from the wrapper and correspond to a specific view\n   * in your app.\n   *\n   * For example, when sending a notification, you can optionally supply an\n   * app context. If the notification is clicked, the app is loaded and\n   * the context is sent back to the app.\n   *\n   * @return {Observable} An observable of incoming app contexts\n   */\n  context () {\n    return this.rpc.requests()\n      .filter((request) => request.method === 'context')\n      .map((request) => request.params[0])\n  }\n\n  /**\n   * Describes the transaction path that an EVM callscript encodes.\n   *\n   * @param  {string} script\n   * @return {Observable} An observable that emits the transaction path the script encodes\n   */\n  describeScript (script) {\n    return this.rpc.sendAndObserveResponse(\n      'describe_script',\n      [script]\n    ).pluck('result')\n  }\n\n  /**\n   * Invoke a whitelisted web3.eth function.\n   *\n   * @param  {string} method The method to call. Must be in the whitelisted group (mostly getters).\n   * @param  {...*} params Parameters for the call\n   * @return {Observable} An observable that emits the return value(s) of the call.\n   */\n  web3Eth (method, ...params) {\n    return this.rpc.sendAndObserveResponse(\n      'web3_eth',\n      [method, ...params]\n    ).pluck('result')\n  }\n}\n\n/**\n * An Aragon app.\n *\n * This class handles communicating with the wrapper using Aragon RPC.\n *\n * The class itself contains \"magic methods\", that is, undefined methods\n * will instead become an intent that is sent to the wrapper.\n *\n * For example:\n *\n * ```js\n * app.transfer('foo', 'bar')\n * ```\n *\n * will result in an intent to send a transaction to the application proxy,\n * invoking the contract function `transfer` with the parameters `foo` and `bar`.\n *\n * @param {Object} [provider=MessagePortMessage] An RPC provider (will default to using the MessagePort API)\n */\nexport default class AragonApp {\n  constructor (provider = new providers.MessagePortMessage()) {\n    return new Proxy(\n      new AppProxy(provider),\n      AppProxyHandler\n    )\n  }\n}\n\n// Re-export the Aragon RPC providers\nexport { providers }\n","// Load all RxJS requirements here\n\nimport 'rxjs/add/operator/first' // Make sure observables have .first\nexport { combineLatest } from 'rxjs/observable/combineLatest'\nexport { of } from 'rxjs/observable/of'\n","module.exports = {\n  depositerABI: [{\"constant\":false,\"inputs\":[{\"name\":\"finance\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"many\",\"type\":\"uint256\"},{\"name\":\"why\",\"type\":\"string\"}],\"name\":\"pleaseAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_factory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\n  rinkeby: {\n    factory: '0xff4E0FE747f999a07AB03eBf3c8B3B5232Ef2350',\n    depositer: '0x39a4d265db942361d92e2b0039cae73ea72a2ff9',\n    tokens: [\n      '0x0d5263b7969144a852d58505602f630f9b20239d',\n      '0x6142214d83670226872d51e935fb57bec8832a60',\n      '0x1e1cab55639f67e70973586527ec1dfdaf9bf764',\n      '0x5e381afb0104d374f1f3ccde5ba7fe8f5b8af0e6',\n      '0xa53899a7eb70b309f05f8fdb344cdc8c8f272abe',\n      '0x5b2fdbba47e8ae35b9d6f8e1480703334f48b96c',\n      '0x51e53b52555a4ab7227423a7761cc8e418b147c8',\n      '0xc42da14b1c0ae7d4dd3946633f1046c3d46f3101',\n      '0x4fc6e3b791560f25ed4c1bf5e2db9ab0d0e80747'\n    ]\n  }\n}\n","import testTokens from '@aragon/templates-tokens'\n\nexport const getTestTokenAddresses = (network = 'rinkeby') =>\n  (testTokens[network] && testTokens[network].tokens) || []\n","/**\n * List of verified mainnet token addresses.\n *\n * Generated from the list at https://github.com/MyCryptoHQ/MyCrypto/blob/515cd781324b26fe6990bd84da604cca7f55dfde/common/config/tokens/eth.json\n * tokens.forEach(token => console.log(`['${token.symbol}', '${token.address.toLowerCase()}'],`))\n */\n/* eslint-disable */\nconst VERIFIED_TOKENS = [\n  ['AION', '0x4ceda7906a5ed2179785cd3a40a69ee8bc99c466'],\n  ['WINGS', '0x667088b212ce3d06a1b553a7221e1fd19000d9af'],\n  ['DGPT', '0xf6cfe53d6febaeea051f400ff5fc14f0cbbdaca1'],\n  ['TRX', '0xf230b790e05390fc8295f4d3f60332c93bed42e2'],\n  ['REN', '0x408e41876cccdc0f92210600ef50372656052a38'],\n  ['SGT (SelfieYo Gold Token)', '0x37427576324fe1f3625c9102674772d7cf71377d'],\n  ['SGT (SGT)', '0xd248b0d48e44aaf9c49aea0312be7e13a6dc1468'],\n  ['ATL', '0x78b7fada55a64dd895d8c8c35779dd8b67fa8a05'],\n  ['BTH', '0xfad572db566e5234ac9fc3d570c4edc0050eaa92'],\n  ['SCANDI', '0x78fe18e41f436e1981a3a60d1557c8a7a9370461'],\n  ['Hdp.ф', '0x84543f868ec1b1fac510d49d13c069f64cd2d5f9'],\n  ['CPEX', '0xb787d4eac8899730bb8c57fc3c998c49c5244ec0'],\n  ['SNGLS', '0xaec2e87e0a235266d9c5adc9deb4b2e29b54d009'],\n  ['MUXE', '0x515669d308f887fd83a471c7764f5d084886d34d'],\n  ['GTKT', '0x025abad9e518516fdaafbdcdb9701b37fb7ef0fa'],\n  ['ARXT', '0xb0d926c1bc3d78064f3e1075d5bd9a24f35ae6c5'],\n  ['STRC', '0x46492473755e8df960f8034877f61732d718ce96'],\n  ['PTC', '0x2a8e98e256f32259b5e5cb55dd63c8e891950666'],\n  ['CVC', '0x41e5560054824ea6b0732e656e3ad64e20e94e45'],\n  ['CLN', '0x4162178b78d6985480a308b2190ee5517460406d'],\n  ['LNC-Linker Coin', '0x6beb418fc6e1958204ac8baddcf109b8e9694966'],\n  ['CTL', '0xbf4cfd7d1edeeea5f6600827411b41a21eb08abd'],\n  ['ZCS', '0x7a41e0517a5eca4fdbc7fbeba4d4c47b9ff6dc63'],\n  ['RLTY', '0xbe99b09709fc753b09bcf557a992f6605d5997b0'],\n  ['RLX', '0x4a42d2c580f83dce404acad18dab26db11a1750e'],\n  ['RTN', '0x54b293226000ccbfc04df902eec567cb4c35a903'],\n  ['LPT', '0x58b6a8a3302369daec383334672404ee733ab239'],\n  ['CARD', '0x954b890704693af242613edef1b603825afcd708'],\n  ['PLU', '0xd8912c10681d8b21fd3742244f44658dba12264e'],\n  ['FLP', '0x3a1bda28adb5b0a812a7cf10a1950c920f79bcd3'],\n  ['IDEA', '0x814cafd4782d2e728170fda68257983f03321c58'],\n  ['DMT', '0x2ccbff3a042c68716ed2a2cb0c544a9f1d1935e1'],\n  ['WOLK (Wolk Token)', '0xf6b55acbbc49f4524aa48d19281a9a77c54de10f'],\n  ['WOLK (WOLK)', '0x728781e75735dc0962df3a51d7ef47e798a7107e'],\n  ['FAM', '0x190e569be071f40c704e15825f285481cb74b6cc'],\n  ['UMKA', '0x105d97ef2e723f1cfb24519bc6ff15a6d091a3f1'],\n  ['PATENTS', '0x694404595e3075a942397f466aacd462ff1a7bd0'],\n  ['BTQ', '0x16b0e62ac13a2faed36d18bce2356d25ab3cfad3'],\n  ['DLT', '0x07e3c70653548b04f0a75970c1f81b4cbbfb606f'],\n  ['NXX OLD', '0x5c6183d10a00cd747a6dbb5f658ad514383e9419'],\n  ['BCBC', '0x7367a68039d4704f30bfbf6d948020c3b07dfc59'],\n  ['AE', '0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d'],\n  ['KC', '0x0d6dd9f68d24ec1d5fe2174f3ec8dab52b52baf5'],\n  ['RLC', '0x607f4c5bb672230e8672085532f7e901544a7375'],\n  ['GANA (1)', '0x6754e21b9eaa053c62d7854dd6561ae451b0cbcf'],\n  ['GANA (2)', '0xc0ea6306f6360fe7dcab65d16bf1a3af92c79aa2'],\n  ['GTO', '0xc5bbae50781be1669306b9e001eff57a2957b09d'],\n  ['SWM', '0x9e88613418cf03dca54d6a2cf6ad934a78c7a17a'],\n  ['AVT', '0x0d88ed6e74bbfd96b831231638b66c05571e824f'],\n  ['OMG', '0xd26114cd6ee289accf82350c8d8487fedb8a0c07'],\n  ['DTT', '0xf9f7c29cfdf19fcf1f2aa6b84aa367bcf1bd1676'],\n  ['SMT (Social Media Market)', '0x78eb8dc641077f049f910659b6d580e80dc4d237'],\n  ['SMT (SmartMesh)', '0x55f93985431fc9304077687a35a1ba103dc1e081'],\n  ['SMT (Smart Node)', '0x2dcfaac11c9eebd8c6c42103fe9e2a6ad237af27'],\n  ['MRL', '0x82125afe01819dff1535d0d6276d57045291b6c0'],\n  ['$TEAK', '0x7dd7f56d697cc0f2b52bd55c057f378f1fe6ab4b'],\n  ['CATs (BitClave)_Old', '0x68e14bb5a45b9681327e16e528084b9d962c1a39'],\n  ['BMX', '0x986ee2b944c42d017f52af21c4c69b84dbea35d8'],\n  ['ARN', '0xba5f11b16b155792cf3b2e6880e8706859a8aeb6'],\n  ['KRL', '0x464ebe77c293e473b48cfe96ddcf88fcf7bfdac0'],\n  ['BCV', '0x1014613e2b3cbc4d575054d4982e580d9b99d7b1'],\n  ['PRPS (1)', '0xd94f2778e2b3913c53637ae60647598be588c570'],\n  ['PRPS (2)', '0x7641b2ca9ddd58addf6e3381c1f994aac5f1a32f'],\n  ['Devcon2 Token', '0xdd94de9cfe063577051a5eb7465d08317d8808b6'],\n  ['eBCH', '0xafc39788c51f0c1ff7b55317f3e70299e521fff6'],\n  ['BNB', '0xb8c77482e45f1f44de1745f52c74426c631bdd52'],\n  ['JetCoins', '0x773450335ed4ec3db45af74f34f2c85348645d39'],\n  ['PATH', '0xf813f3902bbc00a6dce378634d3b79d84f9803d7'],\n  ['IPL', '0x64cdf819d3e75ac8ec217b3496d7ce167be42e80'],\n  ['BOP', '0x7f1e2c7d6a69bf34824d72c53b4550e895c0d8c2'],\n  ['FTR', '0x2023dcf7c438c8c8c0b0f28dbae15520b4f3ee20'],\n  ['NAC', '0x8d80de8a78198396329dfa769ad54d24bf90e7aa'],\n  ['BCDT', '0xacfa209fb73bf3dd5bbfb1101b9bc999c49062a5'],\n  ['DROP (dropil)', '0x4672bad527107471cb5067a887f4656d585a8a31'],\n  ['TDH', '0x2a1dbabe65c595b0022e75208c34014139d5d357'],\n  ['DIVX', '0x13f11c9905a08ca76e3e853be63d4f0944326c72'],\n  ['MAN', '0xe25bcec5d3801ce3a794079bf94adf1b8ccd802d'],\n  ['DTH', '0x5adc961d6ac3f7062d2ea45fefb8d8167d44b190'],\n  ['EOS', '0x86fa049857e0209aa7d9e616f7eb3b3b78ecfdb0'],\n  ['FKX', '0x009e864923b49263c7f10d19b7f8ab7a9a5aad33'],\n  ['EMON', '0xb67b88a25708a35ae7c2d736d398d268ce4f7f83'],\n  ['SLT', '0x7a5ff295dc8239d5c2374e4d894202aaf029cab6'],\n  ['RBLX', '0xfc2c4d8f95002c14ed0a7aa65102cac9e5953b5e'],\n  ['RPL', '0xb4efd85c19999d84251304bda99e90b92300bd93'],\n  ['FUEL', '0xea38eaa3c86c8f9b751533ba2e562deb9acded40'],\n  ['ETCH', '0xdd74a7a3769fa72561b3a69e65968f49748c690c'],\n  ['FLIXX', '0xf04a8ac553fcedb5ba99a64799155826c136b0be'],\n  ['ALCO', '0x181a63746d3adcf356cbc73ace22832ffbb1ee5a'],\n  ['INS', '0x5b2e4a700dfbc560061e957edec8f6eeeb74a320'],\n  ['ATH (AIgatha Token)', '0x1543d0f83489e82a1344df6827b23d541f235a50'],\n  ['DGD', '0xe0b7927c4af23765cb51314a0e0521a9645f0e2a'],\n  ['MART', '0xfdcc07ab60660de533b5ad26e1457b565a9d59bd'],\n  ['POS', '0xee609fe292128cad03b786dbb9bc2634ccdbe7fc'],\n  ['LUN', '0xfa05a73ffe78ef8f1a739473e462c54bae6567d9'],\n  ['MRP', '0x21f0f0fd3141ee9e11b3d7f13a1028cd515f459c'],\n  ['FTC', '0xe6f74dcfa0e20883008d8c16b6d9a329189d0c30'],\n  ['SGEL', '0xa1ccc166faf0e998b3e33225a1a0301b1c86119d'],\n  ['300', '0xaec98a708810414878c3bcdf46aad31ded4a4557'],\n  ['IIC', '0x16662f73df3e79e54c6c5938b4313f92c524c120'],\n  ['RCN', '0xf970b8e36e23f7fc3fd752eea86f8be8d83375a6'],\n  ['VIT', '0x23b75bc7aaf28e2d6628c3f424b3882f8f072a3c'],\n  ['INXT', '0xa8006c4ca56f24d6836727d106349320db7fef82'],\n  ['CRED', '0x672a1ad4f667fb18a333af13667aa0af1f5b5bdd'],\n  ['AMO', '0x38c87aa89b2b8cd9b95b736e1fa7b612ea972169'],\n  ['SCL', '0xd7631787b4dcc87b1254cfd1e5ce48e96823dee8'],\n  ['DGX', '0x55b9a11c2e8351b4ffc7b11561148bfac9977855'],\n  ['C20', '0x26e75307fc0c021472feb8f727839531f112f317'],\n  ['XNN', '0xab95e915c123fded5bdfb6325e35ef5515f1ea69'],\n  ['RCT', '0x2a3aa9eca41e720ed46b5a70d6c37efa47f768ac'],\n  ['TNT', '0x08f5a9235b08173b7569f83645d2c7fb55e8ccd8'],\n  ['PRS', '0x163733bcc28dbf26b41a8cfa83e369b5b3af741b'],\n  ['CLP', '0x7fce2856899a6806eeef70807985fc7554c66340'],\n  ['DRGN', '0x419c4db4b9e25d6db2ad9691ccb832c8d9fda05e'],\n  ['ARCT', '0x1245ef80f4d9e02ed9425375e8f649b9221b31d8'],\n  ['KIN', '0x818fc6c2ec5986bc6e2cbf00939d90556ab12ce5'],\n  ['BERRY', '0x6aeb95f06cda84ca345c2de0f3b7f96923a44f4c'],\n  ['XID', '0xb110ec7b1dcb8fab8dedbf28f53bc63ea5bedd84'],\n  ['AX1', '0xcd4b4b0f3284a33ac49c67961ec6e111708318cf'],\n  ['ADL', '0x660e71483785f66133548b10f6926dc332b06e61'],\n  ['USDT', '0xdac17f958d2ee523a2206206994597c13d831ec7'],\n  ['BEE', '0x4d8fc1453a0f359e99c9675954e656d80d996fbf'],\n  ['SKO1', '0x4994e81897a920c0fea235eb8cedeed3c6fff697'],\n  ['DALC', '0x07d9e49ea402194bf48a8276dafb16e4ed633317'],\n  ['QAU', '0x671abbe5ce652491985342e85428eb1b07bc6c64'],\n  ['ARD', '0x75aa7b0d02532f3833b66c7f0ad35376d373ddf8'],\n  ['PLAY', '0xe477292f1b3268687a29376116b0ed27a9c76170'],\n  ['QTUM', '0x9a642d6b3368ddc662ca244badf32cda716005bc'],\n  ['BTT', '0x080aa07e2c7185150d7e4da98838a8d2feac3dfc'],\n  ['2DC', '0x9fc0583220eb44faee9e2dc1e63f39204ddd9090'],\n  ['ABYSS', '0x0e8d6b471e332f140e7d9dbb99e5e3822f728da6'],\n  ['CTG', '0xc87c5dd86a3d567ff28701886fb0745aaa898da4'],\n  ['TWNKL', '0xfbd0d1c77b501796a35d86cf91d65d9778eee695'],\n  ['FTT', '0x2aec18c5500f21359ce1bea5dc1777344df4c0dc'],\n  ['SND', '0xf333b2ace992ac2bbd8798bf57bc65a06184afba'],\n  ['FUCK (Finally Usable Crypto Karma)', '0x65be44c747988fbf606207698c944df4442efe19'],\n  ['FUCK (FinallyUsableCryptoKarma)', '0xab16e0d25c06cb376259cc18c1de4aca57605589'],\n  ['BST', '0x509a38b7a1cc0dcd83aa9d06214663d9ec7c7f4a'],\n  ['STX', '0x006bea43baa3f7a6f765f14f10a1a1b08334ef45'],\n  ['SXDT', '0x12b306fa98f4cbb8d4457fdff3a0a0a56f07ccdf'],\n  ['QTQ', '0x2c3c1f05187dba7a5f2dd47dca57281c4d4f183f'],\n  ['MAD', '0x5b09a0371c1da44a8e24d36bf5deb1141a84d875'],\n  ['POWR', '0x595832f8fc6bf59c85c527fec3740a1b7a361269'],\n  ['SPANK', '0x42d6622dece394b54999fbd73d108123806f6a18'],\n  ['ICOS', '0x014b50466590340d41307cc54dcee990c8d58aa8'],\n  ['PET', '0x5884969ec0480556e11d119980136a4c17edded1'],\n  ['AMB', '0x4dc3643dbc642b72c158e7f3d2ff232df61cb6ce'],\n  ['MNT', '0xa9877b1e05d035899131dbd1e403825166d09f92'],\n  ['TRC', '0xcb3f902bf97626391bf8ba87264bbc3dc13469be'],\n  ['MNE', '0x1a95b271b0535d15fa49932daba31ba612b52946'],\n  ['VIU', '0x519475b31653e46d20cd09f9fdcf3b12bdacb4f5'],\n  ['ZIL', '0x05f4a42e251f2d52b8ed15e9fedaacfcef1fad27'],\n  ['DUBI (1)', '0xd4cffeef10f60eca581b5e1146b5aca4194a4c3b'],\n  ['DUBI (2)', '0x9c6fa42209169bcea032e401188a6fc3e9c9f59c'],\n  ['ETHB', '0x3a26746ddb79b1b8e4450e3f4ffe3285a307387e'],\n  ['MSP', '0x68aa3f232da9bdc2343465545794ef3eea5209bd'],\n  ['OHNI (Ohni)', '0x6f539a9456a5bcb6334a1a41207c3788f5825207'],\n  ['OHNI (OHNI)', '0x7f2176ceb16dcb648dc924eff617c3dc2befd30d'],\n  ['LND', '0x0947b0e6d821378805c9598291385ce7c791a6b2'],\n  ['FLMC (1)', '0x04cc783b450b8d11f3c7d00dd03fdf7fb51fe9f2'],\n  ['FLMC (2)', '0x5976f7dac1525ef3277836043ba474a35e6b4272'],\n  ['PLR', '0xe3818504c1b32bf1557b16c238b2e01fd3149c17'],\n  ['NPER', '0x4ce6b362bc77a24966dda9078f9cef81b3b886a7'],\n  ['KICK', '0x27695e09149adc738a978e9a678f99e4c39e9eb9'],\n  ['ROCK', '0xa40106134c5bf4c41411554e6db99b95a15ed9d8'],\n  ['TFL', '0xa7f976c360ebbed4465c2855684d1aae5271efa9'],\n  ['BDG', '0x1961b3331969ed52770751fc718ef530838b6dee'],\n  ['HODL', '0xb45d7bc4cebcab98ad09babdf8c818b2292b672c'],\n  ['MRV', '0xab6cf87a50f17d7f5e1feaf81b6fe9ffbe8ebf84'],\n  ['DCN', '0x08d32b0da63e2c3bcf8019c9c5d849d7a9d791e6'],\n  ['SSH', '0x6e2050cbfb3ed8a4d39b64cc9f47e711a03a5a89'],\n  ['PLASMA', '0x59416a25628a76b4730ec51486114c32e0b582a1'],\n  ['HMQ', '0xcbcc0f036ed4788f63fc0fee32873d6a7487b908'],\n  ['DEB', '0x151202c9c18e495656f372281f493eb7698961d5'],\n  ['LEMO (1)', '0xb5ae848edb296c21259b7467331467d2647eecdf'],\n  ['LEMO (2)', '0xd6e354f07319e2474491d8c7c712137bee6862a2'],\n  ['CCC (ICONOMI)', '0xbe11eeb186e624b8f26a5045575a1340e4054552'],\n  ['DEEZ', '0x075c60ee2cd308ff47873b38bd9a0fa5853382c4'],\n  ['ALTS', '0x638ac149ea8ef9a1286c41b977017aa7359e6cfa'],\n  ['WCN', '0x8f936fe0faf0604c9c0ef2406bde0a65365515d6'],\n  ['IOST', '0xfa1a856cfa3409cfa145fa4e20eb270df3eb21ab'],\n  ['ENTRP', '0x5bc7e5f0ab8b2e10d2d0a3f21739fce62459aef3'],\n  ['HORSE', '0x5b0751713b2527d7f002c0c4e2a37e1219610a6b'],\n  ['PRON', '0xa3149e0fa0061a9007faf307074cdcd290f0e2fd'],\n  ['QASH', '0x618e75ac90b12c6049ba3b27f5d5f8651b0037f6'],\n  ['SS (1)', '0xb15fe5a123e647ba594cea7a1e648646f95eb4aa'],\n  ['SS (2)', '0xbbff862d906e348e9946bfb2132ecb157da3d4b4'],\n  ['DATACoin', '0x0cf0ee63788a0849fe5297f3407f701e122cc023'],\n  ['EMV', '0xb802b24e0637c2b87d2e8b7784c055bbe921011a'],\n  ['BRAT', '0x9e77d5a1251b6f7d456722a6eac6d2d5980bd891'],\n  ['CARE', '0xbf18f246b9301f231e9561b35a3879769bb46375'],\n  ['IMT', '0x22e5f62d0fa19974749faa194e3d3ef6d89c08d7'],\n  ['GVT', '0x103c3a209da59d3e7c4a89307e66521e081cfdf0'],\n  ['TIX', '0xea1f346faf023f974eb5adaf088bbcdf02d761f4'],\n  ['ENJ', '0xf629cbd94d3791c9250152bd8dfbdf380e2a3b9c'],\n  ['CTF', '0x4545750f39af6be4f237b6869d4ecca928fd5a85'],\n  ['SKIN', '0x2bdc0d42996017fce214b21607a515da41a9e0c5'],\n  ['CARCO', '0x2108e62d335bbdc89ec3e9d8582f18dcfb0cdff4'],\n  ['NBAI', '0x17f8afb63dfcdcc90ebe6e84f060cc306a98257d'],\n  ['MFG', '0x6710c63432a2de02954fc0f851db07146a6c0312'],\n  ['Ox Fina', '0x65a15014964f2102ff58647e16a16a6b9e14bcf6'],\n  ['ECO2', '0x17f93475d2a978f527c3f7c44abf44adfba60d5c'],\n  ['IFT', '0x7654915a1b82d6d2d0afc37c52af556ea8983c7e'],\n  ['COFI', '0x3136ef851592acf49ca4c825131e364170fa32b3'],\n  ['GBT', '0x7585f835ae2d522722d2684323a0ba83401f32f5'],\n  ['GTC', '0xb70835d7822ebb9426b56543e391846c107bd32c'],\n  ['INSTAR', '0xc72fe8e3dd5bef0f9f31f259399f301272ef2a2d'],\n  ['VRS', '0xedbaf3c5100302dcdda53269322f3730b1f0416d'],\n  ['DRP (Dripcoin)', '0x2799d90c6d44cb9aa5fbc377177f16c33e056b82'],\n  ['DRP (DCorp)', '0x621d78f2ef2fd937bfca696cabaf9a779f59b3ed'],\n  ['JBX', '0x0aaf561eff5bd9c8f911616933f84166a17cfe0c'],\n  ['AMIS', '0x949bed886c739f1a3273629b3320db0c5024c719'],\n  ['AVA', '0xed247980396b10169bb1d36f6e278ed16700a60f'],\n  ['LOK', '0x21ae23b882a340a22282162086bc98d3e2b73018'],\n  ['EVN', '0xd780ae2bf04cd96e577d3d014762f831d97129d0'],\n  ['OPT', '0x4355fc160f74328f9b383df2ec589bb3dfd82ba0'],\n  ['OLD_MKR', '0xc66ea802717bfb9833400264dd12c2bceaa34a6d'],\n  ['LA', '0xe50365f5d679cb98a1dd62d6f6e58e59321bcddf'],\n  ['eosDAC', '0x7e9e431a0b8c4d532c745b1043c7fa29a48d4fba'],\n  ['KPR', '0xb5c33f965c8899d255c34cdd2a3efa8abcbb3dea'],\n  ['ETBS', '0x1b9743f556d65e757c4c650b4555baf354cb8bd3'],\n  ['GIM', '0xae4f56f072c34c0a65b3ae3e4db797d831439d93'],\n  ['CFI', '0x12fef5e57bf45873cd9b62e9dbd7bfb99e32d73e'],\n  ['LIVE', '0x24a77c1f17c547105e14813e517be06b0040aa76'],\n  ['MEST', '0x5b8d43ffde4a2982b9a5387cdf21d54ead64ac8d'],\n  ['eBTC', '0xeb7c20027172e5d143fb030d50f91cece2d1485d'],\n  ['nCash', '0x809826cceab68c387726af962713b64cb5cb3cca'],\n  ['JET', '0x8727c112c712c4a03371ac87a74dd6ab104af768'],\n  ['ELTCOIN', '0x44197a4c44d6a059297caf6be4f7e172bd56caaf'],\n  ['COV', '0xe2fb6529ef566a080e6d23de0bd351311087d567'],\n  ['SYN', '0x10b123fddde003243199aad03522065dc05827a0'],\n  ['RIPT', '0xdd007278b667f6bef52fd0a4c23604aa1f96039a'],\n  ['ZST', '0xe386b139ed3715ca4b18fd52671bdcea1cdfe4b1'],\n  ['APT', '0x23ae3c5b39b12f0693e05435eeaa1e51d8c61530'],\n  ['EURT', '0xabdf147870235fcfc34153828c769a70b3fae01f'],\n  ['NET', '0xcfb98637bcae43c13323eaa1731ced2b716962fd'],\n  ['BNT', '0x1f573d6fb3f13d689ff844b4ce37794d79a7ff1c'],\n  ['VSL', '0x5c543e7ae0a1104f78406c340e9c64fd9fce5170'],\n  ['KNC', '0xdd974d5c2e2928dea5f71b9825b8b646686bd200'],\n  ['SIFT', '0x8a187d5285d316bcbc9adafc08b51d70a0d8e000'],\n  ['IXT', '0xfca47962d45adfdfd1ab2d972315db4ce7ccf094'],\n  ['FYN', '0x88fcfbc22c6d3dbaa25af478c578978339bde77a'],\n  ['DAN', '0x9b70740e708a083c6ff38df52297020f5dfaa5ee'],\n  ['SPARC', '0x58bf7df57d9da7113c4ccb49d8463d4908c735cb'],\n  ['BPT', '0x327682779bab2bf4d1337e8974ab9de8275a7ca8'],\n  ['1WO', '0xfdbc1adc26f0f8f8606a5d63b7d3a3cd21c22b23'],\n  ['PT', '0x66497a283e0a007ba3974e837784c6ae323447de'],\n  ['DDF', '0xcc4ef9eeaf656ac1a2ab886743e98e97e090ed38'],\n  ['STAR', '0xf70a642bd387f94380ffb90451c2c81d4eb82cbc'],\n  ['VIB', '0x2c974b2d0ba1716e644c1fc59982a89ddd2ff724'],\n  ['LEND', '0x80fb784b7ed66730e8b1dbd9820afd29931aab03'],\n  ['KEE', '0x72d32ac1c5e66bfc5b08806271f8eef915545164'],\n  ['SIG', '0x6888a16ea9792c15a4dcf2f6c623d055c8ede792'],\n  ['BOB', '0xdf347911910b6c9a4286ba8e2ee5ea4a39eb2134'],\n  ['GEE', '0x4f4f0db4de903b88f2b1a2847971e231d54f8fd3'],\n  ['NGC', '0x72dd4b6bd852a3aa172be4d6c5a6dbec588cf131'],\n  ['CTT', '0xe3fa177acecfb86721cf6f9f4206bd3bd672d7d5'],\n  ['BTL (Bitlle)', '0x92685e93956537c25bb75d5d47fca4266dd628b8'],\n  ['LYS', '0xdd41fbd1ae95c5d9b198174a28e04be6b3d1aa27'],\n  ['EVX', '0xf3db5fa2c66b7af3eb0c0b782510816cbe4813b8'],\n  ['SenSatorI', '0x4ca74185532dc1789527194e5b9c866dd33f4e82'],\n  ['VOC', '0xc3bc9eb71f75ec439a6b6c8e8b746fcf5b62f703'],\n  ['VIBEX (VIBEX)', '0xe8ff5c9c75deb346acac493c463c8950be03dfba'],\n  ['VIBEX (VIBEX Exchange Token)', '0x882448f83d90b2bf477af2ea79327fdea1335d93'],\n  ['ADST', '0x422866a8f0b032c5cf1dfbdef31a20f4509562b0'],\n  ['QRL', '0x697beac28b09e122c4332d163985e8a73121b97f'],\n  ['SOL', '0x1f54638b7737193ffd86c19ec51907a7c41755d8'],\n  ['LGO', '0x123ab195dd38b1b40510d467a6a359b201af056f'],\n  ['MIT (Mychatcoin)', '0xad8dd4c725de1d31b9e8f8d146089e9dc6882093'],\n  ['LUM', '0xa89b5934863447f6e4fc53b315a93e873bda69a3'],\n  ['LIF', '0xeb9951021698b42e4399f9cbb6267aa35f82d59d'],\n  ['BMC', '0xdf6ef343350780bf8c3410bf062e0c015b1dd671'],\n  ['X8X', '0x910dfc18d6ea3d6a7124a6f8b5458f281060fa4c'],\n  ['UQC', '0xd01db73e047855efb414e6202098c4be4cd2423b'],\n  ['DTX', '0x765f0c16d1ddc279295c1a7c24b0883f62d33f75'],\n  ['STN', '0x599346779e90fc3f5f997b5ea715349820f91571'],\n  ['FLX', '0x70b147e01e9285e7ce68b9ba437fe3a9190e756a'],\n  ['ZMN', '0x554ffc77f4251a9fb3c0e3590a6a205f8d4e067d'],\n  ['ICN', '0x888666ca69e0f178ded6d75b5726cee99a87d698'],\n  ['AST', '0x27054b13b1b798b345b591a4d22e6562d47ea75a'],\n  ['BCDN', '0x1e797ce986c3cff4472f7d38d5c4aba55dfefe40'],\n  ['COSS (1)', '0x65292eeadf1426cd2df1c4793a3d7519f253913b'],\n  ['COSS (2)', '0x9e96604445ec19ffed9a5e8dd7b50a29c899a10c'],\n  ['LDC', '0x5102791ca02fc3595398400bfe0e33d7b6c82267'],\n  ['NULS', '0xb91318f35bdb262e9423bc7c7c2a3a93dd93c92c'],\n  ['SEXY', '0x98f5e9b7f0e33956c0443e81bf7deb8b5b1ed545'],\n  ['SNIP', '0x44f588aeeb8c44471439d1270b3603c66a9262f1'],\n  ['MCAP', '0x93e682107d1e9defb0b5ee701c71707a4b2e46bc'],\n  ['eGAS', '0xb53a96bcbdd9cf78dff20bab6c2be7baec8f00f8'],\n  ['CARB', '0xa517a46baad6b054a76bd19c46844f717fe69fea'],\n  ['EDC', '0xfa1de2ee97e4c10c94c91cb2b5062b89fb140b82'],\n  ['JOY', '0xdde12a12a6f67156e0da672be05c374e1b0a3e57'],\n  ['LRC', '0xef68e7c694f40c8202821edf525de3782458639f'],\n  ['PPP', '0xc42209accc14029c1012fb5680d95fbd6036e2a0'],\n  ['PPT', '0xd4fa1460f537bb9085d22c7bccb5dd450ef28e3a'],\n  ['RVL', '0x41f615e24fabd2b097a320e9e6c1f448cb40521c'],\n  ['FANX', '0x7f6715c3fc4740a02f70de85b9fd50ac6001fed9'],\n  ['GNT', '0xa74476443119a942de498590fe1f2454d7d4ac0d'],\n  ['CPY', '0xf44745fbd41f6a1ba151df190db0564c5fcc4410'],\n  ['PXT', '0xc14830e53aa344e8c14603a91229a0b925b0b262'],\n  ['DOW (1)', '0x76974c7b79dc8a6a109fd71fd7ceb9e40eff5382'],\n  ['DOW (2)', '0xeef6e90034eea89e31eb4b8eacd323f28a92eae4'],\n  ['KZN', '0x9541fd8b9b5fa97381783783cebf2f5fa793c262'],\n  ['EAGLE', '0x994f0dffdbae0bbf09b652d6f11a493fd33f42b9'],\n  ['VEE', '0x340d2bde5eb28c1eed91b2f790723e3b160613b7'],\n  ['STORM', '0xd0a4b8946cb52f0661273bfbc6fd0e0c75fc6433'],\n  ['IMC', '0xe3831c5a982b279a198456d577cfb90424cb6340'],\n  ['BKX', '0x45245bc59219eeaaf6cd3f382e078a461ff9de7b'],\n  ['QRG', '0xffaa5ffc455d9131f8a2713a741fd1960330508b'],\n  ['NOX', '0xec46f8207d766012454c408de210bcbc2243e71c'],\n  ['WHEN', '0xf4fe95603881d0e07954fd7605e0e9a916e42c44'],\n  ['CMBT', '0x3edd235c3e840c1f29286b2e39370a255c7b6fdb'],\n  ['ICO', '0xa33e729bf4fdeb868b534e1f20523463d9c46bee'],\n  ['CC3', '0xc166038705ffbab3794185b3a9d925632a1df37d'],\n  ['COIL', '0x0c91b015aba6f7b4738dcd36e7410138b29adc29'],\n  ['TEL', '0x85e076361cc813a908ff672f9bad1541474402b2'],\n  ['WPC', '0x62087245087125d3db5b9a3d713d78e7bbc31e54'],\n  ['PTOY', '0x8ae4bf2c33a8e667de34b54938b0ccd03eb8cc06'],\n  ['CAG', '0x7d4b8cce0591c9044a22ee543533b72e976e36c3'],\n  ['DAT', '0x81c9151de0c8bafcd325a57e3db5a5df1cebf79c'],\n  ['AIX', '0x1063ce524265d5a3a624f4914acd573dd89ce988'],\n  ['HOT (HoloToken)', '0x6c6ee5e31d828de241282b9606c8e98ea48526e2'],\n  ['HOT (Hydro Protocol)', '0x9af839687f6c94542ac5ece2e317daae355493a1'],\n  ['ETR', '0x6927c69fb4daf2043fbb1cb7b86c5661416bea29'],\n  ['HGT', '0xba2184520a1cc49a6159c57e61e1844e085615b6'],\n  ['SNM', '0x983f6d60db79ea8ca4eb9968c6aff8cfa04b3c63'],\n  ['SKRP (1)', '0xfdfe8b7ab6cf1bd1e3d14538ef40686296c42052'],\n  ['SKRP (2)', '0x324a48ebcbb46e61993931ef9d35f6697cd2901b'],\n  ['SKRP (3)', '0x6e34d8d84764d40f6d7b39cd569fd017bf53177d'],\n  ['CAR', '0x423e4322cdda29156b49a17dfbd2acc4b280600d'],\n  ['COB', '0xb2f7eb1f2c37645be61d73953035360e768d81e6'],\n  ['CTX', '0x662abcad0b7f345ab7ffb1b1fbb9df7894f18e66'],\n  ['ENG', '0xf0ee6b27b759c9893ce4f094b49ad28fd15a23e4'],\n  ['PRL', '0x1844b21593262668b7248d0f57a220caaba46ab9'],\n  ['LNC', '0x63e634330a20150dbb61b15648bc73855d6ccf07'],\n  ['REA', '0x767ba2915ec344015a7938e3eedfec2785195d05'],\n  ['SWT', '0xb9e7f8568e08d5659f5d29c4997173d84cdf2607'],\n  ['SNOV', '0xbdc5bac39dbe132b1e030e898ae3830017d7d969'],\n  ['S-A-PAT', '0x1ec8fe51a9b6a3a6c427d17d9ecc3060fbc4a45c'],\n  ['XGG', '0xf6b6aa0ef0f5edc2c1c5d925477f97eaf66303e7'],\n  ['PCL', '0x3618516f45cd3c913f81f9987af41077932bc40d'],\n  ['ATTN', '0x6339784d9478da43106a429196772a029c2f177d'],\n  ['DCL', '0x399a0e6fbeb3d74c85357439f4c8aed9678a5cbf'],\n  ['CNB', '0xebf2f9e8de960f64ec0fdcda6cb282423133347b'],\n  ['BQX', '0x5af2be193a6abca9c8817001f45744777db30756'],\n  ['onG', '0xd341d1680eeee3255b8c4c75bcce7eb57f144dae'],\n  ['GROW', '0x0a9a9ce600d08bf9b76f49fa4e7b38a67ebeb1e6'],\n  ['BSDC', '0xf26ef5e0545384b7dcc0f297f2674189586830df'],\n  ['DKP', '0xba187b09ffa8dddc80d2571ed3cbc4be0af69e0c'],\n  ['XNT', '0x572e6f318056ba0c5d47a422653113843d250691'],\n  ['ZAP', '0x6781a0f84c7e9e846dcb84a9a5bd49333067b104'],\n  ['A18', '0xbde8f7820b5544a49d34f9ddeacabedc7c0b5adc'],\n  ['TaaS', '0xe7775a6e9bcf904eb39da2b68c5efb4f9360e08c'],\n  ['ROUND', '0x4993cb95c7443bdc06155c5f5688be9d8f6999a5'],\n  ['OCC', '0x0235fe624e044a05eed7a43e16e3083bc8a4287a'],\n  ['PETRO', '0xec18f898b4076a3e18f1089d33376cc380bde61d'],\n  ['BMT', '0xf028adee51533b1b47beaa890feb54a457f51e89'],\n  ['WaBi', '0x286bda1413a2df81731d4930ce2f862a35a609fe'],\n  ['SPN', '0x20f7a3ddf244dc9299975b4da1c39f8d5d75f05a'],\n  ['BLX (Iconomi)', '0xe5a7c12972f3bbfe70ed29521c8949b8af6a0970'],\n  ['DEPO', '0x7cf271966f36343bf0150f25e5364f7961c58201'],\n  ['REBL', '0x5f53f7a8075614b699baad0bc2c899f4bad8fbbf'],\n  ['LOCUS', '0xc64500dd7b0f1794807e67802f8abbf5f8ffb054'],\n  ['VOISE', '0x83eea00d838f92dec4d1475697b9f4d3537b56e3'],\n  ['YEED', '0x6f7a4bac3315b5082f793161a22e26666d22717f'],\n  ['BOU', '0xc2c63f23ec5e97efbd7565df9ec764fdc7d4e91d'],\n  ['MANA', '0x0f5d2fb29fb7d3cfee444a200298f468908cc942'],\n  ['PUC', '0xef6b4ce8c9bc83744fbcde2657b32ec18790458a'],\n  ['HDG', '0xffe8196bc259e8dedc544d935786aa4709ec3e64'],\n  ['MNTP', '0x83cee9e086a77e492ee0bb93c2b0437ad6fdeccc'],\n  ['MLN', '0xbeb9ef514a379b997e0798fdcc901ee474b6d9a1'],\n  ['DCA', '0x386faa4703a34a7fdb19bec2e14fd427c9638416'],\n  ['MVP', '0x8a77e40936bbc27e80e9a3f526368c967869c86d'],\n  ['NCT', '0x9e46a38f5daabe8683e10793b06749eef7d733d1'],\n  ['ZRX', '0xe41d2489571d322189246dafa5ebde1f4699f498'],\n  ['SUB', '0x12480e24eb5bec1a9d4369cab6a80cad3c0a377a'],\n  ['STK', '0xae73b38d1c9a8b274127ec30160a4927c4d71824'],\n  ['GXC', '0x58ca3065c0f24c7c96aee8d6056b5b5decf9c2f8'],\n  ['GAVEL', '0x708876f486e448ee89eb332bfbc8e593553058b9'],\n  ['SHIT', '0xef2e9966eb61bb494e5375d5df8d67b7db8a780d'],\n  ['MTH', '0xaf4dce16da2877f8c9e00544c93b62ac40631f16'],\n  ['DAB', '0xdab0c31bf34c897fb0fe90d12ec9401caf5c36ec'],\n  ['1ST', '0xaf30d2a7e90d7dc361c8c4585e9bb7d2f6f15bc7'],\n  ['GIF', '0xfcd862985628b254061f7a918035b80340d045d3'],\n  ['VLD', '0x922ac473a3cc241fd3a0049ed14536452d58d73c'],\n  ['PAL', '0xfedae5642668f8636a11987ff386bfd215f942ee'],\n  ['cV', '0xda6cb58a0d0c01610a29c5a65c303e13e885887c'],\n  ['AGI', '0x8eb24319393716668d768dcec29356ae9cffe285'],\n  ['BCL', '0xbc1234552ebea32b5121190356bba6d3bb225bb5'],\n  ['FUN', '0x419d0d8bdd9af5e606ae2232ed285aff190e711b'],\n  ['SET', '0xe06eda7435ba749b047380ced49121dde93334ae'],\n  ['J8T', '0x0d262e5dc4a06a0f1c90ce79c7a60c09dfc884e4'],\n  ['NPXS', '0xa15c7ebe1f07caf6bff097d8a589fb8ac49ae5b3'],\n  ['DAXT', '0x61725f3db4004afe014745b21dab1e1677cc328b'],\n  ['CDX (Carbon Dollar X)', '0x2cb101d7da0ebaa57d3f2fef46d7ffb7bb64592b'],\n  ['CDX (CDX)', '0x6fff3806bbac52a20e0d79bc538d527f6a22c96b'],\n  ['eUSD', '0x523630976eb6147621b5c31c781ebe2ec2a806e0'],\n  ['MTL', '0xf433089366899d83a9f26a773d59ec7ecf30355e'],\n  ['GOLDX', '0xeab43193cf0623073ca89db9b712796356fa7414'],\n  ['FND', '0x4df47b4969b2911c966506e3592c41389493953b'],\n  ['ANT', '0x960b236a07cf122663c4303350609a66a7b288c0'],\n  ['ACC', '0x13f1b7fdfbe1fc66676d56483e21b1ecb40b58e2'],\n  ['CND', '0xd4c435f5b09f855c3317c8524cb1f586e42795fa'],\n  ['EHT', '0xf9f0fc7167c311dd2f1e21e9204f87eba9012fb2'],\n  ['CREDO', '0x4e0603e2a27a30480e5e3a4fe548e29ef12f64be'],\n  ['ROK', '0xc9de4b7f0c3d991e967158e4d4bfa4b51ec0b114'],\n  ['HKY', '0x88ac94d5d175130347fc95e109d77ac09dbf5ab7'],\n  ['QBX', '0x2467aa6b5a2351416fd4c3def8462d841feeecec'],\n  ['LUC', '0x5dbe296f97b23c4a6aa6183d73e574d02ba5c719'],\n  ['PBT', '0xf4c07b1865bc326a3c01339492ca7538fd038cc0'],\n  ['DSC', '0x1e09bd8cadb441632e441db3e1d79909ee0a2256'],\n  ['WYV', '0x056017c55ae7ae32d12aef7c679df83a85ca75ff'],\n  ['LIFE', '0xff18dbc487b4c2e3222d115952babfda8ba52f5f'],\n  ['DNT', '0x0abdace70d3790235af448c88547603b945604ea'],\n  ['GAM', '0xf67451dc8421f0e0afeb52faa8101034ed081ed9'],\n  ['BTM', '0xcb97e65f07da24d46bcdd078ebebd7c6e6e3d750'],\n  ['NAVI', '0x588047365df5ba589f923604aac23d673555c623'],\n  ['ICE', '0x5a84969bb663fb64f6d015dcf9f622aedc796750'],\n  ['MDA', '0x51db5ad35c671a87207d88fc11d593ac0c8415bd'],\n  ['DADI', '0xfb2f26f266fb2805a387230f2aa0a331b4d96fba'],\n  ['PAT', '0xbb1fa4fdeb3459733bf67ebc6f893003fa976a82'],\n  ['DATABroker', '0x1b5f21ee98eed48d292e8e2d3ed82b40a9728a22'],\n  ['THETA', '0x3883f5e181fccaf8410fa61e12b59bad963fb645'],\n  ['RLT', '0xcced5b8288086be8c38e23567e684c3740be4d48'],\n  ['CK', '0x06012c8cf97bead5deae237070f9587f8e7a266d'],\n  ['INRM', '0x48e5413b73add2434e47504e2a22d14940dbfe78'],\n  ['MTRc', '0x1e49ff77c355a3e38d6651ce8404af0e48c5395f'],\n  ['CAN', '0x1d462414fe14cf489c7a21cac78509f4bf8cd7c0'],\n  ['DAY', '0xe814aee960a85208c3db542c53e7d4a6c8d5f60f'],\n  ['GMT', '0xb3bd49e28f8f832b8d1e246106991e546c323502'],\n  ['DICE', '0x2e071d2966aa7d8decb1005885ba1977d6038a65'],\n  ['SNT', '0x744d70fdbe2ba4cf95131626614a1763df805b9e'],\n  ['OPEN (1)', '0x69c4bb240cf05d51eeab6985bab35527d04a8c64'],\n  ['OPEN (2)', '0xe9de1c630753a15d7021cc563429c21d4887506f'],\n  ['APPC', '0x1a7a8bd9106f2b8d977e08582dc7d24c723ab0db'],\n  ['REQ', '0x8f8221afbb33998d8584a2b05749ba73c37a938a'],\n  ['VDOC', '0x82bd526bdb718c6d4dd2291ed013a5186cae2dca'],\n  ['CHSB', '0xba9d4199fab4f26efe3551d490e3821486f135ba'],\n  ['MIT', '0xe23cd160761f63fc3a1cf78aa034b6cdf97d3e0c'],\n  ['ADT', '0xd0d6d6c5fe4a677d343cc433536bb717bae167dd'],\n  ['BTHR', '0xa02e3bb9cebc03952601b3724b4940e0845bebcf'],\n  ['CFTY', '0x6956983f8b3ce173b4ab84361aa0ad52f38d936f'],\n  ['STQ', '0x5c3a228510d246b78a3765c20221cbf3082b44a4'],\n  ['FLUZ', '0x954b5de09a55e59755acbda29e1eb74a45d30175'],\n  ['BANX', '0xf87f0d9153fea549c728ad61cb801595a68b73de'],\n  ['CAT (BitClave)', '0x1234567461d3f8db7496581774bd869c83d51c93'],\n  ['CMT', '0xf85feea2fdd81d51177f6b8f35f0e6734ce45f5f'],\n  ['LINK Platform', '0xe2e6d4be086c6938b53b22144855eef674281639'],\n  ['RFR', '0xd0929d411954c47438dc1d871dd6081f5c5e149c'],\n  ['SALT', '0x4156d3342d5c385a87d264f90653733592000581'],\n  ['SAN', '0x7c5a0ce9267ed19b22f8cae653f198e3e8daf098'],\n  ['DTx', '0x82fdedfb7635441aa5a92791d001fa7388da8025'],\n  ['PIX', '0x8effd494eb698cc399af6231fccd39e08fd20b15'],\n  ['E₹', '0xb67734521eabbe9c773729db73e16cc2dfb20a58'],\n  ['TIO', '0x80bc5512561c7f85a3a9508c7df7901b370fa1df'],\n  ['EMT', '0x9501bfc48897dceeadf73113ef635d2ff7ee4b97'],\n  ['WETH', '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'],\n  ['WCT', '0x6a0a97e47d15aad1d132a1ac79a480e3f2079063'],\n  ['CR7', '0x7f585b9130c64e9e9f470b618a7badd03d79ca7e'],\n  ['PAY', '0xb97048628db6b661d4c2aa833e95dbe1a905b280'],\n  ['LGR', '0x2eb86e8fc520e0f6bb5d9af08f924fe70558ab89'],\n  ['CAS', '0xe8780b48bdb05f928697a5e8155f672ed91462f7'],\n  ['LFR', '0xc798cd1c49db0e297312e4c682752668ce1db2ad'],\n  ['CCLC', '0xd348e07a2806505b856123045d27aeed90924b50'],\n  ['REP', '0x1985365e9f78359a9b6ad760e32412f4a445e862'],\n  ['MTC', '0x905e337c6c8645263d3521205aa37bf4d034e745'],\n  ['XCC', '0x4d829f8c92a6691c56300d020c9e0db984cfe2ba'],\n  ['WiC', '0x5e4abe6419650ca839ce5bb7db422b881a6064bb'],\n  ['POOL', '0x779b7b713c86e3e6774f5040d9ccc2d43ad375f8'],\n  ['ALIS', '0xea610b1153477720748dc13ed378003941d84fab'],\n  ['GXVC', '0x22f0af8d78851b72ee799e05f54a77001586b18a'],\n  ['GET', '0x8a854288a5976036a725879164ca3e91d30c6a1b'],\n  ['SKR', '0x4c382f8e09615ac86e08ce58266cc227e7d4d913'],\n  ['NxC', '0x45e42d659d9f9466cd5df622506033145a9b89bc'],\n  ['BAT', '0x0d8775f648430679a709e98d2b0cb6250d2887ef'],\n  ['ONEK', '0xb23be73573bc7e03db6e5dfc62405368716d28a8'],\n  ['ADX', '0x4470bb87d77b963a013db939be332f927f2b992e'],\n  ['CCC (CryptoCrashCourse)', '0x28577a6d31559bd265ce3adb62d0458550f7b8a7'],\n  ['PARETO', '0xea5f88e54d982cbb0c441cde4e79bc305e5b43bc'],\n  ['OST', '0x2c4e8f2d746113d0696ce89b35f0d8bf88e0aeca'],\n  ['PRO', '0x226bb599a12c826476e3a771454697ea52e9e220'],\n  ['HKG', '0x14f37b574242d366558db61f3335289a5035c506'],\n  ['PRSP', '0x0c04d4f331da8df75f9e2e271e3f3f1494c66c36'],\n  ['POE', '0x0e0989b1f9b8a38983c2ba8053269ca62ec9b195'],\n  ['CRB', '0xaef38fbfbf932d1aef3b808bc8fbd8cd8e1f8bc5'],\n  ['BTE', '0x73dd069c299a5d691e9836243bcaec9c8c1d8734'],\n  ['XGT', '0x30f4a3e0ab7a76733d8b60b89dd93c3d0b4c9e2f'],\n  ['AMTC', '0x84936cf7630aa3e27dd9aff968b140d5aee49f5a'],\n  ['STAC', '0x9a005c9a89bd72a4bd27721e7a09a3c11d2b03c4'],\n  ['THUG', '0xfe7b915a0baa0e79f85c5553266513f7c1c03ed0'],\n  ['HVN', '0xc0eb85285d83217cd7c891702bcbc0fc401e2d9d'],\n  ['VET', '0xd850942ef8811f2a866692a623011bde52a462c1'],\n  ['GRID', '0x12b19d3e2ccc14da04fae33e63652ce469b3f2fd'],\n  ['WRK', '0x71e8d74ff1c923e369d0e70dfb09866629c4dd35'],\n  ['GBX', '0x12fcd6463e66974cf7bbc24ffc4d40d6be458283'],\n  ['PRG', '0x7728dfef5abd468669eb7f9b48a7f70a501ed29d'],\n  ['BET', '0x8aa33a7899fcc8ea5fbe6a608a109c3893a1b8b2'],\n  ['XNK', '0xbc86727e770de68b1060c91f6bb6945c73e10388'],\n  ['CDT', '0x177d39ac676ed1c67a2b268ad7f1e58826e5b0af'],\n  ['BLX (Bullion)', '0xce59d29b09aae565feeef8e52f47c3cd5368c663'],\n  ['M-ETH', '0x3f4b726668da46f5e0e75aa5d478acec9f38210f'],\n  ['PBL', '0x55648de19836338549130b1af587f16bea46f66b'],\n  ['Hdp', '0xe9ff07809ccff05dae74990e25831d0bc5cbe575'],\n  ['SNG', '0xcfd6ae8bf13f42de14867351eaff7a8a3b9fbbe7'],\n  ['MOD', '0x957c30ab0426e0c93cd8241e2c60392d08c6ac8e'],\n  ['CCS', '0x315ce59fafd3a8d562b7ec1c8542382d2710b06c'],\n  ['BLUE', '0x539efe69bcdd21a83efd9122571a64cc25e0282b'],\n  ['TBT', '0xafe60511341a37488de25bef351952562e31fcc1'],\n  ['UTN-P', '0x9e3319636e2126e3c0bc9e3134aec5e1508a46c7'],\n  ['GELD', '0x24083bb30072643c3bb90b44b7285860a755e687'],\n  ['PLBT', '0x0affa06e7fbe5bc9a764c979aa66e8256a631f02'],\n  ['ADH', '0xe69a353b3152dd7b706ff7dd40fe1d18b7802d31'],\n  ['XFS', '0x16af5bfb4ae7e475b9adc3bf5cb2f1e6a50d7940'],\n  ['GNO', '0x6810e776880c02933d47db1b9fc05908e5386b96'],\n  ['LOCI', '0x9c23d67aea7b95d80942e3836bcdf7e708a747c2'],\n  ['GCP', '0xdb0f69306ff8f949f258e83f6b87ee5d052d0b23'],\n  ['WILD', '0xd3c00772b24d997a812249ca637a921e81357701'],\n  ['NDC', '0xa54ddc7b3cce7fc8b1e3fa0256d0db80d2c10970'],\n  ['ICX', '0xb5a5f22694352c15b00323844ad545abb2b11028'],\n  ['REX', '0xf05a9382a4c3f29e2784502754293d88b835109c'],\n  ['BTCE', '0x0886949c1b8c412860c4264ceb8083d1365e86cf'],\n  ['YUPIE', '0x0f33bb20a282a7649c7b3aff644f084a9348e933'],\n  ['BRD', '0x558ec3152e2eb2174905cd19aea4e34a23de9ad6'],\n  ['TKN', '0xaaaf91d9b90df800df4f55c205fd6989c977e73a'],\n  ['NEC', '0xcc80c051057b774cd75067dc48f8987c4eb97a5e'],\n  ['BCPT', '0x1c4481750daa5ff521a2a7490d9981ed46465dbd'],\n  ['FLR', '0x9aefbe0b3c3ba9eab262cb9856e8157ab7648e09'],\n  ['MTX', '0x0af44e2784637218dd1d32a322d44e603a8f0c6a'],\n  ['BNC', '0xdd6bf56ca2ada24c683fac50e37783e55b57af9f'],\n  ['RDN', '0x255aa6df07540cb5d3d297f0d0d4d84cb52bc8e6'],\n  ['PTWO', '0x5512e1d6a7be424b4323126b4f9e86d023f95764'],\n  ['WIC', '0x62cd07d414ec50b68c7ecaa863a23d344f2d062f'],\n  ['PEXT', '0x55c2a0c171d920843560594de3d6eecc09efc098'],\n  ['TWN', '0x2ef1ab8a26187c58bb8aaeb11b2fc6d25c5c0716'],\n  ['NXX', '0x7627de4b93263a6a7570b8dafa64bae812e5c394'],\n  ['BLT', '0x107c4504cd79c5d2696ea0030a8dd4e92601b82e'],\n  ['ESZ', '0xe8a1df958be379045e2b46a31a98b93a2ecdfded'],\n  ['WTC', '0xb7cb1c96db6b22b0d3d9536e0108d062bd488f74'],\n  ['CXO', '0xb6ee9668771a79be7967ee29a63d4184f8097143'],\n  ['BNFT', '0xda2c424fc98c741c2d4ef2f42897cefed897ca75'],\n  ['MTN', '0x41dbecc1cdc5517c6f76f6a6e836adbee2754de3'],\n  ['IPSX', '0x001f0aa5da15585e5b2305dbab2bac425ea71007'],\n  ['CXC', '0x2134057c0b461f898d375cead652acae62b59541'],\n  ['UTK', '0x70a72833d6bf7f508c8224ce59ea1ef3d0ea3a38'],\n  ['BETR', '0x763186eb8d4856d536ed4478302971214febc6a9'],\n  ['TIME', '0x6531f133e6deebe7f2dce5a0441aa7ef330b4e53'],\n  ['PCLOLD', '0x53148bb4551707edf51a1e8d7a93698d18931225'],\n  ['STP', '0xecd570bbf74761b960fa04cc10fe2c4e86ffda36'],\n  ['SXUT', '0x2c82c73d5b34aa015989462b2948cd616a37641f'],\n  ['NMR', '0x1776e1f26f98b1a5df9cd347953a26dd3cb46671'],\n  ['DROP', '0x3c75226555fc496168d48b88df83b95f16771f37'],\n  ['VIEW', '0xf03f8d65bafa598611c3495124093c56e8f638f0'],\n  ['POIN', '0x43f6a1be992dee408721748490772b15143ce0a7'],\n  ['XRL', '0xb24754be79281553dc1adc160ddf5cd9b74361a4'],\n  ['IND', '0xf8e386eda857484f5a12e4b5daa9984e06e73705'],\n  ['BNTY', '0xd2d6158683aee4cc838067727209a0aaf4359de3'],\n  ['ARX', '0x7705faa34b16eb6d77dfc7812be2367ba6b0248e'],\n  ['PRE', '0x88a3e4f35d64aad41a6d4030ac9afe4356cb84fa'],\n  ['EXMR', '0xc98e0639c6d2ec037a615341c369666b110e80e5'],\n  ['VERI', '0x8f3470a7388c05ee4e7af3d01d8c722b0ff52374'],\n  ['EDG', '0x08711d3b02c8758f2fb3ab4e80228418a7f8e39c'],\n  ['ELF', '0xbf2179859fc6d5bee9bf9158632dc51678a4100e'],\n  ['SPARTA', '0x24aef3bf1a47561500f9430d74ed4097c47f51f2'],\n  ['WBA', '0x74951b677de32d596ee851a233336926e6a2cd09'],\n  ['BLZ', '0x5732046a883704404f284ce41ffadd5b007fd668'],\n  ['QSP', '0x99ea4db9ee77acd40b119bd1dc4e33e1c070b80d'],\n  ['LOC', '0x5e3346444010135322268a4630d2ed5f8d09446c'],\n  ['BKB', '0xb2bfeb70b903f1baac7f2ba2c62934c7e5b974c4'],\n  ['POLY', '0x9992ec3cf6a55b00978cddf2b27bc6882d88d1ec'],\n  ['S-ETH', '0x3eb91d237e491e0dee8582c402d85cb440fb6b54'],\n  ['EVE', '0x923108a439c4e8c2315c4f6521e5ce95b44e9b4c'],\n  ['MCI', '0x138a8752093f4f9a79aaedf48d4b9248fab93c9c'],\n  ['CDL', '0x8a95ca448a52c0adf0054bb3402dc5e09cd6b232'],\n  ['MKR', '0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2'],\n  ['BKRx', '0x3cf9e0c385a5abec9fd2a71790aa344c4e8e3570'],\n  ['DENT', '0x3597bfd533a99c9aa083587b074434e61eb0a258'],\n  ['IKB', '0x88ae96845e157558ef59e9ff90e766e22e480390'],\n  ['STORJ', '0xb64ef51c888972c908cfacf59b47c1afbc0ab8ac'],\n  ['NIMFA', '0xe26517a9967299453d3f1b48aa005e6127e67210'],\n  ['PIPL', '0xe64509f0bf07ce2d29a7ef19a8a9bc065477c1b4'],\n  ['DTR', '0xd234bf2410a0009df9c3c63b610c09738f18ccd7'],\n  ['BTK', '0xdb8646f5b487b5dd979fac618350e85018f557d4'],\n  ['CO2', '0xb4b1d2c217ec0776584ce08d3dd98f90ededa44b'],\n  ['SRN', '0x68d57c9a1c35f63e2c83ee8e49a64e9d70528d25'],\n  ['AMN', '0x737f98ac8ca59f2c68ad658e3c3d8c8963e40a4c'],\n  ['ITT', '0x0aef06dcccc531e581f0440059e6ffcc206039ee'],\n  ['GZE', '0x8c65e992297d5f092a756def24f4781a280198ff'],\n  ['CO2Bit', '0x574b36bced443338875d171cc377e691f7d4f887'],\n  ['ECN', '0xa578acc0cb7875781b7880903f4594d13cfa8b98'],\n  ['SPF', '0x85089389c14bd9c77fc2b8f0c3d1dc3363bf06ef'],\n  ['VENUS', '0xebed4ff9fe34413db8fc8294556bbd1528a4daca'],\n  ['CMC', '0x7e667525521cf61352e2e01b50faaae7df39749a'],\n  ['RNDR', '0x0996bfb5d057faa237640e2506be7b4f9c46de0b'],\n  ['APIS', '0x4c0fbe1bb46612915e7967d2c3213cd4d87257ad'],\n  ['SENSE', '0x6745fab6801e376cd24f03572b9c9b0d4edddccf'],\n  ['WPR', '0x4cf488387f035ff08c371515562cba712f9015d4'],\n  ['GEN', '0x543ff227f64aa17ea132bf9886cab5db55dcaddf'],\n  ['ENC', '0x039f5050de4908f9b5ddf40a4f3aa3f329086387'],\n  ['USDM', '0xd760addfb24d9c01fe4bfea7475c5e3636684058'],\n  ['SNC', '0xf4134146af2d511dd5ea8cdb1c4ac88c57d60404'],\n  ['TBC2', '0xfaccd5fc83c3e4c3c1ac1ef35d15adf06bcf209c'],\n  ['LOOM', '0xa4e8c3ec456107ea67d3075bf9e3df3a75823db0'],\n  ['MCO', '0xb63b606ac810a52cca15e44bb630fd42d8d1d83d'],\n  ['MESH', '0x01f2acf2914860331c1cb1a9acecda7475e06af8'],\n  ['ART', '0xfec0cf7fe078a500abf15f1284958f22049c2c7e'],\n  ['MTR', '0x7fc408011165760ee31be2bf20daf450356692af'],\n  ['EMONT', '0x95daaab98046846bf4b2853e23cba236fa394a31'],\n  ['LINK (Chainlink)', '0x514910771af9ca656af840dff83e8264ecf986ca'],\n  ['TRST', '0xcb94be6f13a1182e4a4b6140cb7bf2025d28e41b'],\n  ['XBP', '0x28dee01d53fed0edf5f6e310bf8ef9311513ae40'],\n  ['SMART', '0x6f6deb5db0c4994a8283a01d6cfeeb27fc3bbe9c'],\n  ['DAO', '0xbb9bc244d798123fde783fcc1c72d3bb8c189413'],\n  ['XGM', '0x533ef0984b2faa227acc620c67cce12aa39cd8cd'],\n  ['JNT', '0xa5fd1a791c4dfcaacc963d4f73c6ae5824149ea7'],\n  ['OAX', '0x701c244b988a513c945973defa05de933b23fe1d'],\n  ['FRD', '0x0abefb7611cb3a01ea3fad85f33c3c934f8e2cf4'],\n  ['NEU', '0xa823e6722006afe99e91c30ff5295052fe6b8e32'],\n  ['ATT', '0x887834d3b8d450b6bab109c252df3da286d73ce4'],\n  ['IoT', '0xc34b21f6f8e51cc965c2393b3ccfa3b82beb2403'],\n  ['XAUR', '0x4df812f6064def1e5e029f1ca858777cc98d2d81'],\n  ['DAI', '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'],\n  ['PCH', '0xfcac7a7515e9a9d7619fa77a1fa738111f66727e'],\n  ['HAT', '0x9002d4485b7594e3e850f0a206713b305113f69e'],\n  ['GUP', '0xf7b098298f7c69fc14610bf71d5e02c60792894c'],\n  ['HST', '0x554c20b7c486beee439277b4540a434566dc4c02'],\n  ['WHO (1)', '0xe200641890772fce8ee6edc5354ccea30ac92f49'],\n  ['WHO (2)', '0xe933c0cd9784414d5f278c114904f5a84b396919'],\n  ['MWAT', '0x6425c6be902d692ae2db752b3c268afadb099d3b'],\n  ['DPP', '0x01b3ec4aae1b8729529beb4965f27d008788b0eb'],\n  ['EPX', '0x35baa72038f127f9f8c8f9b491049f64f377914d'],\n  ['DNX', '0xe43e2041dc3786e166961ed9484a5539033d10fb'],\n  ['ADI', '0x8810c63470d38639954c6b41aac545848c46484a'],\n  ['CRT', '0xf0da1186a4977226b9135d0613ee72e229ec3f4d'],\n  ['LALA', '0xfd107b473ab90e8fbd89872144a3dc92c40fa8c9'],\n  ['STC', '0x629aee55ed49581c33ab27f9403f7992a289ffd5'],\n  ['CLL', '0x3dc9a42fa7afe57be03c58fd7f4411b1e466c508'],\n  ['RVT', '0x3d1ba9be9f66b8ee101911bc36d3fb562eac2244'],\n  ['EDO', '0xced4e93198734ddaff8492d525bd258d49eb388e'],\n  ['AXP', '0x9af2c6b1a28d3d6bc084bd267f70e90d49741d5b'],\n  ['MYD', '0xf7e983781609012307f2514f63d526d83d24f466'],\n  ['MBRS', '0x386467f1f3ddbe832448650418311a479eecfc57'],\n  ['ATH', '0x17052d51e954592c1046320c2371abab6c73ef10'],\n  ['LUCK', '0xfb12e3cca983b9f59d90912fd17f8d745a8b2953'],\n  ['XSC', '0x0f513ffb4926ff82d7f60a05069047aca295c413'],\n  ['TRCN', '0x566fd7999b1fc3988022bd38507a48f0bcf22c77'],\n  ['EDU', '0x5b26c5d0772e5bbac8b3182ae9a13f9bb2d03765'],\n  ['MYST', '0xa645264c5603e96c3b0b078cdab68733794b0a71'],\n  ['ABT', '0xb98d4c97425d9908e66e53a6fdf673acca0be986'],\n  ['BUC', '0xca3c18a65b802ec267f8f4802545e7f53d24c75e'],\n  ['CryptoCarbon', '0xe4c94d45f7aef7018a5d66f44af780ec6023378e'],\n  ['WAX', '0x39bb259f66e1c59d5abef88375979b4d20d98022'],\n  ['MGO', '0x40395044ac3c0c57051906da938b54bd6557f212'],\n  ['CRPT', '0x80a7e048f37a50500351c204cb407766fa3bae7f'],\n  ['Unicorn', '0x89205a3a3b2a69de6dbf7f01ed13b2108b2c43e7'],\n  ['ITC', '0x5e6b6d9abad9093fdc861ea1600eba1b355cd940'],\n  ['BTL (Battle)', '0x2accab9cb7a48c3e82286f0b2f8798d201f4ec3f'],\n  ['AIR', '0x27dce1ec4d3f72c3e457cc50354f1f975ddef488'],\n  ['HAV', '0xf244176246168f24e3187f7288edbca29267739b'],\n  ['ELIX', '0xc8c6a31a4a806d3710a7b38b7b296d2fabccdba8'],\n  ['TAU', '0xc27a2f05fa577a83ba0fdb4c38443c0718356501'],\n  ['CAT (Blockcat)', '0x56ba2ee7890461f463f7be02aac3099f6d5811a8'],\n  ['BeerCoin', '0x74c1e4b8cae59269ec1d85d3d4f324396048f4ac'],\n  ['BON', '0xcc34366e3842ca1bd36c1f324d15257960fcc801'],\n  ['UKG', '0x24692791bc444c5cd0b81e3cbcaba4b04acd1f3b'],\n  ['HIG', '0xa9240fbcac1f0b9a6adfb04a53c8e3b0cc1d1444'],\n  ['KEY (SelfKey)', '0x4cc19356f2d37338b9802aa8e8fc58b0373296e7'],\n  ['KEY (BihuKey)', '0x4cd988afbad37289baaf53c13e98e2bd46aaea8c'],\n  ['ARC', '0xac709fcb44a43c35f0da4e3163b117a17f3770f5'],\n  ['MFT', '0xdf2c7238198ad8b389666574f2d8bc411a4b7428'],\n  ['FXC', '0xc92d6e3e64302c59d734f3292e2a13a13d7e1817'],\n  ['DGX 2.0', '0x4f3afec4e5a3f2a6a1a411def7d7dfe50ee057bf'],\n  ['YUP', '0xd9a12cde03a86e800496469858de8581d3a5353d'],\n  ['DGS', '0x6aedbf8dff31437220df351950ba2a3362168d1b'],\n]\n\nexport const ETHER_TOKEN_VERIFIED_BY_SYMBOL = new Map(VERIFIED_TOKENS)\nexport const ETHER_TOKEN_VERIFIED_ADDRESSES = new Set(ETHER_TOKEN_VERIFIED_BY_SYMBOL.values())\n","import { ETHER_TOKEN_VERIFIED_ADDRESSES } from './verified-tokens'\n\nexport const ETHER_TOKEN_FAKE_ADDRESS =\n  '0x0000000000000000000000000000000000000000'\n\nexport const isTokenVerified = (tokenAddress, networkType) =>\n  // The verified list is without checksums\n  networkType === 'main'\n    ? ETHER_TOKEN_VERIFIED_ADDRESSES.has(tokenAddress.toLowerCase())\n    : true\n","//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind,\n    nativeCreate       = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.8.3';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, undefinedOnly) {\n    return function(obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = property('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n            i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function() {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys =  _.keys(obj),\n          length = keys.length,\n          results = {},\n          currentKey;\n      for (var index = 0; index < length; index++) {\n        currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(object, oiteratee, context) {\n    var result = {}, obj = object, iteratee, keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function(value, key, obj) { return key in obj; };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = property;\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    return obj == null ? function(){} : function(key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}.call(this));\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buf' + 'fer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buf' + 'fer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/**\n * Returns a `Boolean` on whether or not the a `String` starts with '0x'\n * @param {String} str the string input value\n * @return {Boolean} a boolean if it is or is not hex prefixed\n * @throws if the str input is not a string\n */\nmodule.exports = function isHexPrefixed(str) {\n  if (typeof str !== 'string') {\n    throw new Error(\"[is-hex-prefixed] value must be type 'string', is currently type \" + (typeof str) + \", while checking isHexPrefixed.\");\n  }\n\n  return str.slice(0, 2) === '0x';\n}\n","var isHexPrefixed = require('is-hex-prefixed');\n\n/**\n * Removes '0x' from a given `String` is present\n * @param {String} str the string value\n * @return {String|Optional} a string by pass if necessary\n */\nmodule.exports = function stripHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n","var BN = require('bn.js');\nvar stripHexPrefix = require('strip-hex-prefix');\n\n/**\n * Returns a BN object, converts a number value to a BN\n * @param {String|Number|Object} `arg` input a string number, hex string number, number, BigNumber or BN object\n * @return {Object} `output` BN object of the number\n * @throws if the argument is not an array, object that isn't a bignumber, not a string number or number\n */\nmodule.exports = function numberToBN(arg) {\n  if (typeof arg === 'string' || typeof arg === 'number') {\n    var multiplier = new BN(1); // eslint-disable-line\n    var formattedString = String(arg).toLowerCase().trim();\n    var isHexPrefixed = formattedString.substr(0, 2) === '0x' || formattedString.substr(0, 3) === '-0x';\n    var stringArg = stripHexPrefix(formattedString); // eslint-disable-line\n    if (stringArg.substr(0, 1) === '-') {\n      stringArg = stripHexPrefix(stringArg.slice(1));\n      multiplier = new BN(-1, 10);\n    }\n    stringArg = stringArg === '' ? '0' : stringArg;\n\n    if ((!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/))\n      || stringArg.match(/^[a-fA-F]+$/)\n      || (isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/))) {\n      return new BN(stringArg, 16).mul(multiplier);\n    }\n\n    if ((stringArg.match(/^-?[0-9]+$/) || stringArg === '') && isHexPrefixed === false) {\n      return new BN(stringArg, 10).mul(multiplier);\n    }\n  } else if (typeof arg === 'object' && arg.toString && (!arg.pop && !arg.push)) {\n    if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {\n      return new BN(arg.toString(10), 10);\n    }\n  }\n\n  throw new Error('[number-to-bn] while converting number ' + JSON.stringify(arg) + ' to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.');\n}\n","'use strict';\n\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\n\nvar zero = new BN(0);\nvar negative1 = new BN(-1);\n\n// complete ethereum unit map\nvar unitMap = {\n  'noether': '0', // eslint-disable-line\n  'wei': '1', // eslint-disable-line\n  'kwei': '1000', // eslint-disable-line\n  'Kwei': '1000', // eslint-disable-line\n  'babbage': '1000', // eslint-disable-line\n  'femtoether': '1000', // eslint-disable-line\n  'mwei': '1000000', // eslint-disable-line\n  'Mwei': '1000000', // eslint-disable-line\n  'lovelace': '1000000', // eslint-disable-line\n  'picoether': '1000000', // eslint-disable-line\n  'gwei': '1000000000', // eslint-disable-line\n  'Gwei': '1000000000', // eslint-disable-line\n  'shannon': '1000000000', // eslint-disable-line\n  'nanoether': '1000000000', // eslint-disable-line\n  'nano': '1000000000', // eslint-disable-line\n  'szabo': '1000000000000', // eslint-disable-line\n  'microether': '1000000000000', // eslint-disable-line\n  'micro': '1000000000000', // eslint-disable-line\n  'finney': '1000000000000000', // eslint-disable-line\n  'milliether': '1000000000000000', // eslint-disable-line\n  'milli': '1000000000000000', // eslint-disable-line\n  'ether': '1000000000000000000', // eslint-disable-line\n  'kether': '1000000000000000000000', // eslint-disable-line\n  'grand': '1000000000000000000000', // eslint-disable-line\n  'mether': '1000000000000000000000000', // eslint-disable-line\n  'gether': '1000000000000000000000000000', // eslint-disable-line\n  'tether': '1000000000000000000000000000000' };\n\n/**\n * Returns value of unit in Wei\n *\n * @method getValueOfUnit\n * @param {String} unit the unit to convert to, default ether\n * @returns {BigNumber} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nfunction getValueOfUnit(unitInput) {\n  var unit = unitInput ? unitInput.toLowerCase() : 'ether';\n  var unitValue = unitMap[unit]; // eslint-disable-line\n\n  if (typeof unitValue !== 'string') {\n    throw new Error('[ethjs-unit] the unit provided ' + unitInput + ' doesn\\'t exists, please use the one of the following units ' + JSON.stringify(unitMap, null, 2));\n  }\n\n  return new BN(unitValue, 10);\n}\n\nfunction numberToString(arg) {\n  if (typeof arg === 'string') {\n    if (!arg.match(/^-?[0-9.]+$/)) {\n      throw new Error('while converting number to string, invalid number value \\'' + arg + '\\', should be a number matching (^-?[0-9.]+).');\n    }\n    return arg;\n  } else if (typeof arg === 'number') {\n    return String(arg);\n  } else if (typeof arg === 'object' && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {\n    if (arg.toPrecision) {\n      return String(arg.toPrecision());\n    } else {\n      // eslint-disable-line\n      return arg.toString(10);\n    }\n  }\n  throw new Error('while converting number to string, invalid number value \\'' + arg + '\\' type ' + typeof arg + '.');\n}\n\nfunction fromWei(weiInput, unit, optionsInput) {\n  var wei = numberToBN(weiInput); // eslint-disable-line\n  var negative = wei.lt(zero); // eslint-disable-line\n  var base = getValueOfUnit(unit);\n  var baseLength = unitMap[unit].length - 1 || 1;\n  var options = optionsInput || {};\n\n  if (negative) {\n    wei = wei.mul(negative1);\n  }\n\n  var fraction = wei.mod(base).toString(10); // eslint-disable-line\n\n  while (fraction.length < baseLength) {\n    fraction = '0' + fraction;\n  }\n\n  if (!options.pad) {\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n  }\n\n  var whole = wei.div(base).toString(10); // eslint-disable-line\n\n  if (options.commify) {\n    whole = whole.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n\n  var value = '' + whole + (fraction == '0' ? '' : '.' + fraction); // eslint-disable-line\n\n  if (negative) {\n    value = '-' + value;\n  }\n\n  return value;\n}\n\nfunction toWei(etherInput, unit) {\n  var ether = numberToString(etherInput); // eslint-disable-line\n  var base = getValueOfUnit(unit);\n  var baseLength = unitMap[unit].length - 1 || 1;\n\n  // Is it negative?\n  var negative = ether.substring(0, 1) === '-'; // eslint-disable-line\n  if (negative) {\n    ether = ether.substring(1);\n  }\n\n  if (ether === '.') {\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, invalid value');\n  }\n\n  // Split it into a whole and fractional part\n  var comps = ether.split('.'); // eslint-disable-line\n  if (comps.length > 2) {\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei,  too many decimal points');\n  }\n\n  var whole = comps[0],\n      fraction = comps[1]; // eslint-disable-line\n\n  if (!whole) {\n    whole = '0';\n  }\n  if (!fraction) {\n    fraction = '0';\n  }\n  if (fraction.length > baseLength) {\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, too many decimal places');\n  }\n\n  while (fraction.length < baseLength) {\n    fraction += '0';\n  }\n\n  whole = new BN(whole);\n  fraction = new BN(fraction);\n  var wei = whole.mul(base).add(fraction); // eslint-disable-line\n\n  if (negative) {\n    wei = wei.mul(negative1);\n  }\n\n  return new BN(wei.toString(10), 10);\n}\n\nmodule.exports = {\n  unitMap: unitMap,\n  numberToString: numberToString,\n  getValueOfUnit: getValueOfUnit,\n  fromWei: fromWei,\n  toWei: toWei\n};","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buf' + 'fer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/*! https://mths.be/utf8js v2.0.0 by @mathias */\n;(function(root) {\n\n\t// Detect free variables `exports`\n\tvar freeExports = typeof exports == 'object' && exports;\n\n\t// Detect free variable `module`\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\n\t// Detect free variable `global`, from Node.js or Browserified code,\n\t// and use it as `root`\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar stringFromCharCode = String.fromCharCode;\n\n\t// Taken from https://mths.be/punycode\n\tfunction ucs2decode(string) {\n\t\tvar output = [];\n\t\tvar counter = 0;\n\t\tvar length = string.length;\n\t\tvar value;\n\t\tvar extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t// Taken from https://mths.be/punycode\n\tfunction ucs2encode(array) {\n\t\tvar length = array.length;\n\t\tvar index = -1;\n\t\tvar value;\n\t\tvar output = '';\n\t\twhile (++index < length) {\n\t\t\tvalue = array[index];\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t}\n\t\treturn output;\n\t}\n\n\tfunction checkScalarValue(codePoint) {\n\t\tif (codePoint >= 0xD800 && codePoint <= 0xDFFF) {\n\t\t\tthrow Error(\n\t\t\t\t'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +\n\t\t\t\t' is not a scalar value'\n\t\t\t);\n\t\t}\n\t}\n\t/*--------------------------------------------------------------------------*/\n\n\tfunction createByte(codePoint, shift) {\n\t\treturn stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);\n\t}\n\n\tfunction encodeCodePoint(codePoint) {\n\t\tif ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence\n\t\t\treturn stringFromCharCode(codePoint);\n\t\t}\n\t\tvar symbol = '';\n\t\tif ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);\n\t\t}\n\t\telse if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence\n\t\t\tcheckScalarValue(codePoint);\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);\n\t\t\tsymbol += createByte(codePoint, 6);\n\t\t}\n\t\telse if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);\n\t\t\tsymbol += createByte(codePoint, 12);\n\t\t\tsymbol += createByte(codePoint, 6);\n\t\t}\n\t\tsymbol += stringFromCharCode((codePoint & 0x3F) | 0x80);\n\t\treturn symbol;\n\t}\n\n\tfunction utf8encode(string) {\n\t\tvar codePoints = ucs2decode(string);\n\t\tvar length = codePoints.length;\n\t\tvar index = -1;\n\t\tvar codePoint;\n\t\tvar byteString = '';\n\t\twhile (++index < length) {\n\t\t\tcodePoint = codePoints[index];\n\t\t\tbyteString += encodeCodePoint(codePoint);\n\t\t}\n\t\treturn byteString;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tfunction readContinuationByte() {\n\t\tif (byteIndex >= byteCount) {\n\t\t\tthrow Error('Invalid byte index');\n\t\t}\n\n\t\tvar continuationByte = byteArray[byteIndex] & 0xFF;\n\t\tbyteIndex++;\n\n\t\tif ((continuationByte & 0xC0) == 0x80) {\n\t\t\treturn continuationByte & 0x3F;\n\t\t}\n\n\t\t// If we end up here, it’s not a continuation byte\n\t\tthrow Error('Invalid continuation byte');\n\t}\n\n\tfunction decodeSymbol() {\n\t\tvar byte1;\n\t\tvar byte2;\n\t\tvar byte3;\n\t\tvar byte4;\n\t\tvar codePoint;\n\n\t\tif (byteIndex > byteCount) {\n\t\t\tthrow Error('Invalid byte index');\n\t\t}\n\n\t\tif (byteIndex == byteCount) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Read first byte\n\t\tbyte1 = byteArray[byteIndex] & 0xFF;\n\t\tbyteIndex++;\n\n\t\t// 1-byte sequence (no continuation bytes)\n\t\tif ((byte1 & 0x80) == 0) {\n\t\t\treturn byte1;\n\t\t}\n\n\t\t// 2-byte sequence\n\t\tif ((byte1 & 0xE0) == 0xC0) {\n\t\t\tvar byte2 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x1F) << 6) | byte2;\n\t\t\tif (codePoint >= 0x80) {\n\t\t\t\treturn codePoint;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid continuation byte');\n\t\t\t}\n\t\t}\n\n\t\t// 3-byte sequence (may include unpaired surrogates)\n\t\tif ((byte1 & 0xF0) == 0xE0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tbyte3 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;\n\t\t\tif (codePoint >= 0x0800) {\n\t\t\t\tcheckScalarValue(codePoint);\n\t\t\t\treturn codePoint;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid continuation byte');\n\t\t\t}\n\t\t}\n\n\t\t// 4-byte sequence\n\t\tif ((byte1 & 0xF8) == 0xF0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tbyte3 = readContinuationByte();\n\t\t\tbyte4 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |\n\t\t\t\t(byte3 << 0x06) | byte4;\n\t\t\tif (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {\n\t\t\t\treturn codePoint;\n\t\t\t}\n\t\t}\n\n\t\tthrow Error('Invalid UTF-8 detected');\n\t}\n\n\tvar byteArray;\n\tvar byteCount;\n\tvar byteIndex;\n\tfunction utf8decode(byteString) {\n\t\tbyteArray = ucs2decode(byteString);\n\t\tbyteCount = byteArray.length;\n\t\tbyteIndex = 0;\n\t\tvar codePoints = [];\n\t\tvar tmp;\n\t\twhile ((tmp = decodeSymbol()) !== false) {\n\t\t\tcodePoints.push(tmp);\n\t\t}\n\t\treturn ucs2encode(codePoints);\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar utf8 = {\n\t\t'version': '2.0.0',\n\t\t'encode': utf8encode,\n\t\t'decode': utf8decode\n\t};\n\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine(function() {\n\t\t\treturn utf8;\n\t\t});\n\t}\telse if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = utf8;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tvar object = {};\n\t\t\tvar hasOwnProperty = object.hasOwnProperty;\n\t\t\tfor (var key in utf8) {\n\t\t\t\thasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.utf8 = utf8;\n\t}\n\n}(this));\n","// This was ported from https://github.com/emn178/js-sha3, with some minor\n// modifications and pruning. It is licensed under MIT:\n//\n// Copyright 2015-2016 Chen, Yi-Cyuan\n//  \n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar HEX_CHARS = '0123456789abcdef'.split('');\nvar KECCAK_PADDING = [1, 256, 65536, 16777216];\nvar SHIFT = [0, 8, 16, 24];\nvar RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n\nvar Keccak = function Keccak(bits) {\n  return {\n    blocks: [],\n    reset: true,\n    block: 0,\n    start: 0,\n    blockCount: 1600 - (bits << 1) >> 5,\n    outputBlocks: bits >> 5,\n    s: function (s) {\n      return [].concat(s, s, s, s, s);\n    }([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  };\n};\n\nvar update = function update(state, message) {\n  var length = message.length,\n      blocks = state.blocks,\n      byteCount = state.blockCount << 2,\n      blockCount = state.blockCount,\n      outputBlocks = state.outputBlocks,\n      s = state.s,\n      index = 0,\n      i,\n      code;\n\n  // update\n  while (index < length) {\n    if (state.reset) {\n      state.reset = false;\n      blocks[0] = state.block;\n      for (i = 1; i < blockCount + 1; ++i) {\n        blocks[i] = 0;\n      }\n    }\n    if (typeof message !== \"string\") {\n      for (i = state.start; index < length && i < byteCount; ++index) {\n        blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n      }\n    } else {\n      for (i = state.start; index < length && i < byteCount; ++index) {\n        code = message.charCodeAt(index);\n        if (code < 0x80) {\n          blocks[i >> 2] |= code << SHIFT[i++ & 3];\n        } else if (code < 0x800) {\n          blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        } else if (code < 0xd800 || code >= 0xe000) {\n          blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        } else {\n          code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n          blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        }\n      }\n    }\n    state.lastByteIndex = i;\n    if (i >= byteCount) {\n      state.start = i - byteCount;\n      state.block = blocks[blockCount];\n      for (i = 0; i < blockCount; ++i) {\n        s[i] ^= blocks[i];\n      }\n      f(s);\n      state.reset = true;\n    } else {\n      state.start = i;\n    }\n  }\n\n  // finalize\n  i = state.lastByteIndex;\n  blocks[i >> 2] |= KECCAK_PADDING[i & 3];\n  if (state.lastByteIndex === byteCount) {\n    blocks[0] = blocks[blockCount];\n    for (i = 1; i < blockCount + 1; ++i) {\n      blocks[i] = 0;\n    }\n  }\n  blocks[blockCount - 1] |= 0x80000000;\n  for (i = 0; i < blockCount; ++i) {\n    s[i] ^= blocks[i];\n  }\n  f(s);\n\n  // toString\n  var hex = '',\n      i = 0,\n      j = 0,\n      block;\n  while (j < outputBlocks) {\n    for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n      block = s[i];\n      hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];\n    }\n    if (j % blockCount === 0) {\n      f(s);\n      i = 0;\n    }\n  }\n  return \"0x\" + hex;\n};\n\nvar f = function f(s) {\n  var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n\n  for (n = 0; n < 48; n += 2) {\n    c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n    c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n    c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n    c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n    c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n    c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n    c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n    c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n    c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n    c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n    h = c8 ^ (c2 << 1 | c3 >>> 31);\n    l = c9 ^ (c3 << 1 | c2 >>> 31);\n    s[0] ^= h;\n    s[1] ^= l;\n    s[10] ^= h;\n    s[11] ^= l;\n    s[20] ^= h;\n    s[21] ^= l;\n    s[30] ^= h;\n    s[31] ^= l;\n    s[40] ^= h;\n    s[41] ^= l;\n    h = c0 ^ (c4 << 1 | c5 >>> 31);\n    l = c1 ^ (c5 << 1 | c4 >>> 31);\n    s[2] ^= h;\n    s[3] ^= l;\n    s[12] ^= h;\n    s[13] ^= l;\n    s[22] ^= h;\n    s[23] ^= l;\n    s[32] ^= h;\n    s[33] ^= l;\n    s[42] ^= h;\n    s[43] ^= l;\n    h = c2 ^ (c6 << 1 | c7 >>> 31);\n    l = c3 ^ (c7 << 1 | c6 >>> 31);\n    s[4] ^= h;\n    s[5] ^= l;\n    s[14] ^= h;\n    s[15] ^= l;\n    s[24] ^= h;\n    s[25] ^= l;\n    s[34] ^= h;\n    s[35] ^= l;\n    s[44] ^= h;\n    s[45] ^= l;\n    h = c4 ^ (c8 << 1 | c9 >>> 31);\n    l = c5 ^ (c9 << 1 | c8 >>> 31);\n    s[6] ^= h;\n    s[7] ^= l;\n    s[16] ^= h;\n    s[17] ^= l;\n    s[26] ^= h;\n    s[27] ^= l;\n    s[36] ^= h;\n    s[37] ^= l;\n    s[46] ^= h;\n    s[47] ^= l;\n    h = c6 ^ (c0 << 1 | c1 >>> 31);\n    l = c7 ^ (c1 << 1 | c0 >>> 31);\n    s[8] ^= h;\n    s[9] ^= l;\n    s[18] ^= h;\n    s[19] ^= l;\n    s[28] ^= h;\n    s[29] ^= l;\n    s[38] ^= h;\n    s[39] ^= l;\n    s[48] ^= h;\n    s[49] ^= l;\n\n    b0 = s[0];\n    b1 = s[1];\n    b32 = s[11] << 4 | s[10] >>> 28;\n    b33 = s[10] << 4 | s[11] >>> 28;\n    b14 = s[20] << 3 | s[21] >>> 29;\n    b15 = s[21] << 3 | s[20] >>> 29;\n    b46 = s[31] << 9 | s[30] >>> 23;\n    b47 = s[30] << 9 | s[31] >>> 23;\n    b28 = s[40] << 18 | s[41] >>> 14;\n    b29 = s[41] << 18 | s[40] >>> 14;\n    b20 = s[2] << 1 | s[3] >>> 31;\n    b21 = s[3] << 1 | s[2] >>> 31;\n    b2 = s[13] << 12 | s[12] >>> 20;\n    b3 = s[12] << 12 | s[13] >>> 20;\n    b34 = s[22] << 10 | s[23] >>> 22;\n    b35 = s[23] << 10 | s[22] >>> 22;\n    b16 = s[33] << 13 | s[32] >>> 19;\n    b17 = s[32] << 13 | s[33] >>> 19;\n    b48 = s[42] << 2 | s[43] >>> 30;\n    b49 = s[43] << 2 | s[42] >>> 30;\n    b40 = s[5] << 30 | s[4] >>> 2;\n    b41 = s[4] << 30 | s[5] >>> 2;\n    b22 = s[14] << 6 | s[15] >>> 26;\n    b23 = s[15] << 6 | s[14] >>> 26;\n    b4 = s[25] << 11 | s[24] >>> 21;\n    b5 = s[24] << 11 | s[25] >>> 21;\n    b36 = s[34] << 15 | s[35] >>> 17;\n    b37 = s[35] << 15 | s[34] >>> 17;\n    b18 = s[45] << 29 | s[44] >>> 3;\n    b19 = s[44] << 29 | s[45] >>> 3;\n    b10 = s[6] << 28 | s[7] >>> 4;\n    b11 = s[7] << 28 | s[6] >>> 4;\n    b42 = s[17] << 23 | s[16] >>> 9;\n    b43 = s[16] << 23 | s[17] >>> 9;\n    b24 = s[26] << 25 | s[27] >>> 7;\n    b25 = s[27] << 25 | s[26] >>> 7;\n    b6 = s[36] << 21 | s[37] >>> 11;\n    b7 = s[37] << 21 | s[36] >>> 11;\n    b38 = s[47] << 24 | s[46] >>> 8;\n    b39 = s[46] << 24 | s[47] >>> 8;\n    b30 = s[8] << 27 | s[9] >>> 5;\n    b31 = s[9] << 27 | s[8] >>> 5;\n    b12 = s[18] << 20 | s[19] >>> 12;\n    b13 = s[19] << 20 | s[18] >>> 12;\n    b44 = s[29] << 7 | s[28] >>> 25;\n    b45 = s[28] << 7 | s[29] >>> 25;\n    b26 = s[38] << 8 | s[39] >>> 24;\n    b27 = s[39] << 8 | s[38] >>> 24;\n    b8 = s[48] << 14 | s[49] >>> 18;\n    b9 = s[49] << 14 | s[48] >>> 18;\n\n    s[0] = b0 ^ ~b2 & b4;\n    s[1] = b1 ^ ~b3 & b5;\n    s[10] = b10 ^ ~b12 & b14;\n    s[11] = b11 ^ ~b13 & b15;\n    s[20] = b20 ^ ~b22 & b24;\n    s[21] = b21 ^ ~b23 & b25;\n    s[30] = b30 ^ ~b32 & b34;\n    s[31] = b31 ^ ~b33 & b35;\n    s[40] = b40 ^ ~b42 & b44;\n    s[41] = b41 ^ ~b43 & b45;\n    s[2] = b2 ^ ~b4 & b6;\n    s[3] = b3 ^ ~b5 & b7;\n    s[12] = b12 ^ ~b14 & b16;\n    s[13] = b13 ^ ~b15 & b17;\n    s[22] = b22 ^ ~b24 & b26;\n    s[23] = b23 ^ ~b25 & b27;\n    s[32] = b32 ^ ~b34 & b36;\n    s[33] = b33 ^ ~b35 & b37;\n    s[42] = b42 ^ ~b44 & b46;\n    s[43] = b43 ^ ~b45 & b47;\n    s[4] = b4 ^ ~b6 & b8;\n    s[5] = b5 ^ ~b7 & b9;\n    s[14] = b14 ^ ~b16 & b18;\n    s[15] = b15 ^ ~b17 & b19;\n    s[24] = b24 ^ ~b26 & b28;\n    s[25] = b25 ^ ~b27 & b29;\n    s[34] = b34 ^ ~b36 & b38;\n    s[35] = b35 ^ ~b37 & b39;\n    s[44] = b44 ^ ~b46 & b48;\n    s[45] = b45 ^ ~b47 & b49;\n    s[6] = b6 ^ ~b8 & b0;\n    s[7] = b7 ^ ~b9 & b1;\n    s[16] = b16 ^ ~b18 & b10;\n    s[17] = b17 ^ ~b19 & b11;\n    s[26] = b26 ^ ~b28 & b20;\n    s[27] = b27 ^ ~b29 & b21;\n    s[36] = b36 ^ ~b38 & b30;\n    s[37] = b37 ^ ~b39 & b31;\n    s[46] = b46 ^ ~b48 & b40;\n    s[47] = b47 ^ ~b49 & b41;\n    s[8] = b8 ^ ~b0 & b2;\n    s[9] = b9 ^ ~b1 & b3;\n    s[18] = b18 ^ ~b10 & b12;\n    s[19] = b19 ^ ~b11 & b13;\n    s[28] = b28 ^ ~b20 & b22;\n    s[29] = b29 ^ ~b21 & b23;\n    s[38] = b38 ^ ~b30 & b32;\n    s[39] = b39 ^ ~b31 & b33;\n    s[48] = b48 ^ ~b40 & b42;\n    s[49] = b49 ^ ~b41 & b43;\n\n    s[0] ^= RC[n];\n    s[1] ^= RC[n + 1];\n  }\n};\n\nvar keccak = function keccak(bits) {\n  return function (str) {\n    var msg;\n    if (str.slice(0, 2) === \"0x\") {\n      msg = [];\n      for (var i = 2, l = str.length; i < l; i += 2) {\n        msg.push(parseInt(str.slice(i, i + 2), 16));\n      }\n    } else {\n      msg = str;\n    }\n    return update(Keccak(bits, bits), msg);\n  };\n};\n\nmodule.exports = {\n  keccak256: keccak(256),\n  keccak512: keccak(512),\n  keccak256s: keccak(256),\n  keccak512s: keccak(512)\n};","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\nvar utf8 = require('utf8');\nvar Hash = require(\"eth-lib/lib/hash\");\n\n\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBN = function (object) {\n    return object instanceof BN ||\n        (object && object.constructor && object.constructor.name === 'BN');\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\nvar toBN = function(number){\n    try {\n        return numberToBN.apply(null, arguments);\n    } catch(e) {\n        throw new Error(e + ' Given value: \"'+ number +'\"');\n    }\n};\n\n\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\nvar toTwosComplement = function (number) {\n    return '0x'+ toBN(number).toTwos(256).toString(16, 64);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar isAddress = function (address) {\n    // check if it has the basic requirements of an address\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        return false;\n        // If it's ALL lowercase or ALL upppercase\n    } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n        return true;\n        // Otherwise check each case\n    } else {\n        return checkAddressChecksum(address);\n    }\n};\n\n\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar checkAddressChecksum = function (address) {\n    // Check each case\n    address = address.replace(/^0x/i,'');\n    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');\n\n    for (var i = 0; i < 40; i++ ) {\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar leftPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar rightPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : \"0\"));\n};\n\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar utf8ToHex = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n        // }\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToUtf8 = function(hex) {\n    if (!isHexStrict(hex))\n        throw new Error('The parameter \"'+ hex +'\" must be a valid HEX string.');\n\n    var str = \"\";\n    var code = 0;\n    hex = hex.replace(/^0x/i,'');\n\n    // remove 00 padding from either side\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n\n    var l = hex.length;\n\n    for (var i=0; i < l; i+=2) {\n        code = parseInt(hex.substr(i, 2), 16);\n        // if (code !== 0) {\n        str += String.fromCharCode(code);\n        // }\n    }\n\n    return utf8.decode(str);\n};\n\n\n/**\n * Converts value to it's number representation\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumber = function (value) {\n    if (!value) {\n        return value;\n    }\n\n    return toBN(value).toNumber();\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumberString = function (value) {\n    if (!value) return value;\n\n    return toBN(value).toString(10);\n};\n\n\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar numberToHex = function (value) {\n    if (_.isNull(value) || _.isUndefined(value)) {\n        return value;\n    }\n\n    if (!isFinite(value) && !isHexStrict(value)) {\n        throw new Error('Given input \"'+value+'\" is not a number.');\n    }\n\n    var number = toBN(value);\n    var result = number.toString(16);\n\n    return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\nvar bytesToHex = function(bytes) {\n    for (var hex = [], i = 0; i < bytes.length; i++) {\n        /* jshint ignore:start */\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n        /* jshint ignore:end */\n    }\n    return '0x'+ hex.join(\"\");\n};\n\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\nvar hexToBytes = function(hex) {\n    hex = hex.toString(16);\n\n    if (!isHexStrict(hex)) {\n        throw new Error('Given value \"'+ hex +'\" is not a valid hex string.');\n    }\n\n    hex = hex.replace(/^0x/i,'');\n\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object} value\n * @param {Boolean} returnType\n * @return {String}\n */\nvar toHex = function (value, returnType) {\n    /*jshint maxcomplexity: false */\n\n    if (isAddress(value)) {\n        return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');\n    }\n\n    if (_.isBoolean(value)) {\n        return returnType ? 'bool' : value ? '0x01' : '0x00';\n    }\n\n\n    if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n        return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n    }\n\n    // if its a negative number, pass it through numberToHex\n    if (_.isString(value)) {\n        if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n            return returnType ? 'int256' : numberToHex(value);\n        } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n            return returnType ? 'bytes' : value;\n        } else if (!isFinite(value)) {\n            return returnType ? 'string' : utf8ToHex(value);\n        }\n    }\n\n    return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n};\n\n\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHexStrict = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));\n};\n\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHex = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));\n};\n\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * TODO UNDOCUMENTED\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * TODO UNDOCUMENTED\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n        return true;\n    }\n    return false;\n};\n\n\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nvar sha3 = function (value) {\n    if (isHexStrict(value) && /^0x/i.test((value).toString())) {\n        value = hexToBytes(value);\n    }\n\n    var returnValue = Hash.keccak256(value); // jshint ignore:line\n\n    if(returnValue === SHA3_NULL_S) {\n        return null;\n    } else {\n        return returnValue;\n    }\n};\n// expose the under the hood keccak256\nsha3._Hash = Hash;\n\n\nmodule.exports = {\n    BN: BN,\n    isBN: isBN,\n    isBigNumber: isBigNumber,\n    toBN: toBN,\n    isAddress: isAddress,\n    isBloom: isBloom, // TODO UNDOCUMENTED\n    isTopic: isTopic, // TODO UNDOCUMENTED\n    checkAddressChecksum: checkAddressChecksum,\n    utf8ToHex: utf8ToHex,\n    hexToUtf8: hexToUtf8,\n    hexToNumber: hexToNumber,\n    hexToNumberString: hexToNumberString,\n    numberToHex: numberToHex,\n    toHex: toHex,\n    hexToBytes: hexToBytes,\n    bytesToHex: bytesToHex,\n    isHex: isHex,\n    isHexStrict: isHexStrict,\n    leftPad: leftPad,\n    rightPad: rightPad,\n    toTwosComplement: toTwosComplement,\n    sha3: sha3\n};\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\n\n\nvar _elementaryName = function (name) {\n    /*jshint maxcomplexity:false */\n\n    if (name.startsWith('int[')) {\n        return 'int256' + name.slice(3);\n    } else if (name === 'int') {\n        return 'int256';\n    } else if (name.startsWith('uint[')) {\n        return 'uint256' + name.slice(4);\n    } else if (name === 'uint') {\n        return 'uint256';\n    } else if (name.startsWith('fixed[')) {\n        return 'fixed128x128' + name.slice(5);\n    } else if (name === 'fixed') {\n        return 'fixed128x128';\n    } else if (name.startsWith('ufixed[')) {\n        return 'ufixed128x128' + name.slice(6);\n    } else if (name === 'ufixed') {\n        return 'ufixed128x128';\n    }\n    return name;\n};\n\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n    var typesize = /^\\D+(\\d+).*$/.exec(type);\n    return typesize ? parseInt(typesize[1], 10) : null;\n};\n\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n    var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n    return arraySize ? parseInt(arraySize[1], 10) : null;\n};\n\nvar _parseNumber = function (arg) {\n    var type = typeof arg;\n    if (type === 'string') {\n        if (utils.isHexStrict(arg)) {\n            return new BN(arg.replace(/0x/i,''), 16);\n        } else {\n            return new BN(arg, 10);\n        }\n    } else if (type === 'number') {\n        return new BN(arg);\n    } else if (utils.isBigNumber(arg)) {\n        return new BN(arg.toString(10));\n    } else if (utils.isBN(arg)) {\n        return arg;\n    } else {\n        throw new Error(arg +' is not a number');\n    }\n};\n\nvar _solidityPack = function (type, value, arraySize) {\n    /*jshint maxcomplexity:false */\n\n    var size, num;\n    type = _elementaryName(type);\n\n\n    if (type === 'bytes') {\n\n        if (value.replace(/^0x/i,'').length % 2 !== 0) {\n            throw new Error('Invalid bytes characters '+ value.length);\n        }\n\n        return value;\n    } else if (type === 'string') {\n        return utils.utf8ToHex(value);\n    } else if (type === 'bool') {\n        return value ? '01' : '00';\n    } else if (type.startsWith('address')) {\n        if(arraySize) {\n            size = 64;\n        } else {\n            size = 40;\n        }\n\n        if(!utils.isAddress(value)) {\n            throw new Error(value +' is not a valid address, or the checksum is invalid.');\n        }\n\n        return utils.leftPad(value.toLowerCase(), size);\n    }\n\n    size = _parseTypeN(type);\n\n    if (type.startsWith('bytes')) {\n\n        if(!size) {\n            throw new Error('bytes[] not yet supported in solidity');\n        }\n\n        // must be 32 byte slices when in an array\n        if(arraySize) {\n            size = 32;\n        }\n\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {\n            throw new Error('Invalid bytes' + size +' for '+ value);\n        }\n\n        return utils.rightPad(value, size * 2);\n    } else if (type.startsWith('uint')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid uint'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            throw new Error('Supplied uint '+ num.toString() +' is negative');\n        }\n\n        return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n    } else if (type.startsWith('int')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid int'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            return num.toTwos(size).toString('hex');\n        } else {\n            return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n        }\n\n    } else {\n        // FIXME: support all other types\n        throw new Error('Unsupported or invalid type: ' + type);\n    }\n};\n\n\nvar _processSoliditySha3Args = function (arg) {\n    /*jshint maxcomplexity:false */\n\n    if(_.isArray(arg)) {\n        throw new Error('Autodetection of array types is not supported.');\n    }\n\n    var type, value = '';\n    var hexArg, arraySize;\n\n    // if type is given\n    if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n        type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n        value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n\n    // otherwise try to guess the type\n    } else {\n\n        type = utils.toHex(arg, true);\n        value = utils.toHex(arg);\n\n        if (!type.startsWith('int') && !type.startsWith('uint')) {\n            type = 'bytes';\n        }\n    }\n\n    if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n        value = new BN(value);\n    }\n\n    // get the array size\n    if(_.isArray(value)) {\n        arraySize = _parseTypeNArray(type);\n        if(arraySize && value.length !== arraySize) {\n            throw new Error(type +' is not matching the given array '+ JSON.stringify(value));\n        } else {\n            arraySize = value.length;\n        }\n    }\n\n\n    if (_.isArray(value)) {\n        hexArg = value.map(function (val) {\n            return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');\n        });\n        return hexArg.join('');\n    } else {\n        hexArg = _solidityPack(type, value, arraySize);\n        return hexArg.toString('hex').replace('0x','');\n    }\n\n};\n\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n    /*jshint maxcomplexity:false */\n\n    var args = Array.prototype.slice.call(arguments);\n\n    var hexArgs = _.map(args, _processSoliditySha3Args);\n\n    // console.log(args, hexArgs);\n    // console.log('0x'+ hexArgs.join(''));\n\n    return utils.sha3('0x'+ hexArgs.join(''));\n};\n\n\nmodule.exports = soliditySha3;\n","module.exports = window.crypto;","module.exports = require('crypto');","var randomHex = function(size, callback) {\n    var crypto = require('./crypto.js');\n    var isCallback = (typeof callback === 'function');\n\n    \n    if (size > 65536) {\n        if(isCallback) {\n            callback(new Error('Requested too many random bytes.'));\n        } else {\n            throw new Error('Requested too many random bytes.');\n        }\n    };\n\n\n    // is node\n    if (typeof crypto !== 'undefined' && crypto.randomBytes) {\n\n        if(isCallback) {\n            crypto.randomBytes(size, function(err, result){\n                if(!err) {\n                    callback(null, '0x'+ result.toString('hex'));\n                } else {\n                    callback(error);\n                }\n            })\n        } else {\n            return '0x'+ crypto.randomBytes(size).toString('hex');\n        }\n\n    // is browser\n    } else {\n        var cryptoLib;\n\n        if (typeof crypto !== 'undefined') {\n            cryptoLib = crypto;\n        } else if(typeof msCrypto !== 'undefined') {\n            cryptoLib = msCrypto;\n        }\n\n        if (cryptoLib && cryptoLib.getRandomValues) {\n            var randomBytes = cryptoLib.getRandomValues(new Uint8Array(size));\n            var returnValue = '0x'+ Array.from(randomBytes).map(function(arr){ return arr.toString(16); }).join('');\n\n            if(isCallback) {\n                callback(null, returnValue);\n            } else {\n                return returnValue;\n            }\n\n        // not crypto object\n        } else {\n            var error = new Error('No \"crypto\" object available. This Browser doesn\\'t support generating secure random bytes.');\n\n            if(isCallback) {\n                callback(error);\n            } else {\n               throw error;\n            }\n        }\n    }\n};\n\n\nmodule.exports = randomHex;\n","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\nvar _ = require('underscore');\nvar ethjsUnit = require('ethjs-unit');\nvar utils = require('./utils.js');\nvar soliditySha3 = require('./soliditySha3.js');\nvar randomHex = require('randomhex');\n\n\n\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @method _fireError\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @return {Object} the emitter\n */\nvar _fireError = function (error, emitter, reject, callback) {\n    /*jshint maxcomplexity: 10 */\n\n    // add data if given\n    if(_.isObject(error) && !(error instanceof Error) &&  error.data) {\n        if(_.isObject(error.data) || _.isArray(error.data)) {\n            error.data = JSON.stringify(error.data, null, 2);\n        }\n\n        error = error.message +\"\\n\"+ error.data;\n    }\n\n    if(_.isString(error)) {\n        error = new Error(error);\n    }\n\n    if (_.isFunction(callback)) {\n        callback(error);\n    }\n    if (_.isFunction(reject)) {\n        // suppress uncatched error if an error listener is present\n        // OR suppress uncatched error if an callback listener is present\n        if (emitter &&\n            (_.isFunction(emitter.listeners) &&\n            emitter.listeners('error').length) || _.isFunction(callback)) {\n            emitter.catch(function(){});\n        }\n        // reject later, to be able to return emitter\n        setTimeout(function () {\n            reject(error);\n        }, 1);\n    }\n\n    if(emitter && _.isFunction(emitter.emit)) {\n        // emit later, to be able to return emitter\n        setTimeout(function () {\n            emitter.emit('error', error);\n            emitter.removeAllListeners();\n        }, 1);\n    }\n\n    return emitter;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method _jsonInterfaceMethodToString\n * @param {Object} json\n * @return {String} full function/event name\n */\nvar _jsonInterfaceMethodToString = function (json) {\n    if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    return json.name + '(' + _flattenTypes(false, json.inputs).join(',') + ')';\n};\n\n\n/**\n * Should be used to flatten json abi inputs/outputs into an array of type-representing-strings\n *\n * @method _flattenTypes\n * @param {bool} includeTuple\n * @param {Object} puts\n * @return {Array} parameters as strings\n */\nvar _flattenTypes = function(includeTuple, puts)\n{\n    // console.log(\"entered _flattenTypes. inputs/outputs: \" + puts)\n    var types = [];\n\n    puts.forEach(function(param) {\n        if (typeof param.components === 'object') {\n            if (param.type.substring(0, 5) !== 'tuple') {\n                throw new Error('components found but type is not tuple; report on GitHub');\n            }\n            var suffix = '';\n            var arrayBracket = param.type.indexOf('[');\n            if (arrayBracket >= 0) { suffix = param.type.substring(arrayBracket); }\n            var result = _flattenTypes(includeTuple, param.components);\n            // console.log(\"result should have things: \" + result)\n            if(_.isArray(result) && includeTuple) {\n                // console.log(\"include tuple word, and its an array. joining...: \" + result.types)\n                types.push('tuple(' + result.join(',') + ')' + suffix);\n            }\n            else if(!includeTuple) {\n                // console.log(\"don't include tuple, but its an array. joining...: \" + result)\n                types.push('(' + result.join(',') + ')' + suffix);\n            }\n            else {\n                // console.log(\"its a single type within a tuple: \" + result.types)\n                types.push('(' + result + ')');\n            }\n        } else {\n            // console.log(\"its a type and not directly in a tuple: \" + param.type)\n            types.push(param.type);\n        }\n    });\n\n    return types;\n};\n\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method hexToAscii\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToAscii = function(hex) {\n    if (!utils.isHexStrict(hex))\n        throw new Error('The parameter must be a valid HEX string.');\n\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method asciiToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar asciiToHex = function(str) {\n    if(!str)\n        return \"0x00\";\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n\n\n/**\n * Returns value of unit in Wei\n *\n * @method getUnitValue\n * @param {String} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getUnitValue = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    if (!ethjsUnit.unitMap[unit]) {\n        throw new Error('This unit \"'+ unit +'\" doesn\\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));\n    }\n    return unit;\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar fromWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar toWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);\n};\n\n\n\n\n/**\n * Converts to a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @return {String}\n */\nvar toChecksumAddress = function (address) {\n    if (typeof address === 'undefined') return '';\n\n    if(!/^(0x)?[0-9a-f]{40}$/i.test(address))\n        throw new Error('Given address \"'+ address +'\" is not a valid Ethereum address.');\n\n\n\n    address = address.toLowerCase().replace(/^0x/i,'');\n    var addressHash = utils.sha3(address).replace(/^0x/i,'');\n    var checksumAddress = '0x';\n\n    for (var i = 0; i < address.length; i++ ) {\n        // If ith character is 9 to f then make it uppercase\n        if (parseInt(addressHash[i], 16) > 7) {\n            checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n\n\n\nmodule.exports = {\n    _fireError: _fireError,\n    _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n    _flattenTypes: _flattenTypes,\n    // extractDisplayName: extractDisplayName,\n    // extractTypeName: extractTypeName,\n    randomHex: randomHex,\n    _: _,\n    BN: utils.BN,\n    isBN: utils.isBN,\n    isBigNumber: utils.isBigNumber,\n    isHex: utils.isHex,\n    isHexStrict: utils.isHexStrict,\n    sha3: utils.sha3,\n    keccak256: utils.sha3,\n    soliditySha3: soliditySha3,\n    isAddress: utils.isAddress,\n    checkAddressChecksum: utils.checkAddressChecksum,\n    toChecksumAddress: toChecksumAddress,\n    toHex: utils.toHex,\n    toBN: utils.toBN,\n\n    bytesToHex: utils.bytesToHex,\n    hexToBytes: utils.hexToBytes,\n\n    hexToNumberString: utils.hexToNumberString,\n\n    hexToNumber: utils.hexToNumber,\n    toDecimal: utils.hexToNumber, // alias\n\n    numberToHex: utils.numberToHex,\n    fromDecimal: utils.numberToHex, // alias\n\n    hexToUtf8: utils.hexToUtf8,\n    hexToString: utils.hexToUtf8,\n    toUtf8: utils.hexToUtf8,\n\n    utf8ToHex: utils.utf8ToHex,\n    stringToHex: utils.utf8ToHex,\n    fromUtf8: utils.utf8ToHex,\n\n    hexToAscii: hexToAscii,\n    toAscii: hexToAscii,\n    asciiToHex: asciiToHex,\n    fromAscii: asciiToHex,\n\n    unitMap: ethjsUnit.unitMap,\n    toWei: toWei,\n    fromWei: fromWei,\n\n    padLeft: utils.leftPad,\n    leftPad: utils.leftPad,\n    padRight: utils.rightPad,\n    rightPad: utils.rightPad,\n    toTwosComplement: utils.toTwosComplement\n};\n\n","import { toChecksumAddress } from 'web3-utils'\n\n// Check address equality without checksums\nexport function addressesEqual(first, second) {\n  first = first && toChecksumAddress(first)\n  second = second && toChecksumAddress(second)\n  return first === second\n}\n\nexport const addressPattern = '(0x)?[0-9a-fA-F]{40}'\n\n/**\n * Shorten an Ethereum address. `charsLength` allows to change the number of\n * characters on both sides of the ellipsis.\n *\n * Examples:\n *   shortenAddress('0x19731977931271')    // 0x1973…1271\n *   shortenAddress('0x19731977931271', 2) // 0x19…71\n *   shortenAddress('0x197319')            // 0x197319 (already short enough)\n *\n * @param {string} address The address to shorten\n * @param {number} [charsLength=4] The number of characters to change on both sides of the ellipsis\n * @returns {string} The shortened address\n */\nexport function shortenAddress(address, charsLength = 4) {\n  const prefixLength = 2 // \"0x\"\n  if (!address) {\n    return ''\n  }\n  if (address.length < charsLength * 2 + prefixLength) {\n    return address\n  }\n  return (\n    address.slice(0, charsLength + prefixLength) +\n    '…' +\n    address.slice(-charsLength)\n  )\n}\n\n// Re-export some web3-utils functions\nexport { isAddress, toChecksumAddress } from 'web3-utils'\n",null,"import Aragon from '@aragon/client'\nimport { of } from './rxjs'\nimport { getTestTokenAddresses } from './testnet'\nimport { ETHER_TOKEN_FAKE_ADDRESS, isTokenVerified } from './lib/token-utils'\nimport { addressesEqual } from './lib/web3-utils'\nimport tokenDecimalsAbi from './abi/token-decimals.json'\nimport tokenNameAbi from './abi/token-name.json'\nimport tokenSymbolAbi from './abi/token-symbol.json'\nimport vaultBalanceAbi from './abi/vault-balance.json'\nimport vaultEventAbi from './abi/vault-events.json'\n\nconst tokenAbi = [].concat(tokenDecimalsAbi, tokenNameAbi, tokenSymbolAbi)\nconst vaultAbi = [].concat(vaultBalanceAbi, vaultEventAbi)\n\nconst INITIALIZATION_TRIGGER = Symbol('INITIALIZATION_TRIGGER')\nconst TEST_TOKEN_ADDRESSES = []\nconst tokenContracts = new Map() // Addr -> External contract\nconst tokenDecimals = new Map() // External contract -> decimals\nconst tokenName = new Map() // External contract -> name\nconst tokenSymbols = new Map() // External contract -> symbol\n\nconst ETH_CONTRACT = Symbol('ETH_CONTRACT')\n\nconst app = new Aragon()\n\n/*\n * Calls `callback` exponentially, everytime `retry()` is called.\n *\n * Usage:\n *\n * retryEvery(retry => {\n *  // do something\n *\n *  if (condition) {\n *    // retry in 1, 2, 4, 8 seconds… as long as the condition passes.\n *    retry()\n *  }\n * }, 1000, 2)\n *\n */\nconst retryEvery = (callback, initialRetryTimer = 1000, increaseFactor = 5) => {\n  const attempt = (retryTimer = initialRetryTimer) => {\n    // eslint-disable-next-line standard/no-callback-literal\n    callback(() => {\n      console.error(`Retrying in ${retryTimer / 1000}s...`)\n\n      // Exponentially backoff attempts\n      setTimeout(() => attempt(retryTimer * increaseFactor), retryTimer)\n    })\n  }\n  attempt()\n}\n\n// Get the token address to initialize ourselves\nretryEvery(retry => {\n  app\n    .call('vault')\n    .first()\n    .subscribe(\n      vaultAddress => initialize(vaultAddress, ETHER_TOKEN_FAKE_ADDRESS),\n      err => {\n        console.error(\n          'Could not start background script execution due to the contract not loading the token:',\n          err\n        )\n        retry()\n      }\n    )\n})\n\nasync function initialize(vaultAddress, ethAddress) {\n  const vaultContract = app.external(vaultAddress, vaultAbi)\n\n  const network = await app\n    .network()\n    .take(1)\n    .toPromise()\n  TEST_TOKEN_ADDRESSES.push(...getTestTokenAddresses(network.type))\n\n  // Set up ETH placeholders\n  tokenContracts.set(ethAddress, ETH_CONTRACT)\n  tokenDecimals.set(ETH_CONTRACT, '18')\n  tokenName.set(ETH_CONTRACT, 'Ether')\n  tokenSymbols.set(ETH_CONTRACT, 'ETH')\n\n  return createStore({\n    network,\n    ethToken: {\n      address: ethAddress,\n    },\n    vault: {\n      address: vaultAddress,\n      contract: vaultContract,\n    },\n  })\n}\n\n// Hook up the script as an aragon.js store\nfunction createStore(settings) {\n  return app.store(\n    async (state, event) => {\n      const { vault } = settings\n      const { address: eventAddress, event: eventName } = event\n      let nextState = {\n        ...state,\n      }\n\n      if (eventName === INITIALIZATION_TRIGGER) {\n        nextState = await initializeState(nextState, settings)\n      } else if (addressesEqual(eventAddress, vault.address)) {\n        // Vault event\n        nextState = await vaultLoadBalance(nextState, event, settings)\n      } else {\n        // Finance event\n        switch (eventName) {\n          case 'NewPeriod':\n            // A new period is always started as part of the Finance app's initialization,\n            // so this is just a handy way to get information about the app we're running\n            // (e.g. its own address)\n            nextState.proxyAddress = eventAddress\n            break\n          case 'NewTransaction':\n            nextState = await newTransaction(nextState, event, settings)\n            break\n          default:\n            break\n        }\n      }\n\n      return nextState\n    },\n    [\n      // Always initialize the store with our own home-made event\n      of({ event: INITIALIZATION_TRIGGER }),\n      // Handle Vault events in case they're not always controlled by this Finance app\n      settings.vault.contract.events(),\n    ]\n  )\n}\n\n/***********************\n *                     *\n *   Event Handlers    *\n *                     *\n ***********************/\n\nasync function initializeState(state, settings) {\n  const nextState = {\n    ...state,\n    vaultAddress: settings.vault.address,\n  }\n\n  const withTestnetState = await loadTestnetState(nextState, settings)\n  const withEthBalance = await loadEthBalance(withTestnetState, settings)\n  return withEthBalance\n}\n\nasync function vaultLoadBalance(state, { returnValues: { token } }, settings) {\n  return {\n    ...state,\n    balances: await updateBalances(\n      state,\n      token || settings.ethToken.address,\n      settings\n    ),\n  }\n}\n\nasync function newTransaction(\n  state,\n  { transactionHash, returnValues: { reference, transactionId } },\n  settings\n) {\n  const transactionDetails = {\n    ...(await loadTransactionDetails(transactionId)),\n    reference,\n    transactionHash,\n    id: transactionId,\n  }\n  const transactions = await updateTransactions(state, transactionDetails)\n  const balances = await updateBalances(\n    state,\n    transactionDetails.token,\n    settings\n  )\n\n  return {\n    ...state,\n    balances,\n    transactions,\n  }\n}\n\n/***********************\n *                     *\n *       Helpers       *\n *                     *\n ***********************/\n\nasync function updateBalances({ balances = [] }, tokenAddress, settings) {\n  const tokenContract = tokenContracts.has(tokenAddress)\n    ? tokenContracts.get(tokenAddress)\n    : app.external(tokenAddress, tokenAbi)\n  tokenContracts.set(tokenAddress, tokenContract)\n\n  const balancesIndex = balances.findIndex(({ address }) =>\n    addressesEqual(address, tokenAddress)\n  )\n  if (balancesIndex === -1) {\n    return balances.concat(\n      await newBalanceEntry(tokenContract, tokenAddress, settings)\n    )\n  } else {\n    const newBalances = Array.from(balances)\n    newBalances[balancesIndex] = {\n      ...balances[balancesIndex],\n      amount: await loadTokenBalance(tokenAddress, settings),\n    }\n    return newBalances\n  }\n}\n\nfunction updateTransactions({ transactions = [] }, transactionDetails) {\n  const transactionsIndex = transactions.findIndex(\n    ({ id }) => id === transactionDetails.id\n  )\n  if (transactionsIndex === -1) {\n    return transactions.concat(transactionDetails)\n  } else {\n    const newTransactions = Array.from(transactions)\n    newTransactions[transactionsIndex] = transactionDetails\n    return newTransactions\n  }\n}\n\nasync function newBalanceEntry(tokenContract, tokenAddress, settings) {\n  const [balance, decimals, name, symbol] = await Promise.all([\n    loadTokenBalance(tokenAddress, settings),\n    loadTokenDecimals(tokenContract),\n    loadTokenName(tokenContract),\n    loadTokenSymbol(tokenContract),\n  ])\n\n  return {\n    decimals,\n    name,\n    symbol,\n    address: tokenAddress,\n    amount: balance,\n    verified:\n      isTokenVerified(tokenAddress, settings.network.type) ||\n      addressesEqual(tokenAddress, settings.ethToken.address),\n  }\n}\n\nasync function loadEthBalance(state, settings) {\n  return {\n    ...state,\n    balances: await updateBalances(state, settings.ethToken.address, settings),\n  }\n}\n\nfunction loadTokenBalance(tokenAddress, { vault }) {\n  return new Promise((resolve, reject) => {\n    vault.contract\n      .balance(tokenAddress)\n      .first()\n      .subscribe(resolve, reject)\n  })\n}\n\nfunction loadTokenDecimals(tokenContract) {\n  return new Promise((resolve, reject) => {\n    if (tokenDecimals.has(tokenContract)) {\n      resolve(tokenDecimals.get(tokenContract))\n    } else {\n      tokenContract\n        .decimals()\n        .first()\n        .subscribe(\n          decimals => {\n            tokenDecimals.set(tokenContract, decimals)\n            resolve(decimals)\n          },\n          () => {\n            // Decimals is optional\n            resolve('0')\n          }\n        )\n    }\n  })\n}\n\nfunction loadTokenName(tokenContract) {\n  return new Promise((resolve, reject) => {\n    if (tokenName.has(tokenContract)) {\n      resolve(tokenName.get(tokenContract))\n    } else {\n      tokenContract\n        .name()\n        .first()\n        .subscribe(\n          name => {\n            tokenName.set(tokenContract, name)\n            resolve(name)\n          },\n          () => {\n            // Name is optional\n            resolve('')\n          }\n        )\n    }\n  })\n}\n\nfunction loadTokenSymbol(tokenContract) {\n  return new Promise((resolve, reject) => {\n    if (tokenSymbols.has(tokenContract)) {\n      resolve(tokenSymbols.get(tokenContract))\n    } else {\n      tokenContract\n        .symbol()\n        .first()\n        .subscribe(\n          symbol => {\n            tokenSymbols.set(tokenContract, symbol)\n            resolve(symbol)\n          },\n          () => {\n            // Symbol is optional\n            resolve('')\n          }\n        )\n    }\n  })\n}\n\nfunction loadTransactionDetails(id) {\n  return new Promise((resolve, reject) =>\n    app\n      .call('getTransaction', id)\n      .first()\n      .subscribe(\n        transaction => resolve(marshallTransactionDetails(transaction)),\n        reject\n      )\n  )\n}\n\nfunction marshallTransactionDetails({\n  amount,\n  date,\n  entity,\n  isIncoming,\n  paymentId,\n  periodId,\n  token,\n}) {\n  return {\n    amount,\n    entity,\n    isIncoming,\n    paymentId,\n    periodId,\n    token,\n    date: marshallDate(date),\n  }\n}\n\nfunction marshallDate(date) {\n  // Represent dates as real numbers, as it's very unlikely they'll hit the limit...\n  // Adjust for js time (in ms vs s)\n  return parseInt(date, 10) * 1000\n}\n\n/**********************\n *                    *\n * RINKEBY TEST STATE *\n *                    *\n **********************/\n\nfunction loadTestnetState(nextState, settings) {\n  // Reload all the test tokens' balances for this DAO's vault\n  return loadTestnetTokenBalances(nextState, settings)\n}\n\nasync function loadTestnetTokenBalances(nextState, settings) {\n  let reducedState = nextState\n  for (const tokenAddress of TEST_TOKEN_ADDRESSES) {\n    reducedState = {\n      ...reducedState,\n      balances: await updateBalances(reducedState, tokenAddress, settings),\n    }\n  }\n  return reducedState\n}\n"]}