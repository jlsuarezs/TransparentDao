"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.isNameUsed=void 0;var _templatesBeta=require("@aragon/templates-beta"),_web3Utils=require("web3-utils"),_ens=require("../ens");const zeroAddress="0x0000000000000000000000000000000000000000",templates={democracy:{name:"Democracy",abi:_templatesBeta.templates.DemocracyTemplate.abi,appId:"democracy-template.aragonpm.eth",params:["name",// string
"holders",// array of addresses
"stakes",// array of token balances (token has 18 decimals, 1 token = 10^18)
"supportNeeded",// percentage in with 10^18 base (1% = 10^16, 100% = 10^18)
"minAcceptanceQuorum",// percentage in with 10^18 base
"voteDuration"// in seconds
]},multisig:{name:"Multisig",abi:_templatesBeta.templates.MultisigTemplate.abi,appId:"multisig-template.aragonpm.eth",params:["name",// string
"signers",// array of addresses
"neededSignatures"// number of signatures need, must be > 0 and <= signers.length
]}},Templates=(web3,apm,from)=>{const minGasPrice=(0,_web3Utils.toWei)("20","gwei"),newToken=async(template,name)=>{const call=template.methods.newToken(name,name),receipt=await call.send({from,gas:67e5,gasPrice:minGasPrice});return receipt.events.DeployToken.returnValues},newInstance=async(template,name,params)=>{const call=template.methods.newInstance(name,...params),receipt=await call.send({from,gas:67e5,gasPrice:minGasPrice});return receipt.events.DeployInstance.returnValues};return{newDAO:async(templateName,organizationName,params)=>{const tmplObj=templates[templateName];if(!tmplObj)throw new Error("No template found for that name");const contractAddress=await apm.getLatestVersionContract(tmplObj.appId);if(!contractAddress)throw new Error("No template contract found for that appId");const template=new web3.eth.Contract(tmplObj.abi,contractAddress),token=await newToken(template,organizationName),instance=await newInstance(template,organizationName,params);return[token,instance]}}},isNameUsed=async(name,opts={})=>{try{const addr=await(0,_ens.resolve)(`${name}.aragonid.eth`,opts);return addr!==zeroAddress}catch(err){if("ENS name not defined."===err.message)return!1;throw new Error(`ENS couldnâ€™t resolve the domain: ${name}.aragonid.eth`)}};// TODO: Load template info dynamically from APM content package.
// Maybe we can even do a simple markup language that aragon/aragon interprets
exports.isNameUsed=isNameUsed;var _default=Templates;exports.default=_default;