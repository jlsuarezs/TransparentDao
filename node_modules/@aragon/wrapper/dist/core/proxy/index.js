"use strict";var _Rx=require("rxjs/Rx");Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;class Proxy{constructor(address,jsonInterface,web3,initializationBlock=0){this.address=address,this.contract=new web3.eth.Contract(jsonInterface,address),this.web3=web3,this.initializationBlock=initializationBlock}// TODO: Make this a hot observable
events(eventNames){eventNames||(eventNames=["allEvents"]),Array.isArray(eventNames)||(eventNames=[eventNames]);let eventSource;return eventSource=1===eventNames.length?_Rx.Observable.fromEvent(this.contract.events[eventNames[0]]({fromBlock:this.initializationBlock}),"data"):_Rx.Observable.fromEvent(this.contract.events.allEvents({fromBlock:this.initializationBlock}),"data").filter(event=>eventNames.includes(event.event)),eventSource}call(method,...params){if(!this.contract.methods[method])throw new Error(`No method named ${method} on ${this.address}`);const lastParam=params[params.length-1];return"object"==typeof lastParam&&null!==lastParam?this.contract.methods[method](...params.slice(0,-1)).call(lastParam):this.contract.methods[method](...params).call()}async updateInitializationBlock(){const initBlock=await this.contract.methods.getInitializationBlock().call();this.initializationBlock=initBlock}}exports.default=Proxy;