"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault"),_ava=_interopRequireDefault(require("ava")),_sinon=_interopRequireDefault(require("sinon")),_events=require("events"),_index=_interopRequireDefault(require("./index"));_ava.default.afterEach.always(()=>{_sinon.default.restore()}),(0,_ava.default)("should get all the events",t=>{t.plan(1);// arrange
const eventEmitter=new _events.EventEmitter,web3Stub={eth:{Contract:_sinon.default.stub().returns({events:{allEvents:()=>eventEmitter}})}},instance=new _index.default(null,null,web3Stub),events=instance.events();// assert
events.subscribe(event=>{t.deepEqual(event,{foo:"bar"})}),eventEmitter.emit("data",{foo:"bar"})}),(0,_ava.default)("should get only the requested events",t=>{t.plan(2);// arrange
const eventEmitter=new _events.EventEmitter,web3Stub={eth:{Contract:_sinon.default.stub().returns({events:{allEvents:()=>eventEmitter}})}},instance=new _index.default(null,null,web3Stub),events=instance.events(["pay_fee","pay_service"]);// assert
events.subscribe(event=>{t.deepEqual(event.amount,5)}),eventEmitter.emit("data",{event:"pay_fee",amount:5}),eventEmitter.emit("data",{event:"pay_something_else",amount:10}),eventEmitter.emit("data",{event:"pay_service",amount:5})});