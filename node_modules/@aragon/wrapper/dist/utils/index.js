"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0}),exports.addressesEqual=addressesEqual,exports.includesAddress=includesAddress,exports.makeAddressMapProxy=makeAddressMapProxy,exports.makeProxy=makeProxy,exports.makeProxyFromABI=makeProxyFromABI,exports.getRecommendedGasLimit=getRecommendedGasLimit,exports.ANY_ENTITY=void 0;var _web3Utils=require("web3-utils"),_proxy=_interopRequireDefault(require("../core/proxy")),_interfaces=require("../interfaces");const DEFAULT_GAS_FUZZ_FACTOR=1.5,PREVIOUS_BLOCK_GAS_LIMIT_FACTOR=.95,ANY_ENTITY="0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF";exports.ANY_ENTITY=ANY_ENTITY;// Check address equality without checksums
function addressesEqual(first,second){return first=first&&first.toLowerCase(),second=second&&second.toLowerCase(),first===second}// "Safer" version of [].includes() for addresses
function includesAddress(arr,address){return arr.some(a=>addressesEqual(a,address))}function makeAddressMapProxy(target){return new Proxy(target,{get(target,property){return property in target?target[property]:"string"==typeof property&&(0,_web3Utils.isAddress)(property)?target[property.toLowerCase()]:void 0},set(target,property,value){return"string"==typeof property&&(0,_web3Utils.isAddress)(property)?target[property.toLowerCase()]=value:target[property]=value,!0}})}function makeProxy(address,interfaceName,web3,initializationBlock){const abi=(0,_interfaces.getAbi)(`aragon/${interfaceName}`);return makeProxyFromABI(address,abi,web3,initializationBlock)}function makeProxyFromABI(address,abi,web3,initializationBlock){return new _proxy.default(address,abi,web3,initializationBlock)}async function getRecommendedGasLimit(web3,estimatedGasLimit,{gasFuzzFactor=DEFAULT_GAS_FUZZ_FACTOR}={}){var _Mathround=Math.round;const latestBlock=await web3.eth.getBlock("latest"),latestBlockGasLimit=latestBlock.gasLimit,upperGasLimit=_Mathround(latestBlockGasLimit*PREVIOUS_BLOCK_GAS_LIMIT_FACTOR),bufferedGasLimit=_Mathround(estimatedGasLimit*gasFuzzFactor);return estimatedGasLimit>upperGasLimit?estimatedGasLimit:bufferedGasLimit<upperGasLimit?bufferedGasLimit:upperGasLimit}
//# sourceMappingURL=index.js.map