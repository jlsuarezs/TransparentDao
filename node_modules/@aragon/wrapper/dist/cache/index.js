"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _lowdb=_interopRequireDefault(require("lowdb")),_Memory=_interopRequireDefault(require("lowdb/adapters/Memory")),_LocalStorage=_interopRequireDefault(require("lowdb/adapters/LocalStorage")),_Rx=require("rxjs/Rx");/**
 * A cache.
 */class Cache{constructor(prefix){this.prefix=prefix;// Set up cache DB
let adapter=null;// Set default cache state
// Set up the changes observable
adapter="undefined"==typeof window?new _Memory.default:new _LocalStorage.default,this.db=(0,_lowdb.default)(adapter),this.db.defaults({}).write(),this.changes=new _Rx.Subject}getCacheKeyPath(key){return`${this.prefix}.${key}`}async set(key,value){// Some lowdb adapters are synchronous while others are asynchronous so
// let's always wrap it in a promise
await Promise.resolve(this.db.set(this.getCacheKeyPath(key),value).write()),this.changes.next({key,value})}get(key,defaultValue){return this.db.get(this.getCacheKeyPath(key)).value()||defaultValue}update(key,transition){return this.set(key,transition(this.get(key)))}/**
   * Observe the value of a key in cache over time
   *
   * @memberof Cache
   * @param  {string} key
   * @param  {*}      defaultValue
   * @return {Observable}
   */observe(key,defaultValue){return this.changes.filter(change=>change.key===key).map(change=>change.value).startWith(this.get(key,defaultValue))}}exports.default=Cache;
//# sourceMappingURL=index.js.map