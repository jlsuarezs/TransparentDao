"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault"),_ava=_interopRequireDefault(require("ava")),_sinon=_interopRequireDefault(require("sinon")),_index=_interopRequireDefault(require("./index"));_ava.default.afterEach.always(()=>{_sinon.default.restore()}),(0,_ava.default)("should set the cache and emit the change",async t=>{// arrange
const instance=new _index.default("counterapp"),dbWriteStub=_sinon.default.stub().returns(),dbSetStub=_sinon.default.stub().returns({write:dbWriteStub});// assert
// act
instance.db.set=dbSetStub,t.plan(3),instance.changes.subscribe(change=>{t.deepEqual(change,{key:"counter",value:5}),t.is(dbSetStub.getCall(0).args[0],"counterapp.counter"),t.is(dbSetStub.getCall(0).args[1],5)}),await instance.set("counter",5)}),(0,_ava.default)("should observe the key's value for changes",t=>{// arrange
const instance=new _index.default;// assert
// act
// assert
t.plan(2),instance.observe("counter",2).subscribe(value=>{// this should be called twice, first the default value and second our change
t.is(value,2)}),instance.changes.next({key:"something-else",value:10}),instance.changes.next({key:"counter",value:2})});
//# sourceMappingURL=index.test.js.map