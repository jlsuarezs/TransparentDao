"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault"),_ava=_interopRequireDefault(require("ava")),_sinon=_interopRequireDefault(require("sinon")),_Rx=require("rxjs/Rx"),_index=require("./index");_ava.default.afterEach.always(()=>{_sinon.default.restore()}),(0,_ava.default)("should create a request handler",async t=>{t.plan(4);// arrange
const requestStub=_Rx.Observable.create(observer=>{observer.next({request:{id:"uuid0",// this one should get filtered away
method:"notifications"}}),observer.next({request:{id:"uuid1",method:"cache",params:["get","settings"]}}),observer.next({request:{id:"uuid4",method:"cache",params:["set","settings"],value:{foo:"bar"}}}),observer.next({request:{id:"uuid6",method:"cache",params:["get","profile"]}}),observer.next({request:{// this one should NOT get filtered away, but assigned a default response of null
id:"uuid8",method:"cache"}})}),result=(0,_index.createRequestHandler)(requestStub,"cache",request=>"uuid8"===request.id?Promise.resolve():"set"===request.params[0]?Promise.reject(new Error(`no permissions to change ${request.params[1]}!!`)):Promise.resolve(`resolved ${request.params[1]}`));// assert
result.subscribe(value=>"uuid1"===value.id?t.is(value.payload,"resolved settings"):"uuid4"===value.id?t.is(value.payload.message,"no permissions to change settings!!"):"uuid6"===value.id?t.is(value.payload,"resolved profile"):"uuid8"===value.id?t.is(value.payload,null):void 0)}),(0,_ava.default)("should combine request handlers",async t=>{t.plan(2);// arrange
const handlerA=_Rx.Observable.create(observer=>{observer.next("handler for A")}),handlerB=_Rx.Observable.create(observer=>{observer.next("handler for B")}),result=(0,_index.combineRequestHandlers)(handlerA,handlerB);// assert
result.subscribe(value=>{t.true("handler for A"===value||"handler for B"===value)})});