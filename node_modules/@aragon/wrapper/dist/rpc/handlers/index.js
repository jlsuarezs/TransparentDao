"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0}),exports.createResponse=createResponse,exports.createRequestHandler=createRequestHandler,exports.combineRequestHandlers=combineRequestHandlers,Object.defineProperty(exports,"cache",{enumerable:!0,get:function get(){return _cache.default}}),Object.defineProperty(exports,"events",{enumerable:!0,get:function get(){return _events.default}}),Object.defineProperty(exports,"intent",{enumerable:!0,get:function get(){return _intent.default}}),Object.defineProperty(exports,"call",{enumerable:!0,get:function get(){return _call.default}}),Object.defineProperty(exports,"notifications",{enumerable:!0,get:function get(){return _notifications.default}}),Object.defineProperty(exports,"externalCall",{enumerable:!0,get:function get(){return _external.call}}),Object.defineProperty(exports,"externalEvents",{enumerable:!0,get:function get(){return _external.events}}),Object.defineProperty(exports,"identifier",{enumerable:!0,get:function get(){return _identifier.default}}),Object.defineProperty(exports,"accounts",{enumerable:!0,get:function get(){return _accounts.default}}),Object.defineProperty(exports,"describeScript",{enumerable:!0,get:function get(){return _describeScript.default}}),Object.defineProperty(exports,"web3Eth",{enumerable:!0,get:function get(){return _web3Eth.default}});var _Rx=require("rxjs/Rx"),_cache=_interopRequireDefault(require("./cache")),_events=_interopRequireDefault(require("./events")),_intent=_interopRequireDefault(require("./intent")),_call=_interopRequireDefault(require("./call")),_notifications=_interopRequireDefault(require("./notifications")),_external=require("./external"),_identifier=_interopRequireDefault(require("./identifier")),_accounts=_interopRequireDefault(require("./accounts")),_describeScript=_interopRequireDefault(require("./describe-script")),_web3Eth=_interopRequireDefault(require("./web3-eth"));function createResponse({request:{id}},{error,value=null,kind}){return"C"===kind?{}:error?{id,payload:error}:{id,payload:value}}function createRequestHandler(request$,requestType,handler){// Filter request types to match provided params
const filteredRequest$=request$.filter(({request})=>request.method===requestType);// Send request to handler and return response
return filteredRequest$.mergeMap(/**
     * Turn the promise returned by the handler into an observable and materialize it, i.e:
     * - if the promise rejects emit a Notification of kind 'E' with an error property
     * - if the promise resolves emit a Notification of kind 'N' (next) with a value property AND
     * another one of kind 'C' (complete) which we should filter out
     */({request,proxy,wrapper})=>_Rx.Observable.from(handler(request,proxy,wrapper)).materialize(),createResponse).filter(// filter empty responses caused by Notifications of kind 'C'
response=>response.payload!==void 0||response.error!==void 0)}function combineRequestHandlers(...handlers){return _Rx.Observable.merge(...handlers)}// Export request handlers