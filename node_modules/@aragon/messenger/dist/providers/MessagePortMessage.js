"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _Provider=_interopRequireDefault(require("./Provider")),_Rx=require("rxjs/Rx");/**
 * A provider that uses the MessagePort postMessage API to pass messages between windows.
 *
 * @param {Object} [target=self] An MessagePort (WebWorker instances are inherently MessagePorts).
 * @class MessagePortMessage
 * @extends {Provider}
 */class MessagePortMessage extends _Provider.default{// eslint-disable-next-line no-undef
constructor(target=self){super(),this.target=target}/**
   * An observable of messages being sent to this provider.
   *
   * @memberof MessagePortMessage
   * @instance
   * @returns {Observable}
   */messages(){return _Rx.Observable.fromEvent(this.target,"message",!1).filter(event=>// We can't use event.source in WebWorker messages as it seems to be null
// However, the fallback to check the target should always be true
(event.source||event.target)===this.target).pluck("data")}/**
   * Send a payload to the underlying target of this provider.
   *
   * @param {Object} payload
   * @memberof MessagePortMessage
   * @instance
   */send(payload){this.target.postMessage(payload)}}exports.default=MessagePortMessage;