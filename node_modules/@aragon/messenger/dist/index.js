"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.providers=void 0;var _jsonrpc=_interopRequireDefault(require("./jsonrpc")),_MessagePortMessage=_interopRequireDefault(require("./providers/MessagePortMessage")),_WindowMessage=_interopRequireDefault(require("./providers/WindowMessage")),_DevMessage=_interopRequireDefault(require("./providers/DevMessage"));const providers={MessagePortMessage:_MessagePortMessage.default,WindowMessage:_WindowMessage.default,DevMessage:_DevMessage.default/**
 * The RPC messenger used for sending requests and responses between contexts.
 *
 * @param {Provider} [provider=MessagePortMessage] The underlying provider that passes messages
 * @class Messenger
 */};exports.providers=providers;class Messenger{constructor(provider=new _MessagePortMessage.default){this.provider=provider}/**
   * Get the message bus of incoming messages
   *
   * @returns {Observable}
   * @memberof Messenger
   * @instance
   */bus(){return this.provider.messages()}/**
   * Get requests from the message bus.
   *
   * @returns {Observable}
   * @memberof Messenger
   * @instance
   */requests(){return this.bus().filter(message=>!_jsonrpc.default.isValidResponse(message))}/**
   * Get responses from the message bus.
   *
   * @returns {Observable}
   * @memberof Messenger
   * @instance
   */responses(){return this.bus().filter(_jsonrpc.default.isValidResponse)}/**
   * Send a response
   *
   * @param {string} id The ID of the request being responded to.
   * @param {any} result The result of the request.
   * @returns {string}
   * @memberof Messenger
   * @instance
   */sendResponse(id,result){const payload=_jsonrpc.default.encodeResponse(id,result);return this.provider.send(payload),payload.id}/**
   * Send a request
   *
   * @param {string} method The method name to call
   * @param {Array<any>} [params=[]] The parameters to send with the call
   * @returns {string} The ID of the payload that was sent
   * @memberof Messenger
   * @instance
   */send(method,params=[]){const payload=_jsonrpc.default.encodeRequest(method,params);return this.provider.send(payload),payload.id}/**
   * Helper method to send a request and listen for responses to that request
   *
   * @param {string} method The method name to call
   * @param {Array<any>} [params=[]] The parameters to send with the call
   * @returns {Observable} An observable of responses to the sent request
   * @memberof Messenger
   * @instance
   */sendAndObserveResponses(method,params=[]){const id=this.send(method,params);return this.responses().filter(message=>message.id===id)}/**
   * Helper method to send a request and listen for a single response to that request
   *
   * @param {string} method The method name to call
   * @param {Array<any>} [params] The parameters to send with the call
   * @returns {Observable} An observable that resolves to the response
   * @memberof Messenger
   * @instance
   */sendAndObserveResponse(method,params=[]){return this.sendAndObserveResponses(method,params).first()}}exports.default=Messenger;