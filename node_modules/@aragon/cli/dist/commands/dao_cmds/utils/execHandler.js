"use strict";

var _aragonjsWrapper = _interopRequireDefault(require("./aragonjs-wrapper"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var TaskList = require('listr');

var _require = require('../../../helpers/web3-fallback'),
    ensureWeb3 = _require.ensureWeb3;

var listrOpts = require('../../../helpers/listr-options');

var GAS_ESTIMATE_FUZZ_FACTOR = 2;

module.exports =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee6(dao, getTransactionPath, _ref) {
    var reporter, apm, network, silent, debug, web3, tasks;
    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            reporter = _ref.reporter, apm = _ref.apm, network = _ref.network, silent = _ref.silent, debug = _ref.debug;
            _context6.next = 3;
            return ensureWeb3(network);

          case 3:
            web3 = _context6.sent;
            tasks = new TaskList([{
              title: 'Generating transaction',
              task: function () {
                var _task2 = _asyncToGenerator(
                /*#__PURE__*/
                regeneratorRuntime.mark(function _callee4(ctx, _task) {
                  return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          _task.output = "Fetching DAO at ".concat(dao, "...");

                          if (ctx.accounts) {
                            _context4.next = 5;
                            break;
                          }

                          _context4.next = 4;
                          return web3.eth.getAccounts();

                        case 4:
                          ctx.accounts = _context4.sent;

                        case 5:
                          return _context4.abrupt("return", new Promise(function (resolve, reject) {
                            var wrapper, appsLoaded;

                            var tryFindTransactionPath =
                            /*#__PURE__*/
                            function () {
                              var _ref3 = _asyncToGenerator(
                              /*#__PURE__*/
                              regeneratorRuntime.mark(function _callee() {
                                return regeneratorRuntime.wrap(function _callee$(_context) {
                                  while (1) {
                                    switch (_context.prev = _context.next) {
                                      case 0:
                                        if (!(appsLoaded && wrapper)) {
                                          _context.next = 11;
                                          break;
                                        }

                                        _context.prev = 1;
                                        _context.next = 4;
                                        return getTransactionPath(wrapper);

                                      case 4:
                                        ctx.transactionPath = _context.sent;
                                        resolve();
                                        _context.next = 11;
                                        break;

                                      case 8:
                                        _context.prev = 8;
                                        _context.t0 = _context["catch"](1);
                                        reject(_context.t0);

                                      case 11:
                                      case "end":
                                        return _context.stop();
                                    }
                                  }
                                }, _callee, this, [[1, 8]]);
                              }));

                              return function tryFindTransactionPath() {
                                return _ref3.apply(this, arguments);
                              };
                            }();

                            (0, _aragonjsWrapper.default)(dao, apm['ens-registry'], {
                              accounts: ctx.accounts,
                              provider: web3.currentProvider,
                              onApps: function () {
                                var _onApps = _asyncToGenerator(
                                /*#__PURE__*/
                                regeneratorRuntime.mark(function _callee2(apps) {
                                  return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                    while (1) {
                                      switch (_context2.prev = _context2.next) {
                                        case 0:
                                          appsLoaded = true;
                                          _context2.next = 3;
                                          return tryFindTransactionPath();

                                        case 3:
                                        case "end":
                                          return _context2.stop();
                                      }
                                    }
                                  }, _callee2, this);
                                }));

                                return function onApps(_x6) {
                                  return _onApps.apply(this, arguments);
                                };
                              }(),
                              onError: function onError(err) {
                                return reject(err);
                              }
                            }).then(
                            /*#__PURE__*/
                            function () {
                              var _ref4 = _asyncToGenerator(
                              /*#__PURE__*/
                              regeneratorRuntime.mark(function _callee3(initializedWrapper) {
                                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                                  while (1) {
                                    switch (_context3.prev = _context3.next) {
                                      case 0:
                                        wrapper = initializedWrapper;
                                        _context3.next = 3;
                                        return tryFindTransactionPath();

                                      case 3:
                                      case "end":
                                        return _context3.stop();
                                    }
                                  }
                                }, _callee3, this);
                              }));

                              return function (_x7) {
                                return _ref4.apply(this, arguments);
                              };
                            }()).catch(function (err) {
                              reporter.error('Error inspecting DAO');
                              reporter.debug(err);
                              process.exit(1);
                            });
                          }));

                        case 6:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _callee4, this);
                }));

                return function task(_x4, _x5) {
                  return _task2.apply(this, arguments);
                };
              }()
            }, {
              title: "Sending transaction",
              task: function () {
                var _task4 = _asyncToGenerator(
                /*#__PURE__*/
                regeneratorRuntime.mark(function _callee5(ctx, _task3) {
                  var tx, estimatedGas;
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          _task3.output = "Waiting for response...";
                          tx = ctx.transactionPath[0]; // TODO: Support choosing between possible transaction paths

                          if (tx) {
                            _context5.next = 4;
                            break;
                          }

                          throw new Error('Cannot find transaction path for executing action');

                        case 4:
                          _context5.next = 6;
                          return web3.eth.estimateGas(ctx.transactionPath[0]);

                        case 6:
                          estimatedGas = _context5.sent;
                          tx.gas = parseInt(GAS_ESTIMATE_FUZZ_FACTOR * estimatedGas);
                          return _context5.abrupt("return", new Promise(function (resolve, reject) {
                            web3.eth.sendTransaction(ctx.transactionPath[0], function (err, res) {
                              if (err) {
                                reject(err);
                                return;
                              }

                              ctx.res = res;
                              resolve();
                            });
                          }));

                        case 9:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5, this);
                }));

                return function task(_x8, _x9) {
                  return _task4.apply(this, arguments);
                };
              }()
            }], listrOpts(silent, debug));
            return _context6.abrupt("return", tasks.run().then(function (ctx) {
              reporter.success("Successfully sent executed action starting with transaction: " + JSON.stringify(ctx.transactionPath[0].description));
              process.exit();
            }));

          case 6:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));

  return function (_x, _x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();