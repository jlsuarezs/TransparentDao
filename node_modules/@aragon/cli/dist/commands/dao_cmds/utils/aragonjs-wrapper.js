"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _wrapper = _interopRequireWildcard(require("@aragon/wrapper"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var noop = function noop() {}; // Subscribe to wrapper's observables


var subscribe = function subscribe(wrapper, _ref) {
  var onApps = _ref.onApps,
      onForwarders = _ref.onForwarders,
      onTransaction = _ref.onTransaction,
      onPermissions = _ref.onPermissions;
  var apps = wrapper.apps,
      forwarders = wrapper.forwarders,
      transactions = wrapper.transactions,
      permissions = wrapper.permissions;
  var subscriptions = {
    apps: apps.subscribe(onApps),
    connectedApp: null,
    forwarders: forwarders.subscribe(onForwarders),
    transactions: transactions.subscribe(onTransaction),
    permissions: permissions.subscribe(onPermissions)
  };
  return subscriptions;
};

var resolveEnsDomain =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(domain, opts) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return (0, _wrapper.ensResolve)(domain, opts);

          case 3:
            return _context.abrupt("return", _context.sent);

          case 6:
            _context.prev = 6;
            _context.t0 = _context["catch"](0);

            if (!(_context.t0.message === 'ENS name not defined.')) {
              _context.next = 10;
              break;
            }

            return _context.abrupt("return", '');

          case 10:
            throw _context.t0;

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[0, 6]]);
  }));

  return function resolveEnsDomain(_x, _x2) {
    return _ref2.apply(this, arguments);
  };
}();

var initWrapper =
/*#__PURE__*/
function () {
  var _ref3 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(dao, ensRegistryAddress) {
    var _ref4,
        provider,
        _ref4$accounts,
        accounts,
        _ref4$walletProvider,
        walletProvider,
        _ref4$ipfsConf,
        ipfsConf,
        _ref4$onError,
        onError,
        _ref4$onApps,
        onApps,
        _ref4$onForwarders,
        onForwarders,
        _ref4$onTransaction,
        onTransaction,
        _ref4$onDaoAddress,
        onDaoAddress,
        _ref4$onPermissions,
        onPermissions,
        isDomain,
        daoAddress,
        wrapper,
        subscriptions,
        _args2 = arguments;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _ref4 = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {}, provider = _ref4.provider, _ref4$accounts = _ref4.accounts, accounts = _ref4$accounts === void 0 ? '' : _ref4$accounts, _ref4$walletProvider = _ref4.walletProvider, walletProvider = _ref4$walletProvider === void 0 ? null : _ref4$walletProvider, _ref4$ipfsConf = _ref4.ipfsConf, ipfsConf = _ref4$ipfsConf === void 0 ? {} : _ref4$ipfsConf, _ref4$onError = _ref4.onError, onError = _ref4$onError === void 0 ? noop : _ref4$onError, _ref4$onApps = _ref4.onApps, onApps = _ref4$onApps === void 0 ? noop : _ref4$onApps, _ref4$onForwarders = _ref4.onForwarders, onForwarders = _ref4$onForwarders === void 0 ? noop : _ref4$onForwarders, _ref4$onTransaction = _ref4.onTransaction, onTransaction = _ref4$onTransaction === void 0 ? noop : _ref4$onTransaction, _ref4$onDaoAddress = _ref4.onDaoAddress, onDaoAddress = _ref4$onDaoAddress === void 0 ? noop : _ref4$onDaoAddress, _ref4$onPermissions = _ref4.onPermissions, onPermissions = _ref4$onPermissions === void 0 ? noop : _ref4$onPermissions;
            isDomain = /[a-z0-9]+\.eth/.test(dao);

            if (!isDomain) {
              _context2.next = 8;
              break;
            }

            _context2.next = 5;
            return resolveEnsDomain(dao, {
              provider: provider,
              registryAddress: ensRegistryAddress
            });

          case 5:
            _context2.t0 = _context2.sent;
            _context2.next = 9;
            break;

          case 8:
            _context2.t0 = dao;

          case 9:
            daoAddress = _context2.t0;

            if (daoAddress) {
              _context2.next = 13;
              break;
            }

            onError(new Error('The provided DAO address is invalid'));
            return _context2.abrupt("return");

          case 13:
            onDaoAddress(daoAddress);
            wrapper = new _wrapper.default(daoAddress, {
              ensRegistryAddress: ensRegistryAddress,
              provider: provider,
              apm: {
                ipfs: ipfsConf
              }
            });
            _context2.prev = 15;
            _context2.next = 18;
            return wrapper.init(accounts || [accounts]);

          case 18:
            _context2.next = 26;
            break;

          case 20:
            _context2.prev = 20;
            _context2.t1 = _context2["catch"](15);

            if (!(_context2.t1.message === 'connection not open')) {
              _context2.next = 25;
              break;
            }

            onError(new Error('The wrapper can not be initialized without a connection'));
            return _context2.abrupt("return");

          case 25:
            throw _context2.t1;

          case 26:
            subscriptions = subscribe(wrapper, {
              onApps: onApps,
              onForwarders: onForwarders,
              onTransaction: onTransaction,
              onPermissions: onPermissions
            }, {
              ipfsConf: ipfsConf
            });

            wrapper.cancel = function () {
              Object.values(subscriptions).forEach(function (subscription) {
                if (subscription) {
                  subscription.unsubscribe();
                }
              });
            };

            return _context2.abrupt("return", wrapper);

          case 29:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this, [[15, 20]]);
  }));

  return function initWrapper(_x3, _x4) {
    return _ref3.apply(this, arguments);
  };
}();

var _default = initWrapper;
exports.default = _default;