"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var execHandler = require('./utils/execHandler');

var daoArg = require('./utils/daoArg');

exports.command = 'exec <dao> <proxy-address> <fn> [fn-args..]';
exports.describe = 'Executes a call in an app of a DAO';

exports.builder = function (yargs) {
  return daoArg(yargs).positional('proxy-address', {
    description: 'Proxy address of the app with the function to be run'
  }).positional('fn', {
    description: 'Function to be executed'
  }).option('fn-args', {
    description: 'Arguments to be passed to the function',
    array: true,
    default: []
  });
};

exports.handler =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(_ref) {
    var reporter, dao, apm, network, proxyAddress, fn, fnArgs, getTransactionPath;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            reporter = _ref.reporter, dao = _ref.dao, apm = _ref.apm, network = _ref.network, proxyAddress = _ref.proxyAddress, fn = _ref.fn, fnArgs = _ref.fnArgs;

            getTransactionPath = function getTransactionPath(wrapper) {
              return wrapper.getTransactionPath(proxyAddress, fn, fnArgs);
            };

            return _context.abrupt("return", execHandler(dao, getTransactionPath, {
              reporter: reporter,
              apm: apm,
              network: network
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();