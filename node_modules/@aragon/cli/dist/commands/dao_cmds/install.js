"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var execTask = require('./utils/execHandler').task;

var _require = require('./utils/aragonjs-wrapper'),
    resolveEnsDomain = _require.resolveEnsDomain;

var TaskList = require('listr');

var daoArg = require('./utils/daoArg');

var _require2 = require('../../helpers/web3-fallback'),
    ensureWeb3 = _require2.ensureWeb3;

var APM = require('@aragon/apm');

var defaultAPMName = require('../../helpers/default-apm');

var chalk = require('chalk');

var getRepoTask = require('./utils/getRepoTask');

var encodeInitPayload = require('./utils/encodeInitPayload');

var _require3 = require('../../util'),
    getContract = _require3.getContract,
    ANY_ENTITY = _require3.ANY_ENTITY,
    NO_MANAGER = _require3.NO_MANAGER;

var kernelABI = require('@aragon/wrapper/abi/aragon/Kernel');

var listrOpts = require('../../helpers/listr-options');

var addressesEqual = function addressesEqual(a, b) {
  return a.toLowerCase() === b.toLowerCase();
};

var ZERO_ADDR = '0x0000000000000000000000000000000000000000';

var setPermissionsWithoutTransactionPathing =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(web3, sender, aclAddress, permissions) {
    var acl;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            acl = new web3.eth.Contract(getContract('@aragon/os', 'ACL').abi, aclAddress);
            return _context.abrupt("return", Promise.all(permissions.map(function (_ref2) {
              var _ref3 = _slicedToArray(_ref2, 4),
                  who = _ref3[0],
                  where = _ref3[1],
                  what = _ref3[2],
                  manager = _ref3[3];

              return acl.methods.createPermission(who, where, what, manager).send({
                from: sender,
                gasLimit: 1e6
              });
            })));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function setPermissionsWithoutTransactionPathing(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

exports.command = 'install <dao> <apmRepo> [apmRepoVersion]';
exports.describe = 'Install an app into a DAO';

exports.builder = function (yargs) {
  return getRepoTask.args(daoArg(yargs)).option('app-init', {
    description: 'Name of the function that will be called to initialize an app',
    default: 'initialize'
  }).option('app-init-args', {
    description: 'Arguments for calling the app init function',
    array: true,
    default: []
  }).options('set-permissions', {
    description: 'Whether to set permissions in the app',
    boolean: true,
    default: true
  });
};

exports.task =
/*#__PURE__*/
function () {
  var _ref5 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee6(_ref4) {
    var wsProvider, web3, reporter, dao, network, apmOptions, apmRepo, apmRepoVersion, appInit, appInitArgs, setPermissions, silent, debug, apm, kernel, tasks;
    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            wsProvider = _ref4.wsProvider, web3 = _ref4.web3, reporter = _ref4.reporter, dao = _ref4.dao, network = _ref4.network, apmOptions = _ref4.apmOptions, apmRepo = _ref4.apmRepo, apmRepoVersion = _ref4.apmRepoVersion, appInit = _ref4.appInit, appInitArgs = _ref4.appInitArgs, setPermissions = _ref4.setPermissions, silent = _ref4.silent, debug = _ref4.debug;
            apmOptions.ensRegistryAddress = apmOptions['ens-registry'];
            _context6.next = 4;
            return APM(web3, apmOptions);

          case 4:
            apm = _context6.sent;
            apmRepo = defaultAPMName(apmRepo);

            if (!/0x[a-fA-F0-9]{40}/.test(dao)) {
              _context6.next = 10;
              break;
            }

            _context6.t0 = dao;
            _context6.next = 13;
            break;

          case 10:
            _context6.next = 12;
            return resolveEnsDomain(dao, {
              provider: web3.currentProvider,
              registryAddress: apmOptions.ensRegistryAddress
            });

          case 12:
            _context6.t0 = _context6.sent;

          case 13:
            dao = _context6.t0;
            kernel = new web3.eth.Contract(getContract('@aragon/os', 'Kernel').abi, dao);
            tasks = new TaskList([{
              title: "Fetching ".concat(chalk.bold(apmRepo), "@").concat(apmRepoVersion),
              task: getRepoTask.task({
                apm: apm,
                apmRepo: apmRepo,
                apmRepoVersion: apmRepoVersion
              })
            }, {
              title: "Checking installed version",
              task: function () {
                var _task2 = _asyncToGenerator(
                /*#__PURE__*/
                regeneratorRuntime.mark(function _callee2(ctx, _task) {
                  var basesNamespace, currentBase;
                  return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          _context2.next = 2;
                          return kernel.methods.APP_BASES_NAMESPACE().call();

                        case 2:
                          basesNamespace = _context2.sent;
                          _context2.next = 5;
                          return kernel.methods.getApp(basesNamespace, ctx.repo.appId).call();

                        case 5:
                          currentBase = _context2.sent;

                          if (!(currentBase === ZERO_ADDR)) {
                            _context2.next = 9;
                            break;
                          }

                          _task.skip("Installing the first instance of ".concat(apmRepo, " in DAO"));

                          return _context2.abrupt("return");

                        case 9:
                          if (addressesEqual(currentBase, ctx.repo.contractAddress)) {
                            _context2.next = 11;
                            break;
                          }

                          throw new Error("Cannot install app on a different version. Currently installed version for ".concat(apmRepo, " in the DAO is ").concat(currentBase, "\n Please upgrade using 'dao upgrade' first or install a different version."));

                        case 11:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2, this);
                }));

                function task(_x6, _x7) {
                  return _task2.apply(this, arguments);
                }

                return task;
              }()
            }, {
              title: 'Deploying app instance',
              task: function () {
                var _task3 = _asyncToGenerator(
                /*#__PURE__*/
                regeneratorRuntime.mark(function _callee3(ctx) {
                  var initPayload, getTransactionPath;
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          initPayload = encodeInitPayload(web3, ctx.repo.abi, appInit, appInitArgs);

                          if (initPayload === '0x') {
                            ctx.notInitialized = true;
                          }

                          getTransactionPath = function getTransactionPath(wrapper) {
                            var fnArgs = [ctx.repo.appId, ctx.repo.contractAddress, initPayload, false];
                            return wrapper.getTransactionPath(dao, 'newAppInstance', fnArgs);
                          };

                          return _context3.abrupt("return", execTask(dao, getTransactionPath, {
                            reporter: reporter,
                            apm: apmOptions,
                            web3: web3,
                            wsProvider: wsProvider
                          }));

                        case 4:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3, this);
                }));

                function task(_x8) {
                  return _task3.apply(this, arguments);
                }

                return task;
              }()
            }, {
              title: 'Fetching deployed app',
              enabled: function enabled() {
                return setPermissions;
              },
              task: function () {
                var _task5 = _asyncToGenerator(
                /*#__PURE__*/
                regeneratorRuntime.mark(function _callee4(ctx, _task4) {
                  var logABI, logSignature, logTopic, deployLog, log;
                  return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          logABI = kernelABI.find(function (_ref6) {
                            var type = _ref6.type,
                                name = _ref6.name;
                            return type === 'event' && name === 'NewAppProxy';
                          });

                          if (logABI) {
                            _context4.next = 3;
                            break;
                          }

                          throw new Error('Kernel ABI in aragon.js doesnt contain NewAppProxy log');

                        case 3:
                          logSignature = "".concat(logABI.name, "(").concat(logABI.inputs.map(function (i) {
                            return i.type;
                          }).join(','), ")");
                          logTopic = web3.utils.sha3(logSignature);
                          deployLog = ctx.receipt.logs.find(function (_ref7) {
                            var topics = _ref7.topics,
                                address = _ref7.address;
                            return topics[0] === logTopic && addressesEqual(dao, address);
                          });

                          if (deployLog) {
                            _context4.next = 9;
                            break;
                          }

                          _task4.skip("App wasn't deployed in transaction.");

                          return _context4.abrupt("return");

                        case 9:
                          log = web3.eth.abi.decodeLog(logABI.inputs, deployLog.data);
                          ctx.appAddress = log.proxy;

                        case 11:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _callee4, this);
                }));

                function task(_x9, _x10) {
                  return _task5.apply(this, arguments);
                }

                return task;
              }()
            }, {
              title: 'Set permissions',
              enabled: function enabled(ctx) {
                return setPermissions && ctx.appAddress;
              },
              task: function () {
                var _task7 = _asyncToGenerator(
                /*#__PURE__*/
                regeneratorRuntime.mark(function _callee5(ctx, _task6) {
                  var aclAddress, permissions;
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          _context5.next = 2;
                          return kernel.methods.acl().call();

                        case 2:
                          aclAddress = _context5.sent;

                          if (!(!ctx.repo.roles || ctx.repo.roles.length === 0)) {
                            _context5.next = 5;
                            break;
                          }

                          throw new Error('You have no permissions defined in your arapp.json\nThis is required for your app to properly show up.');

                        case 5:
                          permissions = ctx.repo.roles.map(function (role) {
                            return [ANY_ENTITY, ctx.appAddress, role.bytes, NO_MANAGER];
                          });

                          if (ctx.accounts) {
                            _context5.next = 10;
                            break;
                          }

                          _context5.next = 9;
                          return web3.eth.getAccounts();

                        case 9:
                          ctx.accounts = _context5.sent;

                        case 10:
                          return _context5.abrupt("return", setPermissionsWithoutTransactionPathing(web3, ctx.accounts[0], aclAddress, permissions));

                        case 11:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5, this);
                }));

                function task(_x11, _x12) {
                  return _task7.apply(this, arguments);
                }

                return task;
              }()
            }], listrOpts(silent, debug));
            return _context6.abrupt("return", tasks);

          case 17:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));

  return function (_x5) {
    return _ref5.apply(this, arguments);
  };
}();

exports.handler =
/*#__PURE__*/
function () {
  var _ref9 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee7(_ref8) {
    var reporter, dao, network, apmOptions, apmRepo, apmRepoVersion, appInit, appInitArgs, setPermissions, wsProvider, silent, debug, web3, task;
    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            reporter = _ref8.reporter, dao = _ref8.dao, network = _ref8.network, apmOptions = _ref8.apm, apmRepo = _ref8.apmRepo, apmRepoVersion = _ref8.apmRepoVersion, appInit = _ref8.appInit, appInitArgs = _ref8.appInitArgs, setPermissions = _ref8.setPermissions, wsProvider = _ref8.wsProvider, silent = _ref8.silent, debug = _ref8.debug;
            _context7.next = 3;
            return ensureWeb3(network);

          case 3:
            web3 = _context7.sent;
            _context7.next = 6;
            return exports.task({
              web3: web3,
              reporter: reporter,
              dao: dao,
              network: network,
              apmOptions: apmOptions,
              apmRepo: apmRepo,
              apmRepoVersion: apmRepoVersion,
              appInit: appInit,
              appInitArgs: appInitArgs,
              setPermissions: setPermissions,
              wsProvider: wsProvider,
              silent: silent,
              debug: debug
            });

          case 6:
            task = _context7.sent;
            return _context7.abrupt("return", task.run().then(function (ctx) {
              reporter.info("Successfully executed: \"".concat(ctx.transactionPath[0].description, "\""));

              if (ctx.appAddress) {
                reporter.success("Installed ".concat(apmRepo, " at: ").concat(chalk.bold(ctx.appAddress)));
              } else {
                reporter.warning('After the app instance is created, you will need to assign permissions to it for it appear as an app in the DAO');
              }

              if (ctx.notInitialized) {
                reporter.warning('App could not be initialized, check the --app-init flag. Functions protected behind the ACL will not work until the app is initialized');
              }

              process.exit();
            }));

          case 8:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, this);
  }));

  return function (_x13) {
    return _ref9.apply(this, arguments);
  };
}();