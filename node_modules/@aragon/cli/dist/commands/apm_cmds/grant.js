"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var APM = require('@aragon/apm');

var ACL = require('../../acl');

var _require = require('../../helpers/web3-fallback'),
    ensureWeb3 = _require.ensureWeb3;

exports.command = 'grant [grantees..]';
exports.describe = 'Grant an address permission to create new versions in this package';

exports.builder = function (yargs) {
  return yargs.positional('grantees', {
    description: 'The address being granted the permission to publish to the repo',
    array: true,
    default: []
  });
};

exports.handler =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(_ref) {
    var reporter, cwd, network, module, apmOptions, grantees, web3, apm, acl, repo, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, address, accounts, from, transaction, DEFAULT_GAS_PRICE, receipt;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            reporter = _ref.reporter, cwd = _ref.cwd, network = _ref.network, module = _ref.module, apmOptions = _ref.apm, grantees = _ref.grantees;
            _context.next = 3;
            return ensureWeb3(network);

          case 3:
            web3 = _context.sent;
            apmOptions.ensRegistryAddress = apmOptions['ens-registry'];
            _context.next = 7;
            return APM(web3, apmOptions);

          case 7:
            apm = _context.sent;
            acl = ACL({
              web3: web3,
              network: network
            });
            _context.next = 11;
            return apm.getRepository(module.appName).catch(function () {
              return null;
            });

          case 11:
            repo = _context.sent;

            if (!(repo === null)) {
              _context.next = 14;
              break;
            }

            throw new Error("Repository ".concat(module.appName, " does not exist and it's registry does not exist"));

          case 14:
            if (grantees.length === 0) {
              reporter.warning('No grantee addresses provided');
            }

            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 18;
            _iterator = grantees[Symbol.iterator]();

          case 20:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context.next = 47;
              break;
            }

            address = _step.value;
            reporter.info("Granting permission to publish on ".concat(module.appName, " for ").concat(address)); // Decode sender

            _context.next = 25;
            return web3.eth.getAccounts();

          case 25:
            accounts = _context.sent;
            from = accounts[0]; // Build transaction

            _context.next = 29;
            return acl.grant(repo.options.address, address);

          case 29:
            transaction = _context.sent;
            DEFAULT_GAS_PRICE = require('../../../package.json').aragon.defaultGasPrice;
            transaction.from = from;
            transaction.gasPrice = network.gasPrice || DEFAULT_GAS_PRICE;
            _context.prev = 33;
            _context.next = 36;
            return web3.eth.sendTransaction(transaction);

          case 36:
            receipt = _context.sent;
            reporter.success("Successful transaction (".concat(receipt.transactionHash, ")"));
            _context.next = 44;
            break;

          case 40:
            _context.prev = 40;
            _context.t0 = _context["catch"](33);
            reporter.error("".concat(_context.t0, "\nTransaction failed"));
            process.exit(1);

          case 44:
            _iteratorNormalCompletion = true;
            _context.next = 20;
            break;

          case 47:
            _context.next = 53;
            break;

          case 49:
            _context.prev = 49;
            _context.t1 = _context["catch"](18);
            _didIteratorError = true;
            _iteratorError = _context.t1;

          case 53:
            _context.prev = 53;
            _context.prev = 54;

            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }

          case 56:
            _context.prev = 56;

            if (!_didIteratorError) {
              _context.next = 59;
              break;
            }

            throw _iteratorError;

          case 59:
            return _context.finish(56);

          case 60:
            return _context.finish(53);

          case 61:
            process.exit(0);

          case 62:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[18, 49, 53, 61], [33, 40], [54,, 56, 60]]);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();