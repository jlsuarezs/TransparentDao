"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var DEFAULT_GAS_PRICE = require('../../package.json').aragon.defaultGasPrice;

module.exports = function (_ref) {
  var web3 = _ref.web3,
      network = _ref.network;

  var getACL =
  /*#__PURE__*/
  function () {
    var _ref2 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(repoAddr) {
      var repo, daoAddr, dao, aclAddr;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              repo = new web3.eth.Contract(require('@aragon/os/build/contracts/AragonApp').abi, repoAddr);
              _context.next = 3;
              return repo.methods.kernel().call();

            case 3:
              daoAddr = _context.sent;
              dao = new web3.eth.Contract(require('@aragon/os/build/contracts/Kernel').abi, daoAddr);
              _context.next = 7;
              return dao.methods.acl().call();

            case 7:
              aclAddr = _context.sent;
              return _context.abrupt("return", new web3.eth.Contract(require('@aragon/os/build/contracts/ACL').abi, aclAddr));

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function getACL(_x) {
      return _ref2.apply(this, arguments);
    };
  }();

  var getRoleId =
  /*#__PURE__*/
  function () {
    var _ref3 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee2(repoAddr) {
      var repo;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              repo = new web3.eth.Contract(require('@aragon/os/build/contracts/Repo').abi, repoAddr);
              return _context2.abrupt("return", repo.methods.CREATE_VERSION_ROLE().call());

            case 2:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function getRoleId(_x2) {
      return _ref3.apply(this, arguments);
    };
  }();

  return {
    grant: function () {
      var _grant = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3(repoAddr, grantee) {
        var acl, roleId, call;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return getACL(repoAddr);

              case 2:
                acl = _context3.sent;
                _context3.next = 5;
                return getRoleId(repoAddr);

              case 5:
                roleId = _context3.sent;
                call = acl.methods.grantPermission(grantee, repoAddr, roleId);
                return _context3.abrupt("return", {
                  to: acl.options.address,
                  data: call.encodeABI(),
                  gas: web3.utils.toHex(5e5),
                  gasPrice: network.gasPrice || DEFAULT_GAS_PRICE
                });

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function grant(_x3, _x4) {
        return _grant.apply(this, arguments);
      }

      return grant;
    }()
  };
};