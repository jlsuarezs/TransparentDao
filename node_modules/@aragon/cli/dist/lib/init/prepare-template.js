"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prepareTemplate = prepareTemplate;

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function prepareTemplate(_x, _x2) {
  return _prepareTemplate.apply(this, arguments);
}

function _prepareTemplate() {
  _prepareTemplate = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(basename, appName) {
    var arappPath, arapp, props, gitFolderPath, licensePath, packageJsonPath, packageJson;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            arappPath = _path.default.resolve(basename, 'arapp.json');
            _context.next = 3;
            return _fsExtra.default.readJson(arappPath);

          case 3:
            arapp = _context.sent;

            // TODO remove once the old arapp.json is no longer supported
            if (!arapp.environments) {
              arapp.environments = {};
            }

            props = {
              network: 'development',
              appName: appName
            };

            if (arapp.environments.default) {
              Object.assign(arapp.environments.default, props);
            } else {
              arapp.environments.default = props;
            } // remove old arapp.json props


            delete arapp.appName;
            delete arapp.version;
            gitFolderPath = _path.default.resolve(basename, '.git');
            licensePath = _path.default.resolve(basename, 'LICENSE');
            packageJsonPath = _path.default.resolve(basename, 'package.json');
            _context.next = 14;
            return _fsExtra.default.readJson(packageJsonPath);

          case 14:
            packageJson = _context.sent;
            delete packageJson.license;
            return _context.abrupt("return", Promise.all([_fsExtra.default.writeJson(arappPath, arapp, {
              spaces: 2
            }), _fsExtra.default.writeJson(packageJsonPath, packageJson, {
              spaces: 2
            }), _fsExtra.default.remove(gitFolderPath), _fsExtra.default.remove(licensePath)]));

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _prepareTemplate.apply(this, arguments);
}