{"version":3,"sources":["../src/index.js"],"names":["AppProxyHandler","get","target","name","params","rpc","sendAndObserveResponse","pluck","AppProxy","constructor","provider","Messenger","accounts","sendAndObserveResponses","network","identify","identifier","send","events","external","address","jsonInterface","contract","fromBlock","filter","item","type","callMethods","constant","forEach","methodJsonInterface","cache","key","value","state","store","reducer","initialState","first","wrappedReducer","event","Promise","resolve","store$","switchMap","mergeScan","map","publishReplay","connect","call","method","notify","title","body","context","date","Date","requests","request","describeScript","script","web3Eth","AragonApp","providers","MessagePortMessage","Proxy"],"mappings":"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","sourcesContent":["import Messenger, { providers } from '@aragon/messenger'\nimport { defer } from 'rxjs/observable/defer'\nimport { empty } from 'rxjs/observable/empty'\nimport { fromPromise } from 'rxjs/observable/fromPromise'\nimport { merge } from 'rxjs/observable/merge'\n\nexport const AppProxyHandler = {\n  get (target, name, receiver) {\n    if (name in target) {\n      return target[name]\n    }\n\n    return function (...params) {\n      return target.rpc.sendAndObserveResponse(\n        'intent',\n        [name, ...params]\n      ).pluck('result')\n    }\n  }\n}\n\n/**\n * A JavaScript proxy that wraps RPC calls to the wrapper.\n */\nexport class AppProxy {\n  constructor (provider) {\n    this.rpc = new Messenger(provider)\n  }\n\n  /**\n   * Get an array of the accounts the user currently controls over time.\n   *\n   * @return {Observable}\n   */\n  accounts () {\n    return this.rpc.sendAndObserveResponses(\n      'accounts'\n    ).pluck('result')\n  }\n\n  /**\n   * Get the network the app is connected to over time.\n   *\n   * @return {Observable}\n   */\n  network () {\n    return this.rpc.sendAndObserveResponses(\n      'network'\n    ).pluck('result')\n  }\n\n  /**\n   * Set the app identifier.\n   *\n   * An app identifier is a way to distinguish multiple instances\n   * of the same app.\n   *\n   * Examples include: the name of a token that the app manages,\n   * the type of content that a TCR is curating, the name of a group etc.\n   *\n   * @param  {string} identifier\n   * @return {void}\n   */\n  identify (identifier) {\n    this.rpc.send(\n      'identify',\n      [identifier]\n    )\n  }\n\n  /**\n   * Get events from the application contract.\n   *\n   * @memberof AppProxy\n   * @return {Observable} An observable of contract events (as defined in Web3)\n   */\n  events () {\n    return defer(\n      () => this.rpc.sendAndObserveResponses(\n        'events'\n      ).pluck('result')\n    )\n  }\n\n  /**\n   * Create a handle to an external contract.\n   *\n   * @param  {string} address The address of the external contract\n   * @param  {Array<Object>} jsonInterface The JSON interface of the external contract\n   * @return {Object}\n   */\n  external (address, jsonInterface) {\n    const contract = {\n      events: (fromBlock = 0) => {\n        return defer(\n          () => this.rpc.sendAndObserveResponses(\n            'external_events',\n            [\n              address,\n              jsonInterface.filter(\n                (item) => item.type === 'event'\n              ),\n              fromBlock\n            ]\n          ).pluck('result')\n        )\n      }\n    }\n\n    // Bind calls\n    const callMethods = jsonInterface.filter(\n      (item) => item.type === 'function' && item.constant\n    )\n    callMethods.forEach((methodJsonInterface) => {\n      contract[methodJsonInterface.name] = (...params) => {\n        return this.rpc.sendAndObserveResponse(\n          'external_call',\n          [address, methodJsonInterface, ...params]\n        ).pluck('result')\n      }\n    })\n\n    return contract\n  }\n\n  /**\n   * Cache a value for the application.\n   *\n   * @memberof AppProxy\n   * @param  {string} key   The cache key\n   * @param  {string} value The value to cache\n   * @return {string}       Will pass through `value`\n   */\n  cache (key, value) {\n    this.rpc.send(\n      'cache',\n      ['set', key, value]\n    )\n\n    return value\n  }\n\n  /**\n   * Observe the application state.\n   *\n   * @memberof AppProxy\n   * @return {Observable} An observable of application states over time.\n   */\n  state () {\n    return this.rpc.sendAndObserveResponses(\n      'cache',\n      ['get', 'state']\n    ).pluck('result')\n  }\n\n  /**\n   * Listens for events, passes them through `reducer`, caches the resulting state\n   * and returns that state.\n   *\n   * The reducer takes the signature `(state, event)` a lÃ¡ Redux.\n   *\n   * Optionally takes an array of other web3 event observables to merge with this app's events\n   *\n   * @memberof AppProxy\n   * @param  {reducer}      reducer\n   * @param  {Observable[]} [events]\n   * @return {Observable}   An observable of the resulting state from reducing events\n   */\n  store (reducer, events = [empty()]) {\n    const initialState = this.state().first()\n\n    // Wrap the reducer in another reducer that\n    // allows us to execute code asynchronously\n    // in our reducer. That's a lot of reducing.\n    //\n    // This is needed for the `mergeScan` operator.\n    // Also, this supports both sync and async code\n    // (because of the `Promise.resolve`).\n    const wrappedReducer = (state, event) =>\n      fromPromise(\n        Promise.resolve(reducer(state, event))\n      )\n\n    const store$ = initialState\n      .switchMap((initialState) =>\n        merge(\n          this.events(),\n          ...events\n        )\n          .mergeScan(wrappedReducer, initialState, 1)\n          .map((state) => this.cache('state', state))\n      )\n      .publishReplay(1)\n    store$.connect()\n\n    return store$\n  }\n\n  /**\n   * Perform a call to the application contract.\n   *\n   * @memberof AppProxy\n   * @param  {string} method The method to call\n   * @param  {...*} params Parameters for the call\n   * @return {Observable} An observable that emits the return value(s) of the call.\n   */\n  call (method, ...params) {\n    return this.rpc.sendAndObserveResponse(\n      'call',\n      [method, ...params]\n    ).pluck('result')\n  }\n\n  /**\n   * Send a notification.\n   *\n   * @memberof AppProxy\n   * @param {string} title The notification title\n   * @param {string} body The notification body\n   * @param {object} [context={}] The application context to send back if the notification is clicked\n   * @param {Date} [date=new Date()] The notification timestamp\n   * @return {void}\n   */\n  notify (title, body, context = {}, date = new Date()) {\n    return this.rpc.send(\n      'notification',\n      [title, body, context, date]\n    )\n  }\n\n  /**\n   * Listen for app contexts sent from the wrapper.\n   *\n   * An app context is sent from the wrapper and correspond to a specific view\n   * in your app.\n   *\n   * For example, when sending a notification, you can optionally supply an\n   * app context. If the notification is clicked, the app is loaded and\n   * the context is sent back to the app.\n   *\n   * @return {Observable} An observable of incoming app contexts\n   */\n  context () {\n    return this.rpc.requests()\n      .filter((request) => request.method === 'context')\n      .map((request) => request.params[0])\n  }\n\n  /**\n   * Describes the transaction path that an EVM callscript encodes.\n   *\n   * @param  {string} script\n   * @return {Observable} An observable that emits the transaction path the script encodes\n   */\n  describeScript (script) {\n    return this.rpc.sendAndObserveResponse(\n      'describe_script',\n      [script]\n    ).pluck('result')\n  }\n\n  /**\n   * Invoke a whitelisted web3.eth function.\n   *\n   * @param  {string} method The method to call. Must be in the whitelisted group (mostly getters).\n   * @param  {...*} params Parameters for the call\n   * @return {Observable} An observable that emits the return value(s) of the call.\n   */\n  web3Eth (method, ...params) {\n    return this.rpc.sendAndObserveResponse(\n      'web3_eth',\n      [method, ...params]\n    ).pluck('result')\n  }\n}\n\n/**\n * An Aragon app.\n *\n * This class handles communicating with the wrapper using Aragon RPC.\n *\n * The class itself contains \"magic methods\", that is, undefined methods\n * will instead become an intent that is sent to the wrapper.\n *\n * For example:\n *\n * ```js\n * app.transfer('foo', 'bar')\n * ```\n *\n * will result in an intent to send a transaction to the application proxy,\n * invoking the contract function `transfer` with the parameters `foo` and `bar`.\n *\n * @param {Object} [provider=MessagePortMessage] An RPC provider (will default to using the MessagePort API)\n */\nexport default class AragonApp {\n  constructor (provider = new providers.MessagePortMessage()) {\n    return new Proxy(\n      new AppProxy(provider),\n      AppProxyHandler\n    )\n  }\n}\n\n// Re-export the Aragon RPC providers\nexport { providers }\n"],"file":"index.js"}